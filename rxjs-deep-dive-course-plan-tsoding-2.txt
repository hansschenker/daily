javascript limitation to program in a functional style
-----------------------------------------------------
- not use any loops we're not going to use for loop nwhile loop whatever you have the loops
- no if condition so ternary operator is
- the body of the function
- should always consist of a single return
- there should be nothing in the body of the function only a expression in the return statement
- no arrays (they are mutable)
 - every function can have only zero or one  argument 

sum function
----------------------------------------
- it doesn't use any loops 
- it doesn't use if construction it uses only ternary operator and the body
- the function consists of a single return here we have a return and just a single expression so it's a purely
- no side effects by side effect we usually mean something that happens to the outside world 
  functions are not allowed to print on


usually divide our program into two parts the 
--------------------------------------------
 - first part is pure functional part which doesn't do any side effects
 - second part is let's call it dirty part it does interaction with the use

address limitation single argument function
---------------------------------------------

function add that takes two arguments and I just calculates the sum of the argent's

define a function that takes one argument just one argument the first one
and that function returns another function that takes the second argument
and inside of the second function we already do the work that we want it to
do and to invoke that function you invoke the first function then that


address limitation no use of arrays
----------------------------------------------------------------------------
- use functional lists are just a chain of pairs

- construct a pair the function that construct the pair takes two are
- implement space as objects the second operation is taking the first element of

FST it takes a pair and returns the first element of the pair and the last
SND takes the second element of the pair now

have no pairs we can easily chain them into a list so let's denote 
- an empty list with no if we see new that means
- a list with a single element
- if we want to add another element of the list we pair that list with another
  element like so now it's the list of two elements two and one and we continue


let head = fst
let tail = snd

- proposing to make some kind of bridge
  between functional world and dirty imperative for this bridge is going to

finished functional base
----------------------------------------------------------------------------------

