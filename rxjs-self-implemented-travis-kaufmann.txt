document.write("<h1>Open the console</h1>");
const btn = (() => {
  const btn = document.createElement("button");
  btn.id = "clickme";
  btn.textContent = "click me";
  return btn;
})();
document.body.appendChild(btn);

/// Basic observables

interface Observer<T> {
  next(value: T): void;
  error(err: any): void;
  complete(): void;
}

interface Subscription {
  unsubscribe(): void;
}

interface Scheduler {
  schedule(work: Function): void;
}

const syncScheduler: Scheduler = {
  schedule(work) {
    work();
  }
};

const asyncScheduler: Scheduler = {
  schedule(work) {
    setTimeout(work, 0);
  }
};

class Observable<T> {
  constructor(
    private observe: (observer: Observer<T>) => (() => void) | void,
    private scheduler: Scheduler = syncScheduler
  ) {}

  subscribe(
    next?: (value: T) => void,
    error?: (err: any) => void,
    complete?: () => void
  ): Subscription {
    const observer: Observer<T> = {
      next: (value: T) => {
        if (next) this.scheduler.schedule(() => next(value));
      },
      error: (err: any) => {
        if (error) this.scheduler.schedule(() => error(err));
      },
      complete: () => {
        if (complete) this.scheduler.schedule(() => complete());
      }
    };

    const teardown = this.observe(observer);
    return {
      unsubscribe() {
        if (teardown) teardown();
      }
    };
  }

  /** @see https://github.com/ReactiveX/rxjs/blob/6.5.2/src/internal/Observable.ts#L308-L318 */
  pipe(): Observable<T>;
  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;
  pipe<A, B>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>
  ): Observable<B>;
  pipe<A, B, C>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>
  ): Observable<C>;
  pipe<A, B, C, D>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>
  ): Observable<D>;
  pipe(...pipeline: OperatorFunction<any, any>[]): Observable<any> {
    let resultObservable: Observable<any> = this;
    for (const operator of pipeline) {
      resultObservable = operator(resultObservable);
    }
    return resultObservable;
  }
}

const observable = new Observable(subscriber => {
  subscriber.next(1);
  subscriber.next(2);
  subscriber.next(3);
  setTimeout(() => {
    subscriber.next(4);
    subscriber.complete();
  }, 1000);
});
console.log("just before subscribe");
observable.subscribe(
  x => {
    console.log("got value " + x);
  },
  err => {
    console.error("something wrong occurred: " + err);
  },
  () => {
    console.log("done");
  }
);
console.log("just after subscribe");

// Factory functions

function of<T>(...values: T[]): Observable<T> {
  return new Observable(obs => {
    for (const value of values) {
      obs.next(value);
    }
    obs.complete();
  });
}

of(1, 2, 3).subscribe(x => console.log("of", x));

function from<T>(convertible: Promise<T> | ArrayLike<T>): Observable<T> {
  if (typeof (convertible as any).length === "number") {
    const arrayLike = convertible as ArrayLike<T>;
    return new Observable(obs => {
      for (let i = 0; i < arrayLike.length; i++) {
        obs.next(arrayLike[i]);
      }
      obs.complete();
    });
  }

  // Otherwise, it's a promise
  const promise = convertible as Promise<T>;
  return new Observable(obs => {
    promise
      .then(x => {
        obs.next(x);
        obs.complete();
      })
      .catch(err => obs.error(err));
  });
}

from([4, 5, 6]).subscribe(x => console.log("fromArray:", x));

from(new Promise(resolve => setTimeout(() => resolve(42), 1100))).subscribe(
  x => {
    console.log("fromPromise:", x);
  }
);

function fromEvent<T extends Event = Event>(
  target: EventTarget,
  eventName: string
): Observable<T> {
  return new Observable(obs => {
    const listener: EventListener = (evt: T) => {
      obs.next(evt);
    };
    target.addEventListener(eventName, listener);
    return () => target.removeEventListener(eventName, listener);
  });
}

fromEvent(btn, "click").subscribe(() => console.log("click"));

/// Operators

type OperatorFunction<T, R> = (source: Observable<T>) => Observable<R>;

function map<T, R>(
  transform: (value: T, index: number) => R
): OperatorFunction<T, R> {
  let currentIndex = 0;
  return source =>
    new Observable(obs => {
      const subscription = source.subscribe(
        value => {
          const mapped = transform(value, currentIndex++);
          obs.next(mapped);
        },
        err => {
          obs.error(err);
        },
        () => {
          obs.complete();
        }
      );
      return () => subscription.unsubscribe();
    });
}

function reduce<T, R>(
  accumulate: (acc: T | R, value: T, index: number) => T | R,
  seed?: T | R
): OperatorFunction<T, T | R> {
  let currentIndex = 0;
  let accumulated = seed;
  return source =>
    new Observable(obs => {
      const subscription = source.subscribe(
        value => {
          accumulated = accumulate(accumulated, value, currentIndex++);
        },
        err => {
          obs.error(err);
        },
        () => {
          obs.next(accumulated);
          obs.complete();
        }
      );
      return () => subscription.unsubscribe();
    });
}

// first attempt: using operators

const oneThroughTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

oneThroughTen
  .pipe(
    map(n => n * n),
    reduce((s, n) => s + n, 0)
  )
  .subscribe(sqSum => console.log("Squared sum =", sqSum));

// second attempt: combining operators to make our own custom operator

function computeSquaredSum(): OperatorFunction<number, number> {
  return source =>
    source.pipe(
      map(n => n * n),
      reduce((s, n) => s + n, 0)
    );
}
oneThroughTen
  .pipe(computeSquaredSum())
  .subscribe(x => console.log("Squared sum w/ custom op =", x));

// Higher-order operators

function mergeMap<T, R>(
  project: (value: T, index: number) => Observable<R>
): OperatorFunction<T, R> {
  let currentIndex = 0;
  return source =>
    new Observable(obs => {
      const subscriptions = new Set<Subscription>();
      const sub = source.subscribe(
        x => {
          const projected = project(x, currentIndex++);
          const innerSub = projected.subscribe(
            px => obs.next(px),
            err => obs.error(err),
            () => {
              subscriptions.delete(innerSub);
            }
          );
          subscriptions.add(innerSub);
        },
        err => obs.error(err),
        () => {
          Array.from(subscriptions).forEach(s => s.unsubscribe());
          obs.complete();
        }
      );
      subscriptions.add(sub);
      return () => Array.from(subscriptions).forEach(s => s.unsubscribe());
    });
}

function sleep(ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function createInner(x: number) {
  return new Observable(obs => {
    (async () => {
      for (let i = 0; i < 3; i++) {
        if (i > 0) await sleep(500);
        obs.next(10 * x);
      }
      obs.complete();
    })();
  });
}

const outer = new Observable(obs => {
  (async () => {
    obs.next(1);
    await sleep(800);
    obs.next(3);
    await sleep(3000);
    obs.complete();
  })();
});

outer
  .pipe(mergeMap(createInner))
  .subscribe(x => console.log("[mergeMap] outer:", x));

function concatMap<T, R>(
  project: (value: T, index: number) => Observable<R>
): OperatorFunction<T, R> {
  let currentIndex = 0;
  const buffer: Array<Observable<R>> = [];

  const subscribeTo = (
    projected: Observable<R>,
    obs: Observer<R>,
    subscriptions: Set<Subscription>
  ): void => {
    const sub = projected.subscribe(
      px => obs.next(px),
      err => obs.error(err),
      () => {
        subscriptions.delete(sub);
        if (subscriptions.size === 0 && buffer.length > 0) {
          subscribeTo(buffer.shift(), obs, subscriptions);
        }
      }
    );
    subscriptions.add(sub);
  };

  return source =>
    new Observable(obs => {
      const subscriptions = new Set<Subscription>();
      const outerSub = source.subscribe(
        x => {
          const projected = project(x, currentIndex++);
          if (subscriptions.size > 0) {
            buffer.push(projected);
            return;
          }
          subscribeTo(projected, obs, subscriptions);
        },
        err => obs.error(err),
        () => {
          Array.from(subscriptions).forEach(s => s.unsubscribe());
          obs.complete();
        }
      );
      return () => {
        outerSub.unsubscribe();
        Array.from(subscriptions).forEach(s => s.unsubscribe());
      };
    });
}

outer
  .pipe(concatMap(createInner))
  .subscribe(x => console.log("[concatMap] outer:", x), undefined, () =>
    console.log("[concatMap] done!")
  );

/// Schedulers

function observeOn<T>(scheduler: Scheduler): OperatorFunction<T, T> {
  return source =>
    new Observable(proxyObserver => {
      const subscription = source.subscribe(
        x => proxyObserver.next(x),
        err => proxyObserver.error(err),
        () => proxyObserver.complete()
      );
      return () => subscription.unsubscribe();
    }, scheduler);
}

const asyncObs = of(1, 2, 3).pipe(observeOn(asyncScheduler));
console.log("[async] just before subscribe");
asyncObs.subscribe(
  x => console.log("[async] got value", x),
  err => console.error("[async] error:", err),
  () => console.log("[async] done")
);
console.log("[async] just after subscribe");
