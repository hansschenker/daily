RxJs Glossary (from RxJs.dev)

Major Entities

1 Observable
2 Observer
3 Subscription
4 Operator
5 Subject
6 Scheduler

1 Observable - Source of values (producer function)

The primary type in RxJS. At its highest level, an observable represents a template 
for connecting an Observer, as a consumer, to a producer, via a subscribe action, 
resulting in a subscription.

- has a producer - a wrapper around any data source
Any system or thing that is the source of values that are being pushed out of the 
observable subscription to the consumer. This can be a wide variety of things, 
from a WebSocket to a simple iteration over an Array. The producer is most often 
created during the subscribe action, and therefor "owned" by a subscription in a 1:1 way, 
but that is not always the case. A producer may be shared between many subscriptions, 
if it is created outside of the subscribe action, in which case it is one-to-many, 
resulting in a multicast.
- is unicast
The act of one producer being observed only one consumer. 
An observable is "unicast" when it only connects one producer to one consumer. 
Unicast doesn't necessarily mean "cold".

Stream
A "stream" or "streaming" in the case of observables, refers to the collection of operations, 
as they are processed during a subscription. This is not to be confused with node Streams, 
and the word "stream", on its own, should be used sparingly in documentation and articles. 
Instead, prefer observation chain, operations, or subscription. "Streaming" is less ambiguous, 
and is fine to use given this defined meaning.

Source observable - creation observable
An observable or valid observable input having been converted to an observable, that will 
supply values to another observable, either as the result of an operator or other function 
that creates one observable as another. This source, will be the producer for the resulting 
observable and all of its subscriptions. Sources may generally be any type of observable.

Observable Inputs
An "observable input" (defined as a type here), is any type that can be easily converted to an Observable. 
Observable Inputs may sometimes be referred to as "valid observable sources".

Notifier Observable (Signaling Obv)
An observable that is being used to notify another observable that it needs to perform some action. 
The action should only occur on a next notification, and never on error or complete. Generally, 
notifiers are used with specific operators, such as takeUntil, buffer, or delayWhen. 
A notifier may be passed directly, or it may be returned by a callback.

Higher-order Observable produce Inner Observables
One, of possibly many sources, which are subscribed to automatically within a 
single subscription to another observable. Examples of an "inner source" include the observable 
inputs returned by the mapping function in a mergeMap operator. 
(e.g. source.pipe(mergeMap(value => createInnerSource(value))), 
where createInnerSource returns any valid observable input).














2 Observer - Sink (values come out of Obv)
is an object with 3 callbacks: next(), error() and complete()
The manifestation of a consumer. A type that may have some (or all) handlers for 
each type of notification: next, error, and complete. Having all three types of 
handlers generally gets this to be called an "observer", where if it is missing 
any of the notification handlers, it may be called a "partial observer"

is a consumer - subscribes to an observable
The code that is subscribing to the observable. 
This is whoever is being notified of nexted values, and errors or completions.

3 Subscription
connects Observer to an Observable
A contract where a consumer is observing values pushed by a producer. 
The subscription (not to be confused with the Subscription class or type), 
is an ongoing process that amounts to the function of the observable from the 
Consumer's perspective. Subscription starts the moment a subscribe action is initiated, 
even before the subscribe action is finished.


4 Operator (Operator evolution Hladky ngIndia)
A factory function that creates an operator function.
Examples of this in rxjs are functions like map and mergeMap, which are generally passed to pipe. 
The result of calling many operators, and passing their resulting operator functions into pipe 
on an observable source will be another observable, and will generally not result in subscription.

Operator Function: (obv) => obv.next(v => fn(v))
                   const double = (x) => 2*x // double is the operator function
                   from([1,2,3]).pipe(map(double)) 

map: takes a project function: (value, index) => newValue)
filter: takes a predicate function: (value, index) => boolean
take: takes a simple number value
takeWhile: takes a predicate function:  (value: T, index: number) => boolean
scan: takes a reducer function and a seed value: reduce( (acc, value, index) => newAcc, seed?: any) 
reduce: takes a reducer function and a seed value: reduce( (acc, value, index) => newAcc, seed?: any) 
min: takes a comparer function: (x: T, y: T) => number 
max: takes a comparer function: (x: T, y: T) => number 

A function that takes an observable, and maps it to a new observable. Nothing more, nothing less. 
Operator functions are created by operators. 
If you were to call an rxjs operator like map and put the return value in a variable, 
the returned value would be an operator function.

Operation
An action taken while handling a notification, as set up by an operator and/or operator function. In RxJS, a developer can chain several operator functions together by calling operators and passing the created operator functions to the pipe method of Observable, which results in a new observable. During subscription to that observable, operations are performed in an order dictated by the observation chain.


5 Subject
- is an Observer and an Observable, a producer and a consumer
A Subject is a special type of Observable that allows values to be multicasted to many Observers. 
Subjects are like EventEmitters.
- is multicast by managing a list of observers
The act of one producer being observed by many consumers.

6 Scheduler




