jsjs, parameters vs arguments 
css, class selector vs id selector vs element selector specificity 
js, scope in programming is the trange in which an item , functions and variables have different rules that define their scope 
js, function hoisting 
js, closure is a combination of a fn object and a scope (set of variable bindings) in which the fn's variables are resolved 
js, lexical soping is fn execution using the varive scope tha was in effect when it was defined 
js, variable scope is a region o a programm scoped code in which a variable is defined,global, local, nested scope 
js, scope chain is a list or a chain objects that defines the variables thare in scope for the code 
js, variable resolution is the process by which js looks up the value of a variable x by traversing the scope chain, if x is not found a reference error 
js parameter is local to fn 
js, fn properties: arguments[], callee, caller, constructor, length, prototype 
js, how to call an anonymous fn : arguments.callee 
js, what does constructor.prototype do 
js, Object.getPrototypeOf(obj) 
js, myfunc.length is the number of parameters in the fn declaration
js, arguments.length, is the number of passed arguments

js, event bubbling (target to root, phase 3), event capturing (root to target, phase 1),reaching target (phase 2) 
js, create object methods: {}, new Object, Object.create 
js, inherited properties come from prototype, own properties are defined by object 
js, check own properties -
js, check for own properties: for (var prop in obj) if (typeof obj[prop] !== 'function') { console.log(prop) } 
js, add or delete property on object: delete obj.prop or obj.prop = 2 
js, var string = JSON.stringyfy(obj), var obj = JSON.parse(jsonstring) 
js, get or set function to create a property on an object: { get area: function() {} set area(a) {} }
angular2, databinding: string interpolation {{}} property binding [] event binding () two-way binding ([]])
property binding class to view
event binding view to class
angular2, string interpolation class to view
local reference variable in template: #variable 
angular2, local template variable not accessible in class 
angular2, @ViewChild make template variable in class with decorator @ViewChild 
angular2, @ContentChild make ngContent available in class 
angular2, combine #ViewChild or #ContentChild with correspondign Component Lifecycle hooks to get access to the data 
angular 2 does property binding, which binding to a dom property 
angular 2 html attribut value may contain the inital value but change are made and watched on dom property value 
angular2, ngModel requires FormsModule, is only possible in form tag 
angular2, Number.isFinite checks for null undefined and NaN 
angular2, css class binding like dom property binding: [ngClass]="{error: isInvalid(baseAmount)}" 
angular2, tag on html, element in dom 
angular2, attribute on html, property on dom 
angular2, ngClass ngModel are attribute directives it affects the value of an attribut of an element
angular2, *ngFor *ngIf are structural directives it affects the structure of an element
angular2, 3 ways to bind to css: [class.error], [ngClass]="{error, warning, info}", [style.backgroundColor]="blue" 
angular2,custom binding with 2way binding: [(ngModel)]="selected", [selected] + @Ouput onSelected = new 'EventEmitter()' 
angular 2, event binding style: '(setSelected)'= "onSelected($event)" or '(setSelected)'="targetCurrency = $event" 
angular2, built-in pipes: number, currency, date, lowercase, uppercase, json, async (ng doc AsyncPipe) 
js, prototype chain - when a key lookup on an object fails, the lookup is delegated to that object's prototype 
js, instance prototype - __proto__ , dunderbar double underbar 
funtion prototype - protoype , is just a plain object which can be replaced with another object 
js, Object's prototype is null 
js, Delegations are created by Object.create() or new 
js, Delegate Objects also delegate - a prototype chain 
js, for method calls, 'this' is bound to the left part of the . dot 
js, 'Object.keys([1,2])' -,1 // not 1,2 
js, lexical environment - In order to enable lexical scoping, functions remember the scope '(=environment)' they were defined in 
js, axel rauschmayer, javascript expert 2ality.com 