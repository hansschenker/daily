spa,		 without a framework, curran kelleher
angular, 	html compiler in the browser (jit) or not in the browser (aot)  
a monad, 	captures a side effect (Try Monad captures possible error, Option Monad captures possible options, MayBe Monad capture the effect of a value or null, ... )  
a functor, 	is monad which implements the map operator  
observable, 	higher order functions over push based collections  
iterable, 	higher order functions over pull based collections  
an iterable, 	is a stream, you can not index into a stream, you can get only the next value  
		sample for iterable, stream of random numbers  
		for a stream there does not exist a whole collection, it is only the next value available, when received it is gone  
		the iterable interface whether push based or pull based does give you just the the next value (focus on the present moment)  
		you can apply higher order functions on an iterable collection and you get back an iterable collection again (no mutation)  
		streams are everywhere, the mouse position (only one present position), stream of stock price (price at a certain point in time)  
		observable streams (push based iterables) are the core of rx  
observer,	is just 3 callback functions  
an observable,  is the stream to which you can subscribe (listen to)  
linear algebra, is function composition (erik meijer)  
		programming against an interface, is the dealing with the interface not the content (interface = abstract data type?)  
category theory,is design patterns for mathematicians 
a monad,	is a special case in category theory , the monad capture a special side effect (try, option, maybe monad, ...) 
		functional programming with monads makes side effects visible in the type signature 
composition,    can only bo done with pure functions, if there are side effects composition is not possible
monet.js	functional library for javascript
zod		typescript validation library
functional-toolkit,             scott wlaschin, functional concepts explainded, https://fsharpforfunandprofit.com/fptoolkit/
bartosz milewski,       functional expert
scott wlaschinm,        functional expert
