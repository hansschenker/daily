hans-learnings.txt,     file
hans-learn,       	udemy projects ,c:\Users\HS\Web\frontend\css\animations\ahmed-sadek-udemy-100-projects\udemy-projects 
hans-learning,         	C:\Users\HS\Downloads\Learning 
hans-learn,       	D:\_downloads\_fe\_ui-design\ui-design-rules-and-practices 
  zone.js, ngZone, Jiha 
  Javscript, scope , context, closure, single threaded, no type, dynamic, single threaded - all the way 
hans-learn,       	railway programming scott wlaschin, fp fns are things, composition, types, composition is type checked, fn is single arg 
hans-learn,        	fp haskell , type classes are like interfaces, type big first letter, fn application right associative, fn in curried format by default  
simple rxjs store, josh moroni, using in react,  
erik meijer lecture 4, guarded conditions, pattern matching - case analysis on values 
erik meijer lecture 4, lazy evaluation 
typescript masterclass, typing map and reduce, both are generic functions, can be use with numbers, strings, arrays, objects 

 	functional-javascript,     functor, monad, D:\_downloads\_fe\_js\Functional-Javascript\Functional-Javascript-for-Web-Apps-Michael-Rosata-Packtpub 
 	typescript masterclass,    educative.io 

 	Monads are a kind of abstract data type constructor that encapsulate program logic
 	When we use an observable sequence, we compose functions onto the abstract data type (the IObservable<T>) to create a query" 
 	
	The use of monads to define control flows is particularly useful when dealing with 
	typically troublesome areas of programming such as IO, concurrency and exceptions 

 	a sequence is an enumerated collection of objects in which repetitions are allowed and order matters 
 	A sequence can also be considered as a set where each element has a special form. 
	For example a sequence A, B, C, B, ... can be represented as a set { {1,{A}}, {2,{B}}, {3,{C}}, {4,{B}}, ... }

 	monads as mappings (or morphisms) between categories or as a design pattern to control state and data flow 
 	pure functional programmers use monads to express things we can't express with pure functions such as: 
	state mutations, I/O, error handling, reading input from the user 

 	The IO monad, allows you to thread together a sequence of side effects, 
	so that they can be run in a sequential, predictable, manner 

 	The Observable monad, has built-in logic that allows you to thread together 
	a sequence of asynchronous computations as if you we're mapping regular synchronous functions 

 	io monad abstract interface with the difference that instead of wrapping a value a, it wraps a side effect function
	
	Observable monad not only allows you to perform regular IO as I did previously, 
	but also asynchronous IO, as it makes the notion of time a first-class citizen 

	In a pure FRP observable chain, all of the side effects should be propagated downstream to the subscribers 

 	Observable is just a specialized form of IO - the AsyncIO monad ?- with a whole arsenal of timer and async operators built-in to it. 
	 rxjs observable haskell definition - Observable a = S (IO a) deriving (Functor , Applicative, Monad )

