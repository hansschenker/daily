calculate delta mouse moves for drag and drop
---------------------------------------------

const dragBG$ = mousedown$
    .switchMapTo(mousemove$
        .pairwise()
        .map(([[x1], [x2]]) => x2 - x1)
        .takeUntil(mouseup$)
    )
    .scan((x, y) => x + y)
    .do((x) => {
        chart.transform({ x })
    })


ProgressService
------------------------------------------------------------------------------------------------------------
The service should track 
- how many "things" are currently loading. 
- isLoading() method that returns an Observable<boolean> to indicate if anything is loading at all.

possible solution
................

enum Action {
  Added,
  Removed,
  Empty,
  Undefined
}

export class ProgressService {

  constructor() { }

  progress$: Observable<number> = EMPTY; // value > 0 when something is loading
  // track actions
  actionState: BehaviorSubject<Action> = new BehaviorSubject<any>(Action.Undefined);
  actionChanges: Array<Observable<boolean>> = [];

  // acs ActionStream
  addActionStream(acs: Observable<boolean>) {
    // increment this.progress, when acs emits true
    // decrease this.progress, when acs emits false
    // nice to have: ignore if acs's first emitted value is false
    this.actionChanges.push(acs);

    this.actionState.next(Action.Added);
  }

  removeActionStream(acs: Observable<boolean>) {
    // stop listening to acs
    // clean up: decrease this.progress, if acs last emitted true
    this.actionChanges = this.actionChanges.filter(i => i !== acs);
    this.actionState.next(Action.Removed);
  }

  isLoading(): Observable<boolean> {
    // return this.progress.pipe(
    //   map(val => val !== 0)
    // );
    return this.actionState.pipe(
      switchMap(() => {
        return combineLatest(this.actionChanges);
      }),
      map(v => {
        return v.some(loading => loading);
      })
    );
  }
}

possible solution 2
....................

export class ProgressService {

  constructor() { }

  progress: Observable<number> = EMPTY; // value > 0 when something is loading

  actionState: BehaviorSubject<Array<Observable<boolean>>> = new BehaviorSubject<Array<Observable<boolean>>>([]);

  addActionStream(acs: Observable<boolean>) {
    // increment this.progress, when acs emits true
    // decrease this.progress, when acs emits false
    // nice to have: ignore if acs's first emitted value is false
    this.actionState.next([...this.actionState.getValue(), acs]);
  }

  removeActionStream(acs: Observable<boolean>) {
    // stop listening to acs
    // clean up: decrease this.progress, if acs last emitted true
    const removed = this.actionState.getValue().filter(a => a !== acs);
    this.actionState.next(removed);
  }

  isLoading(): Observable<boolean> {
    // return this.progress.pipe(
    //   map(val => val !== 0)
    // );
    return this.actionState.pipe(
      switchMap(acs => {
        return combineLatest(acs);
      }),
      map(v => {
        return v.some(loading => loading);
      })
    );
  }
}

startWithTimeout<T, 
---------------------------------------------------------------------------------
import { concat, OperatorFunction, race, SchedulerLike, timer } from "rxjs";
import { mapTo, publish } from "rxjs/operators";

function startWithTimeout<T, S = T>(
  value: S,
  duration: number | Date,
  scheduler?: SchedulerLike
): OperatorFunction<T, S | T> {
  return (source) =>
    source.pipe(
      publish((published) =>
        race(
          published,
          concat(timer(duration, scheduler).pipe(mapTo(value)), published)
        )
      )
    );
}

multicast and publish to implement local sharing of a source observable
---------------------------------------------------------------------------------------------------------
hat means that multicast (and publish) can be used to 
- easily implement the local sharing of a source observable.


named observer function
-----------------------
The examples in this article use the following utility function to create named observers:

function observer(name: string) {
  return {
    next: (value: number) => console.log(`observer ${name}: ${value}`),
    complete: () => console.log(`observer ${name}: complete`)
  };
}

                                           factoryFunction
randomValue observable factory with defer(() => {  ... random number }) creates random number when subscribed to
---------------------------------------------------------------------------------------------------
import { defer, Observable, of, Subject } from "rxjs";

-------------------------------------------------------------------
const source = defer(() => of(Math.floor(Math.random() * 100)));
------------------------------------------------------------------

const subject = new Subject<number>();
subject.subscribe(observer("a"));
subject.subscribe(observer("b"));
source.subscribe(subject);


The examples in this article use the following utility function to create named observers:

function observer(name: string) {
  return {
    next: (value: number) => console.log(`observer ${name}: ${value}`),
    complete: () => console.log(`observer ${name}: complete`)
  };
}

The source in the example is cold. 

Each time an observer subscribes to the source, the factory function passed 
to defer will create an observable that emits a random number and then completes.

To multicast the source, the observers are subscribed to the subject, and the subject is then subscribed to the source. 
The source will see only one subscription, will produce only one next notification — containing the random number — 
and will produce only one complete notification. The subject will send those notifications to its observers and the output will look something like this:

observer a: 42
observer b: 42
observer a: complete
observer b: complete

basic mental model for RxJS multicasting: 
-------------------------------------------------
- a source observable; 
- a subject subscribed to the source; 
- and multiple observers subscribed to the subject.

RxJS includes a multicast operator that can be applied to an observable to make it hot. 
The operator encapsulates the infrastructure that’s involved when a subject is used to multicast an observable.


Specialised subjects
----------------------------------------------------
The publish operator has several variants and they all wrap multicast in a similar manner, 
passing subjects rather than factory functions. However, they pass different kinds of subjects.

The specialised subjects that the publish variants use include:

the BehaviorSubject;
---------------------
const delayed = timer(1).pipe(switchMapTo(source));

const p = delayed.pipe(publishBehavior(-1));
p.subscribe(observer("a"));
p.connect();

p.subscribe(observer("b"));
setTimeout(() => p.subscribe(observer("c")), 10);

The example’s output will be something like this:

observer a: -1
observer b: -1

observer a: 42
observer b: 42

observer a: 54
observer b: 54

observer a: complete

observer b: complete

observer c: complete

a subscribes before the connect call, so it receives a next notification with subject’s initial value, 
both of the next notifications from the source and the complete notification;

b subscribes after the connect call, but before the subject receives the source’s first next notification, 

so it receives a next notification with subject’s initial value, both of the next notifications from the source and the complete notification;

c subscribes after the source observable has completed, so it receives only acomplete notification

the ReplaySubject; and
----------------------
Instead of passing a Subject to multicast, publishReplay passes a ReplaySubject. As its name suggests, 
a ReplaySubject will replay the specified number of next notifications whenever an observer subscribes.

const p = source.pipe(publishReplay(1));
p.subscribe(observer("a"));
p.connect();

p.subscribe(observer("b"));
setTimeout(() => p.subscribe(observer("c")), 10);

Using publishReplay, the example’s output will be something like this:

observer a: 42
observer b: 42
observer a: 54
observer b: 54
observer a: complete
observer b: complete
observer c: 54
observer c: complete
The notifications received by the observables can be summarised as follows:

a subscribes before the connect call, at which stage the subject has received no next notifications, 
so a receives both of the next notifications from the source and the complete notification;

b subscribes after the connect call, at which stage the subject has received the first next notification from the source, 
so b receives the replayed next notification, the source’s second next notification and the complete notification;

c subscribes after the source observable has completed, so it receives a replayed next notification and acomplete notification.
Looking at the behaviour of observable c, it’s clear that — unlike the publish operator — the publishReplay operator is suited
 for use with the refCount operator, as observers subscribing after the source completes will receive the replayed next notifications

the AsyncSubject.
------------------
Instead of passing a Subject to multicast, publishLast passes an AsyncSubject. 
The AsyncSubject is the most unusual of the specialised subjects. It does not emit a next notification until it completes, 
at which time it emits the last next notification it received from the source observable — if it has received one — and a complete notification.

const p = source.pipe(publishLast());
p.subscribe(observer("a"));
p.connect();

p.subscribe(observer("b"));

setTimeout(() => p.subscribe(observer("c")), 10);

Using publishLast, the example’s output will be something like this:

observer a: 54

observer b: 54

observer a: complete
observer b: complete

observer c: 54
observer c: complete

The notifications received by the observables can be summarised as follows:

- a and b subscribe before the source completes, but receive no notifications until the source has completed, 
  at which time they receive a next notification containing the second random number and a complete notification.

- c subscribes after the source has completed and it, too, receives a next notification 
  containing the second random number and a complete notification.
  Like publishReplay, the publishLast operator is suited for use with the refCount operator, 
  as observers subscribing after the source completes will receive the last next notification

The share operator
----------------------------------------------------------------------------------------------------------------
The share operator is similar to using the publish and refCount operators. 
However, share passes a factory function to multicast, which means that when a subscription is made after the reference count drops to zero, 
a new Subject will be created and subscribed to the source observable.

The use of a factory function makes observables composed using share retry-able: if an error occurs, any subscribers are unsubscribed 
and the reference count drops to zero. If retried, re-subscription will see a new Subject created which will subscribe to the source.
 With observables composed using publish, this will not happen: the Subject will simply re-emit the error notification.

const s = source.pipe(share());
s.subscribe(observer("a"));

s.subscribe(observer("b"));

setTimeout(() => s.subscribe(observer("c")), 10);

Using share, the example’s output will be something like this:

observer a: 42

observer a: 54

observer b: 54

observer a: complete

observer b: complete

observer c: 6
observer c: 9
observer c: complete

The notifications received by the observables can be summarised as follows:

a subscribes and immediately the first next notification, followed by the second next notification and the complete notification;
b receives only the second next notification and the complete notification;
c subscribes after the source observable has completed; a new subject is created and subscribed to the source, 
from which it immediately receives the first next notification, followed by the second next notification and the complete notification.
In the examples we’ve used to look at the publish and share operators, observers a and b are unsubscribed automatically when the source observable completes. 
They would also be unsubscribed automatically if the source were to error. That highlights another difference between the publish and share operators:

if the source observable errors, any future subscriber to the observable returned by publish will receive the error;
however, any future subscriber to the observable returned by share will effect a new subscription to the source, as the error 
will have automatically unsubscribed any subscribers, dropping the reference count to zero.
And that’s it; we’re at the end. We’ve looked at six operators, but they are all implemented in a similar manner and 
they all fit the same basic mental model: a source observable; a subject subscribed to the source; and multiple observers subscribed to the subject.

Ngrx Component-Store tapResponse
--------------------------------------------------------------------------------------
import { EMPTY, Observable } from 'rxjs';

import { catchError, tap } from 'rxjs/operators';

/**
 * Handles the response in ComponentStore effects in a safe way, without
 * additional boilerplate.
 * It enforces that the error case is handled and that the effect would still be
 * running should an error occur.
 *
 * Takes an optional third argument for a `complete` callback.
 *
 * ```typescript
 * readonly dismissedAlerts = this.effect<Alert>(alert$ => {
 *  return alert$.pipe(
 *      concatMap(
 *          (alert) => this.alertsService.dismissAlert(alert).pipe(
 *              tapResponse(
 *                 (dismissedAlert) => this.alertDismissed(dismissedAlert),
 *                 (error) => this.logError(error),
 *              ))));
 *   });
 * ```
 */
export function tapResponse<T>(
  nextFn: (next: T) => void,
  errorFn: (error: unknown) => void,
  completeFn?: () => void
): (source: Observable<T>) => Observable<T> {
  return (source) =>
    source.pipe(
      tap({
        next: nextFn,
        error: errorFn,
        complete: completeFn,
      }),
      catchError(() => EMPTY)
    );
}
-------------------------------------------------------------------------------------------------

ngrx component-store - debounce-sync
-------------------------------------------------------------------------------------------
/**
 * @license MIT License
 *
 * Copyright (c) 2017-2020 Nicholas Jamieson and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import {
  asapScheduler,
  MonoTypeOperatorFunction,
  Observable,
  Subscription,
} from 'rxjs';

export function debounceSync<T>(): MonoTypeOperatorFunction<T> {
  return (source) =>
    new Observable<T>((observer) => {
      let actionSubscription: Subscription | undefined;
      let actionValue: T | undefined;
      const rootSubscription = new Subscription();
      rootSubscription.add(
        source.subscribe({
          complete: () => {
            if (actionSubscription) {
              observer.next(actionValue);
            }
            observer.complete();
          },
          error: (error) => {
            observer.error(error);
          },
          next: (value) => {
            actionValue = value;
            if (!actionSubscription) {
              actionSubscription = asapScheduler.schedule(() => {
                observer.next(actionValue);
                actionSubscription = undefined;
              });
              rootSubscription.add(actionSubscription);
            }
          },
        })
      );
      return rootSubscription;
    });
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

ngrx component store
--------------------------------------------------------------------------------------------------------------------------------------------------------------------


export interface SelectConfig {
  debounce?: boolean;
}

export const INITIAL_STATE_TOKEN = new InjectionToken(
  '@ngrx/component-store Initial State'
);

export type SelectorResults<Selectors extends Observable<unknown>[]> = {
  [Key in keyof Selectors]: Selectors[Key] extends Observable<infer U>
    ? U
    : never;
};

export type Projector<Selectors extends Observable<unknown>[], Result> = (
  ...args: SelectorResults<Selectors>
) => Result;
--------------------------------------------------------------
@Injectable()
export class ComponentStore<T extends object> implements OnDestroy {
  // Should be used only in ngOnDestroy.
  private readonly destroySubject$ = new ReplaySubject<void>(1);
  // Exposed to any extending Store to be used for the teardown.
  readonly destroy$ = this.destroySubject$.asObservable();

  private readonly stateSubject$ = new ReplaySubject<T>(1);
  private isInitialized = false;
  private notInitializedErrorMessage =
    `${this.constructor.name} has not been initialized yet. ` +
    `Please make sure it is initialized before updating/getting.`;
  // Needs to be after destroy$ is declared because it's used in select.
  readonly state$: Observable<T> = this.select((s) => s);

  constructor(@Optional() @Inject(INITIAL_STATE_TOKEN) defaultState?: T) {
    // State can be initialized either through constructor or setState.
    if (defaultState) {
      this.initState(defaultState);
    }
  }

  /** Completes all relevant Observable streams. */
  ngOnDestroy() {
    this.stateSubject$.complete();
    this.destroySubject$.next();
  }

-------------------------------------------------------------------------------------------------  
  updater<
    // Allow to force-provide the type
    ProvidedType = void,
    // This type is derived from the `value` property, defaulting to void if it's missing
    OriginType = ProvidedType,
    // The Value type is assigned from the Origin
    ValueType = OriginType,
    // Return either an empty callback or a function requiring specific types as inputs
    ReturnType = OriginType extends void
      ? () => void
      : (observableOrValue: ValueType | Observable<ValueType>) => Subscription
  >(updaterFn: (state: T, value: OriginType) => T): ReturnType {
    return (((
      observableOrValue?: OriginType | Observable<OriginType>
    ): Subscription => {
      let initializationError: Error | undefined;
      // We can receive either the value or an observable. In case it's a
      // simple value, we'll wrap it with `of` operator to turn it into
      // Observable.
      const observable$ = isObservable(observableOrValue)
        ? observableOrValue
        : of(observableOrValue);
      const subscription = observable$
        .pipe(
          concatMap((value) =>
            this.isInitialized
              ? // Push the value into queueScheduler
                scheduled([value], queueScheduler).pipe(
                  withLatestFrom(this.stateSubject$)
                )
              : // If state was not initialized, we'll throw an error.
                throwError(new Error(this.notInitializedErrorMessage))
          ),
          takeUntil(this.destroy$)
        )
        .subscribe({
          next: ([value, currentState]) => {
            this.stateSubject$.next(updaterFn(currentState, value!));
          },
          error: (error: Error) => {
            initializationError = error;
            this.stateSubject$.error(error);
          },
        });

      if (initializationError) {
        // prettier-ignore
        throw /** @type {!Error} */ (initializationError);
      }
      return subscription;
    }) as unknown) as ReturnType;
  }
---------------------------------- updater ........................................................................................
  /**
   * Initializes state. If it was already initialized then it resets the
   * state.
   */
  private initState(state: T): void {
    scheduled([state], queueScheduler).subscribe((s) => {
      this.isInitialized = true;
      this.stateSubject$.next(s);
    });
  }

  /**
   * Sets the state specific value.
   * @param stateOrUpdaterFn object of the same type as the state or an
   * updaterFn, returning such object.
   */
  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {
    if (typeof stateOrUpdaterFn !== 'function') {
      this.initState(stateOrUpdaterFn);
    } else {
      this.updater(stateOrUpdaterFn as (state: T) => T)();
    }
  }
-------------------------------------------  patch partial state ----------------------------------------------------------------------
  /**
   * Patches the state with provided partial state.
   *
   * @param partialStateOrUpdaterFn a partial state or a partial updater
   * function that accepts the state and returns the partial state.
   * @throws Error if the state is not initialized.
   */
  patchState(
    partialStateOrUpdaterFn: Partial<T> | ((state: T) => Partial<T>)
  ): void {
    this.setState((state) => {
      const patchedState =
        typeof partialStateOrUpdaterFn === 'function'
          ? partialStateOrUpdaterFn(state)
          : partialStateOrUpdaterFn;

      return {
        ...state,
        ...patchedState,
      };
    });
  }
---------------------------------------- patch partial state -----------------------------------------------------------------------
  protected get(): T;
  protected get<R>(projector: (s: T) => R): R;
  protected get<R>(projector?: (s: T) => R): R | T {
    if (!this.isInitialized) {
      throw new Error(this.notInitializedErrorMessage);
    }
    let value: R | T;

    this.stateSubject$.pipe(take(1)).subscribe((state) => {
      value = projector ? projector(state) : state;
    });
    return value!;
  }
-----------------------------------------------------------
  /**
   * Creates a selector.
   *
   * @param projector A pure projection function that takes the current state and
   *   returns some new slice/projection of that state.
   * @param config SelectConfig that changes the behavior of selector, including
   *   the debouncing of the values until the state is settled.
   * @return An observable of the projector results.
   */
  select<Result>(
    projector: (s: T) => Result,
    config?: SelectConfig
  ): Observable<Result>;
  select<Selectors extends Observable<unknown>[], Result>(
    ...args: [...selectors: Selectors, projector: Projector<Selectors, Result>]
  ): Observable<Result>;
  select<Selectors extends Observable<unknown>[], Result>(
    ...args: [
      ...selectors: Selectors,
      projector: Projector<Selectors, Result>,
      config: SelectConfig
    ]
  ): Observable<Result>;
  select<
    Selectors extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,
    Result,
    ProjectorFn = (...a: unknown[]) => Result
  >(...args: Selectors): Observable<Result> {
    const { observables, projector, config } = processSelectorArgs<
      Selectors,
      Result
    >(args);

    let observable$: Observable<Result>;
    // If there are no Observables to combine, then we'll just map the value.
    if (observables.length === 0) {
      observable$ = this.stateSubject$.pipe(
        config.debounce ? debounceSync() : (source$) => source$,
        map(projector)
      );
    } else {
      // If there are multiple arguments, then we're aggregating selectors, so we need
      // to take the combineLatest of them before calling the map function.
      observable$ = combineLatest(observables).pipe(
        config.debounce ? debounceSync() : (source$) => source$,
        map((projectorArgs) => projector(...projectorArgs))
      );
    }

    return observable$.pipe(
      distinctUntilChanged(),
      shareReplay({
        refCount: true,
        bufferSize: 1,
      }),
      takeUntil(this.destroy$)
    );
  }
------------------------------------------------------- selector ----------------------------------------------------
  /**
   * Creates an effect.
   *
   * This effect is subscribed to for the life of the @Component.
   * @param generator A function that takes an origin Observable input and
   *     returns an Observable. The Observable that is returned will be
   *     subscribed to for the life of the component.
   * @return A function that, when called, will trigger the origin Observable.
   */
  effect<
    // This type quickly became part of effect 'API'
    ProvidedType = void,
    // The actual origin$ type, which could be unknown, when not specified
    OriginType extends
      | Observable<ProvidedType>
      | unknown = Observable<ProvidedType>,
    // Unwrapped actual type of the origin$ Observable, after default was applied
    ObservableType = OriginType extends Observable<infer A> ? A : never,
    // Return either an empty callback or a function requiring specific types as inputs
    ReturnType = ProvidedType | ObservableType extends void
      ? () => void
      : (
          observableOrValue: ObservableType | Observable<ObservableType>
        ) => Subscription
  >(generator: (origin$: OriginType) => Observable<unknown>): ReturnType {
    const origin$ = new Subject<ObservableType>();
    generator(origin$ as OriginType)
      // tied to the lifecycle 👇 of ComponentStore
      .pipe(takeUntil(this.destroy$))
      .subscribe();

    return (((
      observableOrValue?: ObservableType | Observable<ObservableType>
    ): Subscription => {
      const observable$ = isObservable(observableOrValue)
        ? observableOrValue
        : of(observableOrValue);
      return observable$.pipe(takeUntil(this.destroy$)).subscribe((value) => {
        // any new 👇 value is pushed into a stream
        origin$.next(value);
      });
    }) as unknown) as ReturnType;
  }
}
-------------------------------------------------------------------------------------------------------

function processSelectorArgs<
  Selectors extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,
  Result,
  ProjectorFn = (...a: unknown[]) => Result
>(
  args: Selectors
): {
  observables: Observable<unknown>[];
  projector: ProjectorFn;
  config: Required<SelectConfig>;
} {
  const selectorArgs = Array.from(args);
  // Assign default values.
  let config: Required<SelectConfig> = { debounce: false };
  let projector: ProjectorFn;
  // Last argument is either projector or config
  const projectorOrConfig = selectorArgs.pop() as ProjectorFn | SelectConfig;

  if (typeof projectorOrConfig !== 'function') {
    // We got the config as the last argument, replace any default values with it.
    config = { ...config, ...projectorOrConfig };
    // Pop the next args, which would be the projector fn.
    projector = selectorArgs.pop() as ProjectorFn;
  } else {
    projector = projectorOrConfig;
  }
  // The Observables to combine, if there are any.
  const observables = selectorArgs as Observable<unknown>[];
  return {
    observables,
    projector,
    config,
  };
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

end ngrx component store
--------------------------------------------------------------------------------------------------------------------------------------------------------------------


error handling operator
.........................................................................................
/**
 * Handle Http operation that failed.
 * Let the app continue.
 * @param operation - name of the operation that failed
 * @param result - optional value to return as the observable result
 */
private handleError<T>(operation = 'operation', result?: T) {
  return (error: any): Observable<T> => {

    // TODO: send the error to remote logging infrastructure
    console.error(error); // log to console instead

    // TODO: better job of transforming error for user consumption
    this.log(`${operation} failed: ${error.message}`);

    // Let the app keep running by returning an empty result.
    return of(result as T);
  };
}
getHeroes(): Observable<Hero[]> {
  return this.http.get<Hero[]>(this.heroesUrl)
    .pipe(
      catchError(this.handleError<Hero[]>('getHeroes', []))
    );
}

using tap operator
------------------------------------------------------------
/** GET heroes from the server */
getHeroes(): Observable<Hero[]> {
  return this.http.get<Hero[]>(this.heroesUrl)
    .pipe(
      tap(_ => this.log('fetched heroes')),
      catchError(this.handleError<Hero[]>('getHeroes', []))
    );
}

/** GET hero by id. Will 404 if id not found */
getHero(id: number): Observable<Hero> {
  const url = `${this.heroesUrl}/${id}`;
  return this.http.get<Hero>(url).pipe(
    tap(_ => this.log(`fetched hero id=${id}`)),
    catchError(this.handleError<Hero>(`getHero id=${id}`))
  );
}

import { RxHR } from '@akanass/rx-http-request';
import { catchError, map, tap } from 'rxjs/operators';
import { of } from 'rxjs/observable/of';

function fetch() {
    const result$ = RxHR.get('https://github.bmc.com/api/v3/user/orgs');

    return result$.pipe(
        tap(response => console.info('STATUS CODE:', response.response.statusCode)),
        catchError(err => of('from error')),
        map(response => of('from map')),
    );
}

fetch()
    .subscribe(
        data => console.log(data),
        err => console.error(err),
    );

// OUTPUT:
// STATUS CODE: 401
// ScalarObservable { _isScalar: true, value: 'from map', scheduler: null }
.....................................................................................................
