hans-learn;   	angular-cli; git; typescript; vscode; webpack  
hans-learnings.txt,     file
hans-learn,       	udemy projects ,c:\Users\HS\Web\frontend\css\animations\ahmed-sadek-udemy-100-projects\udemy-projects 
hans-learning,         	C:\Users\HS\Downloads\Learning 
hans-learn,       	D:\_downloads\_fe\_ui-design\ui-design-rules-and-practices 
hans-learn,             zone.js, ngZone, Jiha 
hans-learn,             Javscript, scope , context, closure, single threaded, no type, dynamic, single threaded - all the way 
hans-learn,       	railway programming scott wlaschin, fp fns are things, composition, types, composition is type checked, fn is single arg 
hans-learn,        	fp haskell , type classes are like interfaces, type big first letter, fn application right associative, fn in curried format by default  
hans-learn,        	simple rxjs store, josh moroni, using in react,  
hans-learn,        	erik meijer lecture 4, guarded conditions, pattern matching - case analysis on values 
hans-learn,        	erik meijer lecture 4, lazy evaluation 
hans-learn,        	typescript masterclass, typing map and reduce, both are generic functions, can be use with numbers, strings, arrays, objects 
 hans-learn,           	functional-javascript,     functor, monad, D:\_downloads\_fe\_js\Functional-Javascript\Functional-Javascript-for-Web-Apps-Michael-Rosata-Packtpub 
 hans-learn,           	typescript masterclass,    educative.io 
 hans-learn,           	Monads are a kind of abstract data type constructor that encapsulate program logic instead of data in the domain model 
 hans-learn,           	rxjs observable  "When we use an observable sequence, we compose functions onto the abstract data type (the IObservable<T>) to create a query" 
 hans-learn,           	rxjs observable The use of monads to define control flows is particularly useful when dealing with typically troublesome areas of programming such as IO, concurrency and exceptions 
 hans-learn,           	sequence a sequence is an enumerated collection of objects in which repetitions are allowed and order matters 
 hans-learn,           	A sequence can also be considered as a set where each element has a special form. For example a sequence A, B, C, B, ... can be represented as a set { {1,{A}}, {2,{B}}, {3,{C}}, {4,{B}}, ... }
 hans-learn,           	monads as mappings (or morphisms) between categories or as a design pattern to control state and data flow 
 hans-learn,           	pure functional programmers use monads to express things we can't express with pure functions such as: state mutations, I/O, error handling, reading input from the user 
 hans-learn,           	The IO monad, allows you to thread together a sequence of side effects, so that they can be run in a sequential, predictable, manner 
 hans-learn,           	The Observable monad, has built-in logic that allows you to thread together a sequence of asynchronous computations as if you we're mapping regular synchronous functions 
 hans-learn,           	io monad abstract interface with the difference that instead of wrapping a value a, it wraps a side effect function () -
 hans-learn,           	rxjs observable This monad not only allows you to perform regular IO as I did previously, but also asynchronous IO, as it makes the notion of time a first-class citizen 
 hans-learn,           	rxjs In a pure FRP observable chain, all of the side effects should be propagated downstream to the subscribers 
 hans-learn,           	Observable is just a specialized form of IO - the AsyncIO monad ?- with a whole arsenal of timer and async operators built-in to it. 
 hans-learn,           	rxjs observable haskell definition newtype Observable a = S (IO a) deriving (Functor , Applicative, Monad 
hans-learn,            	D:\_downloads\_pers\Learning\Efficient_Learning
hans-learn,          	geburt des christentums, https://www.youtube.com/playlist?list=PLlQWnS27jXh87WC27k3yhxAigE_0jBDi_
hans-learn,      	jesus und der islam, https://www.youtube.com/playlist?list=PLlQWnS27jXh9iEjyGkEiboXNVqsP2JsA5 
hans-learn,              html 06, D:\_downloads\_fe\_html\Html-and-Css\06 - Grouping Things 
hans-learn,        	react-next, D:\_downloads\_fe\_js\React\React-NextJs 
hans-learn,             axios 
hans-learn,             semantic-ui 
hans-learn,           	rxjs fundamentals, ultimatecourses, https://app.ultimatecourses.com/course/rxjs-basics/deliver-values-asynchronously-with-observables 
conemu-cmd,        alias ecdhl= echo  hans-learn,           $* >>daily.txt
hans-learn,             titian dragomir , workshop, 1h32min 
file-learn,             hans-learnings.txt,
hans-learn,       	https://unicorn-utterances.com/posts/angular-templates-start-to-source, Template Input Variable Scope 
angular-interview,      hans-learn, https://courses.decodedfrontend.io/courses/take/angular-interview-hacking/lessons/27678992-angular-pipes-what-why-when 
hans-learn,         	angular templates,   angular essential, angular-concepts-templates.txt 
hans-learn,         	pluralsight free learning week start 10.10 with giantutti 
hans-learn,            	reactive-native, D:\_downloads\_fe\_js\React-Native\create-react-native-whatsapp-clone-videos
hans-learn,     	angular, https://courses.decodedfrontend.io/courses/take/angular-interview-hacking/lessons/27678992-angular-pipes-what-why-when 
hans-learn,             haskell-101, https://youtu.be/cTN1Qar4HSw?t=2948 
hans-learn,             https://www.udemy.com/course/sight-reading
hans-learn,             haskell countdown, https://youtu.be/CiXDS3bBBUo?t=1167 
hans-learn,       	haskell, haskell-101 exercises, https://youtu.be/cTN1Qar4HSw?t=2948 
file,      hans-learn-links.txt 
