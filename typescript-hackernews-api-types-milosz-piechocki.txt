Typescript Types for Hacker News Api
----------------------------------------------------------------------------------
https://hn.algolia.com/api/v1/search 
sample code: https://stackblitz.com/edit/usereducer-typescript?file=index.tsx



function useReducer<R extends Reducer<any, any>>(
 reducer: R,
 initialState: ReducerState<R>
): [ReducerState<R>, Dispatch<ReducerAction<R>>];

type Reducer<S, A> = (prevState: S, action: A) => S;

type State = {
 data?: HNResponse;
 isLoading: boolean;
 error?: string;
}

type HNResponse = {
 hits: {
 title: string;
 objectID: string;
 url: string;
 }[]
};

function display(action: Action) {

 if (action.type === 'success') {
 console.log(action.results);
 }
}

function reducer(state: State, action: Action): State {
 switch (action.type) {
 case 'request':
 return { isLoading: true };
 case 'success':
 return { isLoading: false, data: action.results };
 case 'failure':
 return { isLoading: false, error: action.error };
 }
}

const [{
 data,
 isLoading,
 error
 }, dispatch] = useReducer(reducer, { isLoading: false });

 useEffect(() => {
 let ignore = false;

 dispatch({ type: 'request' });
 axios(`https://hn.algolia.com/api/v1/search?query=${query}`).then(
 (results) => { if (!ignore) dispatch({ type: 'success', results: results.data }); },
 (error) => dispatch({ type: 'failure', error }),
 )

 return () => { ignore = true; }
 }, [query]);

 return (
 <div>
 <input value="{query}" onchange="{e" ==""> setQuery(e.target.value)} />
 {isLoading && <span>Loading...</span>}
 {error && <span>Error: {error}</span>}
 <ul>
 {data && data.hits && data.hits.map(item => (
 <li key="{item.objectID}">
 <a href="{item.url}">{item.title}</a>
 </li>
 ))}
 </ul>
 </div>

type State =
 | { status: 'empty' }
 | { status: 'loading' }
 | { status: 'error', error: string }
 | { status: 'success', data: HNResponse 
