mo 16:26 24.06.2024
---------------------------------------------------------------------------------
category theory,        eugenia cheng
--------------------------------
general theory of mathematical structures
Mathematical structures are systems consisting of 
- sets equipped 
  - with additional properties 
  - or operations that adhere to specific rules and axioms. 
They form the foundation of various branches of mathematics by providing a formal framework to study and understand complex concepts.


math in music		eugenia cheng
logic			book , eugenia cheng, lesen.amazon.de
math is real		book, eugenia cheng, lesen.amazon.de
power of abstraction	book, eugenia cheng, lesen.amazo.de
functional programming  monad, eugenia cheng, 
music theory		https://www.youtube.com/playlist?list=PLfM8ivjJ-rKUvRNtoZa8aZg66xwGgw5JS	

syntax
-----------------------
Defines Structure: Specifies the grammatical rules
for constructing valid program constructs, such as
keywords, punctuation, and their arrangement (e.g.,
if condition: statement in Python).

Language-Specific: Varies across programming
languages, with each having its own grammar (e.g.,
curly braces { in C++ vs. indentation in Python).

Checked Statically: Enforced by parsers or compilers
during code analysis, detecting errors like missing
semicolons or incorrect keywords before execution.

Finite Rules: Consists of a finite set of rules defined
by a formal grammar, such as Backus-Naur Form
(BNF), to generate valid programs.

Surface-Level: Concerns the external form of code,
focusing on how it is written without regard to its
purpose or effect (e.g., correct parentheses
placement).

Deterministic Parsing: Parsing is deterministic, with
a clear accept/reject outcome based on grammar
rules, leading to syntax errors if violated.

semantics		
-----------
Defines Meaning: 
Describes the behavior or effect of a
program, specifying what computations or
transformations occur when executed (e.g., the if
statement evaluates the condition and executes the
statement if true).

Language-Independent Concepts: 
Represents universal
computational concepts like control flow or data
transformation, though expressed differently across
languages (e.g., conditional execution in any language).

Checked Dynamically or Statically: 
Evaluated during
execution (dynamic semantics, e.g., runtime errors) or
through static analysis (static semantics, e.g., type
checking).

Infinite Behaviors: 
Describes potentially infinite
behaviors, as programs can produce varied outputs or run
indefinitely based on inputs or loops.

Deep-Level: 
Concerns the internal meaning, focusing on
the computation's purpose, such as input-output
mappings or state changes (e.g., what a function
computes).

Complex Interpretation: 
Interpretation may involve non-
determinism or context, such as runtime conditions or
external inputs, leading to semantic errors (e.g., logic
errors).

