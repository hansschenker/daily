imperative
------------

document.querySelector('#title').innerHTML = '<h1>Hello World'</h1>
                      ---------              ---- ----------- ---- 

parameterize dependant parts:
- element
- tag
- text
so you create reusable function

declarative
---------------
function printElementText(elementId:string, tag:string, text: string, style?:string) : void {
  document.querySelector(`#${elementId}`).innerHTML =
    `<#${tag}>${text}</${tag}`;
}

  printElementText('title', 'h1', 'Hello World'
  printElementText('quote', 'span' 'Famous Quote', 'style=`${style};`'

--------------------------------------------------------------------------------------------
luis atenio gisst: https://gist.github.com/luijar/ce6b96f13e31cb153093#file-ch01-magic-run-js
/*
 * Functional Programming in JavaScript
 * Chapter 01
 * Magical -run- function in support of Listing 1.1
 * Author: Luis Atencio
 */

// -run- with two functions 
var run2 = function(f, g) {
    return function(x) {
        return f(g(x));
    };
};

// -run- with three functions
var run3 = function(f, g, h) {
    return function(x) {
          return f(g(h(x))); 
    };
};

// Test this magical function
var add1 = function(x) {return x + 1;};
var mult2 = function(x) {return x * 2;};
var square = function(x) {return x * x;};
var negate = function(x) {return -x;};

var double = run2(add1, add1);
console.log(double(2)); //-> 4

var testRun = run3(negate, square, mult2);
console.log(testRun(2)); //->-16

@gkasperski
gkasperski commented on 8 Aug 2017
--------------------------------------------------------
var run = (...functions) => x => {
    functions.reverse().forEach(func => x = func(x));
    return x;
};
-run- for X functions

@NoahDavidATL
NoahDavidATL commented on 9 Aug 2017
-----------------------------------------------------------
And since run is just an alias for compose, you can also use this:

function compose = ( ...fns ) => fns.reduce( ( f, g ) => ( ...args ) => f( g( ...args ) ) );

Usage: compose(fn3, fn2, fn1);

@mg901
mg901 commented on 30 Aug 2018
---------------------------------------------------------------------------
const compose = (...fns) => x => fns.reduceRight((acc, fn) => fn(acc), x);


const compose = (...fns) => x => fns.reduceRight((acc, fn) => fn(acc), x);

var echoDocument = document.writeln.bind(document);

var h1 = function (text) { 
    return "<h1>" + text + "</h1>"; 
}

var printMessage = compose(echoDocument, h1);
printMessage("Hello World");

---------------------------------------------------------------------------
map lambda function

  [1,2,3,4,5].map(nbr => Math.pow(nbr, 2)

---------------------------------------------------------------------------
book 29
