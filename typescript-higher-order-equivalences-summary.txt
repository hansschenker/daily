Higher Order Type Equivalences - we consider the equality or equivalence of types at different levels
-------------------------------------------------------------------------------------------------

Higher order type equivalences can involve concepts such as 

- type isomorphisms, 
- type embeddings, or 
- type-preserving transformations, 

which capture different aspects of the relationship between types at higher levels



Comparing types at higher levels (like 
Type Theory is a formal framework (reasoning about types and their relationships)

Types are first-order Entities, 
-------------------------------
they can be treated on the same level as objects or values

Hierarchy of Types
-------------------------------
types themselves can have types, leading to a hierarchy of types.
This hierarchy allows for the expression of more complex type relationships 
and enables reasoning about more sophisticated type constructions

Higher Order Type Equivalences:
--------------------------------

1 - T | never & T
-----------------------------------------------------------------------------------------------------------
T: 
T represents a type variable or an arbitrary type.

never: 
The bottom type, often denoted as "never," represents a type that has no values. 
It is the subtype of all types and has no instances. 
Essentially, it signifies a type from which no values can be derived or inhabited.

&: 
The intersection type operator "&" combines multiple types into a new type that contains all the 
values that belong to each of the individual types. 

In other words, a value of an intersection type must satisfy all the types in the intersection.

|: 
The union type operator "|" combines multiple types into a new type that contains all the values 
that belong to at least one of the individual types. 

A value of a union type can be of any of the constituent types.
-------------------------------------------------------------------------------------------------
Constituent Type: 
In type theory, a constituent type refers to the individual components or 
building blocks that make up a composite type. It is used to describe the types that are 
combined or structured to form more complex types. For example, in a tuple type (A, B), A and B 
would be the constituent types of the tuple type. The constituent types are the fundamental types 
that are combined to create more elaborate structures.

Inhabitant Type: 
Inhabitant types refer to types that have values or instances associated with them. 
An inhabitant of a type is a specific value that belongs to that type. In other words, if a type 
has at least one value that can be assigned to it, then it is said to be inhabited. For example, 
the Boolean type may have two inhabitants: true and false. The notion of inhabitants is often used 
to reason about the properties and behavior of types in type theory.

To summarize, while "constituent type" refers to the individual components that form a composite type, 
"inhabitant type" refers to a type that has values associated with it. 
They are distinct concepts within type theory and serve different purposes in understanding 
and analyzing types.
-------------------------------------------------------------------------------------------------




Now, let's analyze "T | never & T" step by step:

never & T: The intersection of never and T would be never itself because never has no instances and 
cannot have any common values with T. 

-> So, "never & T" would be equivalent to never.

T | never: The union of T and never would include all the values that belong to T. 
Since never has no instances, 

-> the union "T | never" is equivalent to T.

-> Therefore, "T | never & T" is equivalent to T, 
   indicating that it is a higher-order type equivalence where the type T is unchanged.

2 - T & never < never
-----------------------------------------------------------------------------------------------------
T & never < never" represents a higher-order type equivalence involving 
the intersection type operator (&), the bottom type (never), and the subtype relationship (<).

T: 
T represents a type variable or an arbitrary type.

never: 
The bottom type, often denoted as "never," represents a type that has no values. 
It is the subtype of all types and has no instances. Essentially, it signifies a type from which 
no values can be derived or inhabited.

&: 
The intersection type operator "&" combines multiple types into a new type that contains all 
the values that belong to each of the individual types. In other words, a value of an intersection type
 must satisfy all the types in the intersection.

<: 
The subtype relationship, denoted by "<", represents a partial ordering between types. If one type 
is a subtype of another, it means that all values of the subtype can be safely used in contexts where 
the supertype is expected.

Now, let's analyze "T & never < never" step by step:

never: 
The type never is a subtype of itself, meaning it satisfies the condition "never < never."

T & never: 
The intersection of T and never would be never itself because never has no instances and 
cannot have any common values with T. 
-> Therefore, "T & never" is equivalent to never.

Therefore, "T & never < never" is always true, 
indicating that the intersection of T and never is a subtype of never. 

This higher-order type equivalence suggests that any type T, when intersected with never, 
will result in the bottom type never itself, which is always a subtype of never.

3 - What does the Higher Order Equivalence "(A & B) & (C | D)  = A & C | A & D | B & C | B & D " mean
----------------------------------------------------------------------------------------------------

A, B, C, and D: A, B, C, and D represent type variables or arbitrary types.

&: 
The intersection type operator "&" combines multiple types into a new type that contains all 
the values that belong to each of the individual types. A value of an intersection type must satisfy 
all the types in the intersection.

|: 
The union type operator "|" combines multiple types into a new type that contains all the values 
that belong to at least one of the individual types. A value of a union type can be of any of the 
constituent types.

Now, let's analyze "(A & B) & (C | D) = A & C | A & D | B & C | B & D" step by step:

(A & B): 
The intersection of types A and B represents the type that contains values satisfying both 
A and B simultaneously. 
-> It ensures that any value of the intersection type satisfies both A and B.

(C | D): 
The union of types C and D represents the type that contains values satisfying either C or D. 
-> It allows values of either C or D to be considered valid.

(A & B) & (C | D): 
The intersection of (A & B) and (C | D) represents the type that contains values 
satisfying both A and B, as well as satisfying either C or D. 
-> It ensures that a value of this intersection type must satisfy both A and B, as well as either C or D.

A & C | A & D | B & C | B & D: 
This expression represents the type that contains values satisfying 
all possible combinations of A, B, C, and D. 
It includes values that satisfy A and C, A and D, B and C, and B and D, respectively. 
-> The union "|" allows any of these combinations to be valid.

Therefore, the higher-order type equivalence "(A & B) & (C | D) = A & C | A & D | B & C | B & D" states 
that the intersection of (A & B) and (C | D) is equivalent to the union of all possible combinations of 
intersections between A, B, C, and D. 
->It provides a way to distribute the intersection type over the union type.

4 - What does the Higher Order Equivalence "keyof (A & B) <-> keyof A | keyof B" mean
-----------------------------------------------------------------------------------------------------------
It expresses a relationship between the key types of two types, A and B, 
and the subtyping relationship between B and A.

Let's break down the components of this equivalence:

keyof A: 
The expression "keyof A" represents the set of keys (or properties) that exist in type A. 
-> It encompasses all possible properties or keys of type A.

keyof B: 
The expression "keyof B" represents the set of keys (or properties) that exist in type B. 
-> It includes all possible properties or keys of type B.

<: The "<:" 
notation represents the subtyping relationship, where one type is a subtype of another. 
If A <: B, it means that type A is a subtype of type B. 
-> This implies that values of type A can be safely assigned to variables of type B.

:> The ":>" 
notation represents the supertype relationship, where one type is a supertype of another. 
If B :> A, it means that type B is a supertype of type A. 
-> This implies that type B encompasses type A, and values of type A can be treated as values of type B.

Now, let's analyze the higher-order type equivalence "keyof A <: keyof B <-> B :> A" step by step:

keyof A <: keyof B: 
This expression states that the set of keys in type A is a subtype of the set of keys in type B. 
-> It implies that all the properties or keys present in A are also present in B, 
   or more precisely, B has at least the same set of keys as A.

<-> The "<->" 
notation signifies bidirectional equivalence. 
It means that the relationship on the left-hand side is equivalent to the relationship on the right-hand side.

B :> A: 
This expression states that type B is a supertype of type A. 
-> It indicates that type B encompasses or includes all the properties or keys of type A. 
   Values of type A can be treated as values of type B.

Therefore, the higher-order type equivalence "keyof A <: keyof B <-> B :> A" can be understood as follows: 
-> The set of keys in type A being a subtype of the set of keys in type B is equivalent 
   to type B being a supertype of type A. 
-> It implies that type B has at least the same set of keys as A, or even more keys, 
   and values of type A can be used where values of type B are expected.

This equivalence highlights the 

- relationship between key types, 
- subtyping, and 
- supertyping, 

allowing for reasoning about the key relationships and type compatibility in type systems.

5 - What does the Higher Order Equivalence "T[Y] <-> S <: T or X :> Y
--------------------------------------------------------------------------------------------------------

The higher-order type equivalence "T[Y] <-> S <: T or X :> Y" 
expresses a relationship between indexed types and subtyping in type theory.

Let's break down the components of this equivalence:

T[Y]: 
T[Y] represents an indexed type where Y is an index or parameter. 
In indexed types, the index can be used to specialize or parameterize the type.

S <: T: 
The notation "S <: T" denotes that type S is a subtype of type T. 
-> This implies that values of type S can be safely assigned to variables of type T.

X :> Y: 
The notation "X :> Y" represents a relationship where X is a supertype of Y. 
-> This means that type X encompasses type Y, and Y is a subtype of X.

Now, let's analyze the higher-order type equivalence "T[Y] <-> S <: T or X :> Y" step by step:

T[Y] <-> S <: T: 
This expression states that the indexed type T[Y] is equivalent to 
the subtyping relationship "S <: T." 
-> It suggests that the indexed type T[Y] shares a connection with the subtyping of S and T.

or: The term "or" here is a logical operator, indicating that the equivalence holds 
if either side of the disjunction is true.

X :> Y: 
This expression states that X is a supertype of Y, meaning that Y is a subtype of X.

Therefore, the higher-order type equivalence "T[Y] <-> S <: T or X :> Y" can be understood as follows: 
The indexed type T[Y] is equivalent to either the subtyping relationship S <: T 
or the supertype relationship X :> Y. 
This equivalence suggests that the behavior of T with an index Y can be captured 
by either being a subtype of T (S <: T) or by Y being a subtype of X (X :> Y).

This equivalence provides a way to reason about the 
- relationship between indexed types and subtyping or supertyping relationships in type systems, 
highlighting the connection between type specialization and subtype relationships.

6 - What does the Higher Order Equivalence "keyof A <:  keyof B  <-> B  :> A" mean
----------------------------------------------------------------------------------------------------------
The higher-order type equivalence "keyof A <: keyof B <-> B :> A" states 
 a relationship between the key types of two types, A and B, and the subtyping relationship between B and A.

Let's break down the components of this equivalence:

keyof A: 
The expression "keyof A" represents the set of keys (or properties) that exist in type A. 
It encompasses all possible properties or keys of type A.

keyof B: 
The expression "keyof B" represents the set of keys (or properties) that exist in type B. 
It includes all possible properties or keys of type B.

<: The "<:" 
notation represents the subtyping relationship, where one type is a subtype of another. 
If A <: B, 
-> it means that type A is a subtype of type B. 
   This implies that values of type A can be safely assigned to variables of type B.

:> The ":>" 
notation represents the supertype relationship, where one type is a supertype of another. 
-> If B :> A, it means that type B is a supertype of type A. 
   This implies that type B encompasses type A, and values of type A can be treated as values of type B.

Now, let's analyze the higher-order type equivalence "keyof A <: keyof B <-> B :> A" step by step:

keyof A <: keyof B: 
This expression states that the set of keys in type A is a subtype of the set of keys in type B. 
-> It implies that all the properties or keys present in A are also present in B, 
   or more precisely, B has at least the same set of keys as A.

<-> The "<->" 
notation signifies bidirectional equivalence. 
-> It means that the relationship on the left-hand side is equivalent 
   to the relationship on the right-hand side.

B :> A: 
This expression states that type B is a supertype of type A. 
It indicates that type B encompasses or includes all the properties or keys of type A. 
Values of type A can be treated as values of type B.

Therefore, the higher-order type equivalence "keyof A <: keyof B <-> B :> A" can be understood as follows: 
- The set of keys in type A being a subtype of the set of keys in type B is equivalent 
  to type B being a supertype of type A. 
-> It implies that type B has at least the same set of keys as A, 
   or even more keys, and values of type A can be used where values of type B are expected.

This equivalence highlights the relationship between key types, subtyping, and supertyping, 
allowing for reasoning about the key relationships and type compatibility in type systems.

