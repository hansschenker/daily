Angular: 	is HTML first -> Template (HTML) is king in Angular - it is the compiler's job to satisfy the needs of the template
		is at the core a fancy Template Engine (a huge Template Function)
		The compiler awakens to template to a living view in the dom.
		
		Angular Template. An HTML (code) snippet that defines how Angular applications work. 
		A template defines a view of that component in a specific way instantly

What Is A Templating Engine Used For?
--------------------------------------
The advantage of template engines is that static templates files can be used within a software application. 
When the template engine is used at runtime, it transforms the template file into a clientable HTML file 
based on the underlying variables. A design for an HTML page can be simplified by doing this.

A template engine is a program which is responsible for compiling a template (that can be written using any one of a number of languages) into HTML. 
The template engine will normally receive data from an external source, which it will inject into the template it’s compiling

Template Engines are tools that help us break HTML code into smaller pieces that we can reuse across multiple HTML files. 
They also give you the power to feed data into variables that help you simplify your code. You can only use template engines 
if you had a way to compile them into HTML


What Is Interpolation Angular?
--------------------------------
On a square bracket, a property is Interpolated when Angular is used as a syntax. You can use it instead of binding to your home. 
A large difference is that a non-string method must be used when setting property values for elements

React: 		is Javascript first: You write Javascript functions which return HTML in form of Components - the power to Javascript!
Does React Use Templating?
React doesn’t use templates.

This means React uses a real, full featured programming language to render views, 
which we see as an advantage over templates for a few reasons: 
- JavaScript is a flexible, 
- powerful programming language with the 
- ability to build abstractions.

angular
---------
- is html first -> template

- angular template outlet (ngTemplateOutlet) -> is like function for the template (you can give it arguments in the context)
  outlet renders to indicated template [outlet]="templateName"
- with @ViewChild we can get reference of template outlet or a component's template
- dom is reflected in angular view hierarchy (immutable structure of view containers)

react
------
- is javascript first -> jsx

- functional components which take props as intput and return html
- component hierarchy is reflected in react virtual dom
