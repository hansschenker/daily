Observable - source, the producer notifying the observer with next, error, complete
---------------------------------------------------------------------------------------------------
Observables are lazy Push collections of multiple values. They fill the missing spot in the following table:

SINGLE			MULTIPLE
Pull	Function	Iterator
Push	Promise		Observable

import { Observable } from 'rxjs';

const observable = new Observable((subscriber) => {
  subscriber.next(1);
  subscriber.next(2);
  subscriber.next(3);
  setTimeout(() => {
    subscriber.next(4);
    subscriber.complete();
  }, 1000);
});

To invoke the Observable and see these values, we need to subscribe to it:
console.log('just before subscribe');
observable.subscribe({
  next(x) {
    console.log('got value ' + x);
  },
  error(err) {
    console.error('something wrong occurred: ' + err);
  },
  complete() {
    console.log('done');
  },
});

Pull versus Push
------------------------------------------
Pull and Push are two different protocols that describe how a data Producer can communicate with a 
data Consumer.

What is Pull? 
---------------------------------------------
In Pull systems, the Consumer determines when it receives data from the data Producer. 
The Producer itself is unaware of when the data will be delivered to the Consumer.

Every JavaScript Function is a Pull system. The function is a Producer of data, and the code that calls 
the function is consuming it by "pulling" out a single return value from its call.

ES2015 introduced generator functions and iterators (function*), another type of Pull system. 
Code that calls iterator.next() is the Consumer, "pulling" out multiple values from the iterator 
(the Producer).

		PRODUCER				CONSUMER
Pull		Passive: produces data when requested.	Active: decides when data is requested.
Push		Active: produces data at its own pace.	Passive: reacts to received data.


What is Push? 
--------------------------------------------------------
In Push systems, the Producer determines when to send data to the Consumer. 
The Consumer is unaware of when it will receive that data.

Promises are the most common type of Push system in JavaScript today. A Promise (the Producer) 
delivers a resolved value to registered callbacks (the Consumers), but unlike functions, it is 
the Promise which is in charge of determining precisely when that value is "pushed" to the callbacks.

RxJS introduces Observables, a new Push system for JavaScript. An Observable is a Producer of 
multiple values, "pushing" them to Observers (Consumers).

A Function is a lazily evaluated computation that synchronously returns a single value on invocation.
A generator is a lazily evaluated computation that synchronously returns zero to (potentially) 
infinite values on iteration.
A Promise is a computation that may (or may not) eventually return a single value.
An Observable is a lazily evaluated computation that can synchronously or asynchronously return zero 
to (potentially) infinite values from the time it's invoked onwards.
For more info about what to use when converting Observables to Promises, please refer to this guide.

Observables as generalizations of functions
------------------------------------------

Observables are like functions with zero arguments, but produce an infinite number of values when not
completed or unsubscribed from.

Functions and Observables are lazy computations
-----------------------------------------------------------
This happens because both functions and Observables are lazy computations. If you don't call 
Subscribing to an Observable is analogous to calling a Function.

Some people claim that Observables are asynchronous. That is not true. 
And this is the same behavior with Observables:
Which proves the subscription of foo was entirely synchronous, just like a function.

Synchronously or Asynchronously
---------------------------------------
Observables are able to deliver values either synchronously or asynchronously.

What is the difference between an Observable and a function? Observables can "return" multiple 
values over time, something which functions cannot. 

- func.call() means "give me one value synchronously"
- observable.subscribe() means "give me any amount of values, either synchronously or asynchronously"

Anatomy of an Observable
-------------------------------------------------------
created: - Observables are created using new Observable or a creation operator, 
called:  - with subscribed to with an Observer, execute to deliver next / error / complete notifications 
           to the Observer, and their execution may be disposed. 

These four aspects are all encoded in an Observable instance, but some 
of these aspects are related to other types, like Observer and Subscription.

Core Observable concerns:
----------------------------------------------------------------
Creating Observables
Subscribing to Observables
Executing the Observable
Disposing Observables
Creating Observables

The Observable constructor takes one argument: the subscribe function.

new
----------------------
Observables can be created with new Observable. 

creation function
------------------------
Most commonly, observables are created using creation 
functions, like of, from, interval, etc.

In the example above, the subscribe function is the most important piece to describe the Observable. 
Let's look at what subscribing means.

Subscribing to Observables

This shows how subscribe calls are not shared among multiple Observers of the same Observable. 
When calling observable.subscribe with an Observer, the function subscribe in new 
Observable(function subscribe(subscriber) {...}) is run for that given subscriber. 

Each call to observable.subscribe triggers its own independent setup for that given subscriber.

Subscribing to an Observable is like calling a function, providing callbacks where the data will 
be delivered to.

This is drastically different to event handler APIs like addEventListener / removeEventListener. 
With observable.subscribe, the given Observer is not registered as a listener in the Observable. 
The Observable does not even maintain a list of attached Observers.

A subscribe call is simply a way to start an "Observable execution" and deliver values or events 
to an Observer of that execution.

Executing Observables
----------------------------------------------------
The code inside new Observable(function subscribe(subscriber) {...}) represents
 an "Observable execution", a lazy computation that only happens for each Observer that subscribes. 
The execution produces multiple values over time, either synchronously or asynchronously.

There are three types of values an Observable Execution can deliver:

"Next" notification: sends a value such as a Number, a String, an Object, etc.
"Error" notification: sends a JavaScript Error or exception.
"Complete" notification: does not send a value.

"Next" notifications are the most important and most common type: they represent actual data being 
delivered to a subscriber. "Error" and "Complete" notifications may happen only once during the 
Observable Execution, and there can only be either one of them.

These constraints are expressed best in the so-called Observable Grammar or Contract, written as 
a regular expression:

content_copyopen_in_new
next*(error|complete)?

In an Observable Execution, zero to infinite Next notifications may be delivered. If either an Error 
or Complete notification is delivered, then nothing else can be delivered afterwards.

The following is an example of an Observable execution that delivers three Next notifications, 
then completes:


Disposing Observable Executions
-------------------------------------------
Because Observable Executions may be infinite, and it's common for an Observer to want to abort 
execution in finite time, we need an API for canceling an execution. Since each execution is exclusive 
to one Observer only, once the Observer is done receiving values, it has to have a way to stop the 
execution, in order to avoid wasting computation power or memory resources.

When observable.subscribe is called, the Observer gets attached to the newly created Observable execution. 
This call also returns an object, the Subscription:


Just like observable.subscribe resembles new Observable(function subscribe() {...}), the unsubscribe 
we return from subscribe is conceptually equal to subscription.unsubscribe. In fact, if we remove the 
ReactiveX types surrounding these concepts, we're left with rather straightforward JavaScript.


function subscribe(subscriber) {
  const intervalId = setInterval(() => {
    subscriber.next('hi');
  }, 1000);
 
  return function unsubscribe() {
    clearInterval(intervalId);
  };
}
 
const unsubscribe = subscribe({ next: (x) => console.log(x) });
 
// Later:
unsubscribe(); // dispose the resources

The reason why we use Rx types like Observable, Observer, and Subscription is to get safety 
(such as the Observable Contract) and composability with Operators.