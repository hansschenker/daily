type Cell = ' ' | 'X' | 'O';

type Victory<Player, Board> = Board extends WinningBoard<Player> ? true : false;

type WinningBoard<Player> = DiagonalVictory<Player> | HorizontalVictory<Player> | VerticalVictory<Player>;

type DiagonalVictory<Player> = 
    | {
       0: { 0: Player, 1: any, 2: any },
       1: { 0: any, 1: Player, 2: any },
       2: { 0: any, 1: any, 2: Player },
    }
    | {
       0: { 0: any, 1: any, 2: Player },
       1: { 0: any, 1: Player, 2: any },
       2: { 0: Player, 1: any, 2: any },
    }

type HorizontalVictory<Player> =
    | {
       0: { 0: Player, 1: Player, 2: Player },
       1: { 0: any, 1: any, 2: any },
       2: { 0: any, 1: any, 2: any },
    }
    | {
       0: { 0: any, 1: any, 2: any },
       1: { 0: Player, 1: Player, 2: Player },
       2: { 0: any, 1: any, 2: any },
    }
    | {
       0: { 0: any, 1: any, 2: any },
       1: { 0: any, 1: any, 2: any },
       2: { 0: Player, 1: Player, 2: Player },
    }

type VerticalVictory<Player> =
    | {
       0: { 0: Player, 1: any, 2: any },
       1: { 0: Player, 1: any, 2: any },
       2: { 0: Player, 1: any, 2: any },
    }
    | {
       0: { 0: any, 1: Player, 2: any },
       1: { 0: any, 1: Player, 2: any },
       2: { 0: any, 1: Player, 2: any },
    }
    | {
       0: { 0: any, 1: any, 2: Player },
       1: { 0: any, 1: any, 2: Player },
       2: { 0: any, 1: any, 2: Player },
    }

type Winner<Board> = 
    Victory<'X', Board> extends true
        ? 'X'
        : Victory<'O', Board> extends true
            ? 'O'
            : ' ';

type TicTacToeBoard = {
    [Row in 0 | 1 | 2]: {
        [Column in 0 | 1 | 2]: Cell;
    };
};

type StartingBoard = {
    0: { 0: ' ', 1: ' ', 2: ' ' };
    1: { 0: ' ', 1: ' ', 2: ' ' };
    2: { 0: ' ', 1: ' ', 2: ' ' };
};

type ReplaceInBoard<
    Board extends TicTacToeBoard,
    Replacement extends Cell,
    RowPlace extends 0 | 1 | 2,
    ColumnPlace extends 0 | 1 | 2,
> = {
    [Row in 0 | 1 | 2]: {
        [Column in 0 | 1 | 2]:
            [Row, Column] extends [RowPlace, ColumnPlace]
                ? Replacement
                : Board[Row][Column];
    }
};

type Move = [Cell, 0 | 1 | 2, 0 | 1 | 2];

type ApplyMoves<
    Board extends TicTacToeBoard,
    Moves extends Move[]
> =
    Moves extends []
        ? Board
        : ApplyMoves<
            ReplaceInBoard<Board, Moves[0][0], Moves[0][1], Moves[0][2]>,
            DropFirst<Moves>
        >

type DropFirst<T extends unknown[]> =
    T extends [any, ...infer U]
        ? U
        : [];

type Split<Text extends string, Splitter extends string> =
    Text extends ''
        ? []
        : Text extends `${infer Prefix}${Splitter}${infer Suffix}`
            ? [Prefix, ...Split<Suffix, Splitter>]
            : [Text];

type ParseRawMoves<Moves extends string> =
    CollectParsedRawMoves<
        Split<Moves, '\n'>,
        [],
        'X'
    >;

type TicTacToe<Moves extends string>
    = Winner<
        ApplyMoves<
            StartingBoard,
            ParseRawMoves<Moves>
        >
    >;

type NextTurn<Turn> = Turn extends 'X'
    ? 'O'
    : 'X';

type IntToString<Int> = 
    Int extends '0'
        ? 0
        : Int extends '1'
            ? 1
            : Int extends '2'
                ? 2
                : never;

type ParseRawMove<Turn, RawRow, RawColumn> =
    [Turn, IntToString<RawRow>, IntToString<RawColumn>];

type CollectParsedRawMoves<RawMoves extends string[], Collected extends Move[], Turn extends 'X' | 'O'>
    = RawMoves extends []
        ? Collected
        : RawMoves[0] extends `${infer Pre}${Turn} ${infer RawRow} ${infer RawColumn}${infer Post}`
            ? CollectParsedRawMoves<
                DropFirst<RawMoves>,
                [...Collected, ParseRawMove<Turn, RawRow, RawColumn>],
                NextTurn<Turn>
            >
            : CollectParsedRawMoves<
                DropFirst<RawMoves>,
                Collected,
                Turn
            >;

type EndResult = TicTacToe<`
    X 1 0
    O 0 0
    X 1 1
    O 0 0
    X 1 2
    O 0 0
`>;
