https://github.com/wimvanderbauwhede/HaskellMOOC.git

1 -------- expressions
Expressions in Haskell are similar to those in other languages.
There are only expressions in Haskell, i.e. no statements.
Things that look like assignments are not updates of values but equations.


2-------- functions and lists

Haskell programs compute by reduction, i.e. gradually replacing expressions by their values.

A function takes one or more arguments and computes a result. Given the same arguments, 
the result will always be the same. In Haskell there are no side-effects.

The list is a key data structure. It is quite similar to lists in other languages. 
However note that Haskell lists are immutable

3---------- haskell building  blocks
The zip function is used to combine a pair of lists into a list of pairs. 
Since lists are such fundamental data structures in functional programming, 
it’s important to be able to manipulate them in flexible and powerful ways.

Does zip remind you of similar functions in other languages? 
Perhaps CONCAT in SQL? Please leave your suggestions in the comments.


I/O and a First Encounter with Monads
----------------------------------------------

Pure Functions
--------------
So far, we have concentrated on pure functions. These kinds of functions take values as arguments, 
do some processing of those values, then return a result value. A pure function does not depend 
on the ‘state of the world’. The computation is entirely self-contained and independent. 
Given the same arguments, a pure function will always return the same result.

I/O is Impure
--------------
Input and output (I/O) operations are impure. They influence and interact with the ‘outside world’. 
Essentially, this is the only way to make computers do interesting things.

So far we have looked at the getLine function, which reads input from the user and returns it as 
a special kind of String value — an IO String. We have also used the putStrLn function, which 
takes a String input and prints it to the terminal, returning an empty IO value, i.e. IO ().

we don’t want to mix up pure and impure functions
--------------------------------------------------------
The point of IO types is that we don’t want to mix up pure and impure functions — the type system keeps us honest. 
We know from a function’s type whether it is involved with I/O.

Sequencing Actions
------------------
Look at this simple function below.

let greet() = do 
    planet <- getLine
    home <- getLine
    putStrLn ("greetings " ++ planet ++ "ling.")
    putStrLn ("I am from " ++ home ++ ".")
    putStrLn "Take me to your leader."
In our tryhaskell web interpreter, you would need to enter it as a (very long!) one-liner:

do { planet <- getLine; home <- getLine; putStrLn ("greetings " ++ planet ++ "ling."); 
putStrLn ("I am from " ++ home ++ "."); putStrLn "Take me to your leader."}

Let’s try this out… copy and paste the one-liner into our tryhaskell online system. 
NB check there are no trailing space characters in your pasted expression — use backspace to remove them. 
Press enter to evaluate the one-liner, then at the > prompt type Earth (enter) then Mars (enter). You should then see:

greetings Earthling.
I am from Mars.
Take me to your leader.
Notice that the ordering is important here:

we want the first getLine call to get the name of the planet we have landed on
we want the second getLine call to get the name of where we are from.
Order of function evaluation doesn’t matter in pure code - e.g.

let a = reverse "winston"
    b = reverse "churchill"
in "sir " ++ a ++ " " ++ b

Again, in tryhaskell, we should use a lengthy one-liner:

let a= reverse "winston"; b = reverse "churchill"  in "sir " ++a ++" "++ b
It doesn’t matter whether we do the first reverse before the second — the result of the expression is still the same. 
However this is not the case where I/O is concerned. Sequencing is vital for I/O actions.

One more thing to notice: inside the do, we associate results of IO functions with names using <-. Inside the let, 
we associate pure function results with names using =.

Monads are Hiding Below
The do notation allows us to sequence actions. This looks just like a sequence of commands in an imperative 
programming language. However, do is only syntactic sugar. Underneath, it is rewritten as a chain of 
function calls where the output of the first function becomes the input of the second function. 
The bind operator accomplishes this function sequencing. It is a key part of the IO monad. 
We are starting to scratch the surface of Haskell IO and discover it is highly complex. 
We will reserve discussion of Monads and bind operators for later in the course.

Summary
For now, all we need to understand is:

I/O operations are impure
use do to specify a sequence of actions
use <- inside a do to associate input values with names
any value or function that involves I/O has IO in its type
a sequence of I/O actions is described as being in the IO Monad


guessing game
---------------------------------------------------------------------
Now let’s put together everything we have learned this week. We are going to write a moderately 
long Haskell program, consisting of multiple functions and I/O actions.

Guessing Game
------------
The program is going to be a guessing game, called Starman. In this single-player, text-based game, 
there is a word which the player needs to guess. For each turn of the game, the player guesses 
a single letter. If that letter is correct, then the guessed letters are displayed in the correct 
places in the word. If that letter is incorrect, then the user loses a star. Once the user has 
no stars left, they have lost the game. However if the user guesses all the letters in the word, 
they have won the game.

Because this game is quite long, we should use a texteditor (like Notepad++ on Windows, TextEdit 
on Mac or Gedit on Linux). Well, I actually use emacs … if you’ve heard of it. Start by creating 
an empty text file called starman.hs — the hs extension is to indicate that this file contains Haskell source code.

Key Functions
------------
The heart of the game involves checking the player’s guess. We want to know whether the guess was right. 
This outcome is a Bool value, either True or False. We need to update the displayed word, if the guess 
was right, by replacing appropriate dashes in the displayed word with the correctly guessed character. 
Therefore the result type of the function is a pair (Bool, String). The first element of the pair is 
the guess outcome. The second element is the String to display to the user for the next round.

Now, the checking function needs to know:

The secret word, a String
The current display, also a String
The character guessed by the player
These are the inputs to the checking function. So now we can state the type of the function:

check :: String -> String -> Char -> (Bool,String)
-------------------------------------------------
Here is a great programming tip. It’s always helpful to work out the type of a function first. 
This focuses your attention on what the function is supposed to compute, and what data it needs to do it. 
Good software engineers do specification before implementation.

What will the check function body look like? The player’s guess is correct if and only if the 
guessed character c is in the target word. So the guess is correct if

c `elem` word
---------------------------
The new displayed word will be:

[(if x==c then c else y) | (x,y) <- zip word display]
-------------------------------------------------------

This is a list comprehension, where we select each letter from either the actual word or the old display. 
The word is plaintext, whereas the display starts with all dashed characters.

check :: String -> String -> Char -> (Bool, String)
check word display c
  = (c `elem` word, [if x==c
          then c
          else y | (x,y) <- zip word display])
The next function we will define is the turn function. This is the function that will be called each 
time it is the player’s turn to enter a guess. First we need to check how many guesses the player has left:

if n == 0
If there are any guesses left, then we need to see whether the player is correct or not:

if word == display
----------------------
So we will have two if checks, each followed by putStrLn status messages and the end of the function 
calling sequence (since it is the end of the game). However if neither of the if conditions is true, 
then the player can take a turn, so we call another function to get another character from the user input.

turn :: String -> String -> Int -> IO ()
------------------------------------
turn word display n =
  do if n==0
       then putStrLn "You lose"
       else if word==display
              then putStrLn "You win!"
              else mkguess word display n
Note that there is a neater way to write the turn function, using Haskell guards, but we won’t 
learn about guards until next week.

mkguess word display n =
  do putStrLn (display ++ "  " ++ take n (repeat '*'))
     putStr "  Enter your guess: "
     q <- getLine
     let (correct, display') = check word display (q!!0)
     let n' = if correct then n else n-1
     turn word display' n'
What is the type of mkguess? Can you work it out and add it before the function definition? 
We grab a line of user input, but only use the first character for the guess. This will fail 
if the user just hits ENTER without typing any characters, since q will be an empty string.

OK, so now we just need a top-level function. Let’s call this starman:

starman :: String -> Int -> IO ()
---------------------------------
starman word n = turn word ['-' | x <- word] n
This function takes two arguments, the first is the word to be guessed, and the second is the number 
of incorrect guesses the player is allowed.

Running the Code
--------------------------------
Let’s put all these four functions into a textfile, called starman.hs

Save the file, then start ghci perhaps by typing ghci into a DOS command prompt, running WinGHCi or 
typing ghci in a terminal window (macOS or Linux).

If you are in the correct directory, i.e. the one where you saved starman.hs, you should be able to type

:l starman.hs
---------------------------------
and the program should load. It will either say something like:

[1 of 1] Compiling Main             ( starman.hs, interpreted )
Ok, modules loaded: Main.
or report an error if you have made a mistake in the source code anywhere. Check and make corrections
 if necessary. An error might look like this:

[1 of 1] Compiling Main             ( starman.hs, interpreted )
(some error report)
Failed, modules loaded: none.
The error report should have a line number, so you can see where the mistake is. Try to fix it by 
following the instructions, or comparing your code with what’s written above. 
Let us know in the comments section if you have any problems here.

When you get Ok from ghci, then you can run the program. At the ghci prompt type

starman "functionally" 5
---------------------------------
and start playing the game! You will return to the GHCi prompt when the starman function completes.

We have provided the Haskell source code for starman.hs as a download below, along with some comments. 
You could use this, but it would be much better to type in the program yourself and try to understand it.

Possible Extensions
----------------------------------
A real improvement to the game would be to generate a random word, perhaps from a list of words or a dictionary file. 
If you are feeling ambitious, you might try this. It would involve generating a random number i and read in the 
ith word from a dictionary. You might import System.Random and use a Haskell random number generator.


end of week 2
---------------
We now know enough Haskell to be dangerous. In this video, we give some suggestions 
for simple text-based games you might like to develop — probably adapting the Starman game we looked at this week.

Please post your ideas in the comments. If you have a github repo, pastebin or similar, 
then we’d be keen to inspect your code too.


week 3 data structures
-----------------------

Recursive Functions on Lists
10 comments
Computing with lists
There are two approaches to working with lists:
Write functions to do what you want, using recursive definitions that traverse the list structure.
Write combinations of the standard list processing functions.
The second approach is preferred, but the standard list processing functions do need to be defined, and those definitions use the first approach (recursive definitions).
We’ll cover both methods.
Recursion on lists
A list is built from the empty list  and the function . In Haskell, the function  is actually written as the operator  , in other words : is pronounced as cons.
Every list must be either
 or
 for some  (the head of the list) and  (the tail)
where  is pronounced as 

The recursive definition follows the structure of the data:
Base case of the recursion is .
Recursion (or induction) case is .
Some examples of recursion on lists
Recursive definition of length
The length of a list can be computed recursively as follows:

length :: [a] -> Int           -- function type
length [] = 0                  -- base case
length (x:xs) = 1 + length xs  -- recursion case
Recursive definition of filter
filter is given a predicate (a function that gives a Boolean result) and a list, and returns a list of the elements that satisfy the predicate.
filter :: (a->Bool) -> [a] -> [a]
Filtering is useful for the “generate and test” programming paradigm.

filter (<5) [3,9,2,12,6,4] -- > [3,2,4]
The library definition for filter is shown below. This relies on guards, which we will investigate properly next week.

filter :: (a -> Bool) -> [a] -> [a]
filter pred []    = []
filter pred (x:xs)
  | pred x         = x : filter pred xs
  | otherwise      = filter pred xs
Computations over lists
Many computations that would be for/while loops in an imperative language are naturally expressed as list computations in a functional language.
There are some common cases:
Perform a computation on each element of a list: 
Iterate over a list, from left to right: 
Iterate over a list, from right to left: 
It’s good practice to use these three functions when applicable
And there are some related functions that we’ll see later
Function composition
We can express a large computation by “chaining together” a sequence of functions that perform smaller computations
Start with an argument of type 
Apply a function  to it, getting an intermediate result of type 
Then apply a function  to the intermediate result, getting the final result of type 
The entire computation (first , then ) is written as .
This is traditional mathematical notation; just remember that in , the functions are used in right to left order.
Haskell uses . as the function composition operator
(.) :: (b->c) -> (a->b) -> a -> c
(f . g) x = f (g x)
Performing an operation on every element of a list: map
map applies a function to every element of a list
map f [x0,x1,x2] -- > [f x0, f x1, f x2]
Composition of maps
map is one of the most commonly used tools in your functional toolkit
A common style is to define a set of simple computations using map, and to compose them.
map f (map g xs) = map (f . g) xs
This theorem is frequently used, in both directions.

Recursive definition of map
map :: (a -> b) -> [a] -> [b]
map _ []     = []
map f (x:xs) = f x : map f xs
Folding a list (reduction)
An iteration over a list to produce a singleton value is called a fold
There are several variations: folding from the left, folding from the right, several variations having to do with “initialisation”, and some more advanced variations.
Folds may look tricky at first, but they are extremely powerful, and they are used a lot! And they aren’t actually very complicated.
Left fold: foldl
foldl is fold from the left
Think of it as an iteration across a list, going left to right.
A typical application is 
The  is an initial value
The  argument is a list of values which we combine systematically using the supplied function 
A useful intuition: think of the  argument as an “accumulator”.
The function  takes the current value of the accumulator and a list element, and gives the new value of the accumulator.
foldl :: (b->a->b) -> b -> [a] -> b
Examples of foldl with function notation
 
 

Examples of foldl with infix notation
In this example, + denotes an arbitrary operator for f; it isn’t supposed to mean specifically addition.

foldl (+) z []          -- > z
foldl (+) z [x0]        -- > z + x0
foldl (+) z [x0,x1]     -- > (z + x0) + x1
foldl (+) z [x0,x1,x2]  -- > ((z + x0) + x1) + x2
Recursive definition of foldl
foldl        :: (b -> a -> b) -> b -> [a] -> b
foldl f z0 xs0 = lgo z0 xs0
             where
                lgo z []     =  z
                lgo z (x:xs) = lgo (f z x) xs
Right fold: foldr
Similar to , but it works from right to left
foldr :: (a -> b -> b) -> b -> [a] -> b
Examples of foldr with function notation
 
 

Examples of foldr with operator notation
foldr (+) z []          -- > z
foldr (+) z [x0]        -- > x0 + z
foldr (+) z [x0,x1]     -- > x0 + (x1 + z)
foldr (+) z [x0,x1,x2]  -- > x0 + (x1 + (x2 + z))
Recursive definition of foldr
foldr            :: (a -> b -> b) -> b -> [a] -> b
foldr k z = go
          where
            go []     = z
            go (y:ys) = y `k` go ys
Relationship between foldr and list structure
We have seen that a list [x0,x1,x2] can also be written as

    x0 :  x1 : x2 : []
Folding  (:) over a list using the empty list [] as accumulator gives:

foldr (:)  [] [x0,x1,x2]
  -- >
  x0 :  x1 : x2 : []
This is identical to constructing the list using (:) and [] ! We can formalise this relationship as follows:


Some applications of folds
sum xs = foldr (+) 0 xs
product xs = foldr (*) 1 xs
We can actually “factor out” the  that appears at the right of each side of the equation, and write:

sum      = foldr (+) 0
product  = foldr (*) 1
(This is sometimes called “point free” style because you’re programming solely with the functions; the data isn’t mentioned directly.)

© University of Glasgow

Functional Maps and Folds versus Imperative Loops
2 comments
This tutorial explains the relationship between the higher-order list operations map, foldl and foldr and loops in an imperative language.

The source code can be found on GitHub

Summary
map : loop over list element-by-element, append new element to new list

foldl : loop over list element-by-element, update accumulator using current accumulator and element

foldr : loop over reverse list element-by-element, update accumulator using current accumulator and element

Note:

    map :: (a -> b) -> [a] -> [b]
    foldl :: (b -> a -> b) -> b -> [a] -> b 
    foldr :: (a -> b -> b) -> b -> [a] -> b
© Wim Vanderbauwhede

