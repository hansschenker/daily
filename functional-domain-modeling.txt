functional programming - just a function
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- programming with pure functions
- functions output is solely determined by the input (mapping values)
- no assignments, no side-effects
- pure mapping between values
- functions compose, build larger from smaller ones
- expression-oriented programming, expressions are lazy, lazyness allows for composition

Higher Order Functions and Effects are algebraic structures
you can treat functions as first class objects


Algebraic - from Algebra
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Algebra - the study of algebraic structures

Algebraic Structure: set and operations; generic set of objects, set of data types
------------------------------------------
an algebraic structure is a set with one or more finitary operations defined on it,
that satisfies a list of axioms

Algebraic Thinking
------------------------------------------
Thinking and reasoning about code in terms of the
- data types and
- operations 
they support without considering a bit about the underlying impementations

- algebraic composition
f: A =>  B, g: B => C, f and g are pure functions without side-effects
compose f with g -> h:A => C (algebraic composition)

Thinking in terms of the algebra, not in term of the underlying implementation

Domain Modeling
-----------------------------------------------------------------------------------------------------------------------------------------------------------

Problem Domain            
Solution Domain

What is a domain model:
----------------------------------------
A domian model in problem soliving and software engineering is a
-conceptual model of all the topics related to a specific problem.

it describes
-----------------------------------------------------------------
-entities
-attributes
-roles and
-relationships

- plus the the constraints (business rules) that govern the problem domain.
  it does not describe the solutions to the problem.

we build a solution archtitecture to the problem domain.


Domain Modeling
----------------------------------------------------

Bounded Context has (Feature)
  Domain Model is only valid in this bounded context
    entities, attributes, roles, relationships, value objects, services
    code
    schemas

Bounded Context
-----------------------------------------------------
- has a set of consistent vocabulary
- a set of domain bebaviors modeled as functions on domain objects
  implemented as types
- each of the behaviours honor as set of business rules
- related behaviours grouped as modules

Domain Model is a set of Bounded Contexts
  each Bounded Context has a number of defined Types
  collected in Modules with applied business rules

Domain Algebra
-----------------------------------------------------
Functions	are Morphisms
Types		are Sets
Compositon	of Functions
Constrains	in the form of Business Rules and Laws

Domain Model Algebra
------------------------------------------------------
is the algebra of types, functiions and rules of the solution domain model

explicit: 	types, type constraints, functions between types
verifiable; 	type constraints, more constraints if you have DT

algebraic property based testing

Algebra of a type
--------------------------------------------------------
type		cardinality (number of inhabitants)
---------	----------
Nothing		- 0

Unit		- 1

Boolean		- 2

Byte		- 256

String		- infinite

pair of types
---------------------------------------
(Boolean, Unit)	- 2 * 1       // Product Type

Product Types ( A and B)
----------------------------------------
ordered pairs of values one from each type in the order specified - this and that // order matters, combinations of the pair types

can be generalized to a finite product indexed by a finite set of indices

sample product type
-------------------------------------
type Point = ( Int, Int)

Sum Types ( A or B)
------------------------------------------
Boolean or Unit -> 2 + 1 = 3

Sum Types ( A or B) this or that ( Types which can have internally different invariants: payment method: card or cash, tree can have a node or a leaf
data structure that can host alternative forms of invariants, each variant is a representation of the data structure 
---------------------------------------------------------------------------------------------------------------
- model data structures involving alternatives, this or that
- a tree can have a leaf or an internal node which is a tree again
- in scala, a sum type is usually referred to as an Algebraic Data Type ADT

sample of a Sum Type: Shape

Shape can be of Rectangle or Circle (Circle and Rectangle are the variants, they are Product Types)

Sum types allow the construction of alternatives

Booleans:	true or false

Enumerations	type enumerations, finite set

Optionality	Option or None

Disjunction	Either Left or Right

Failure         Try in Success or Failure

null is value not a type

InstrumentType: Equity, FixedIncome, Currency (list of variants)
consturction:  	Sum Type with multiple invariants Product Types allow for construction of a bigger Type
destruction	with pattern matiching, or discriminated uniton (discriminant is string type which is common to all Product Types: kind= "circle", knd="rectangle"
exhaustiveness checked, all the variants must be listed in the pattern matching

Sum Types and Domain Models
-----------------------------------------------------------------
- models heterogeneity and gereoenous data structures (with alternative invariant inhabitants)
- allows modeling of expresive domain types in a succint and secure way - secure by constructions (exhaustveness check)
- pattern matching makes encoding domain logic easy and expressive

---------------------------------------------------------------------------------------------------------------------------------------------
null problem arose because of the absence of sum types (bob harbor - functional programmer)
-----------------------------------------------------------------------------------------------------------------------------------------------

Algebra of Data Types
-----------------------------------------------------------------------------------------------------------------------------------------------
you can treat types like algebra in mathematics
------------------------------------------------------------------------------------------------------------------------------------------------

Parametric Data Types
-----------------------------------------------------------------------------------------------------------------------------------------------
List<T> // List is the type constructor for T


Monoids and Monads are patterns in the functional world, standaard vocablary
----------------------------------------------------------------------------------
Monoid		is an algebra, has a specail semantic, you can use your own data type to implement Monoid
Monad		
are reausable algebras
