RxJS Expert Skills 
Sep 14, 2021
It’s time to take the next step. If you feel you are comfortable with RxJS and confident to solve common challenges in your applications, this workshop is a perfect fit! Push ;) your knowledge to the next level and learn to handle the tricky things.

Maintainable error handling and resilient data streams are a difficult but essential part of every vital application. The way we shape our state and the derived data streams is admittedly a matter of deep architecture knowledge, but also it involves dealing with the low-level problems of multicasting and shared state. In this session, we will come to understand how to solve those problems from the inside out, create our own operators that are beyond using the pipe method, and implement our learnings in a reusable way. As one of my favorite parts, we will reverse engineer Observables to have a clear picture of their lifecycle hooks and how to leverage all of them in code. To ensure we are safe from regressions, different testing approaches should be employed. Therefore, we will take a closer look at those and implement marble tests to cover teardown logic and avoid memory leaks over tests.
Agenda
A quick wrap-up on RxJS7
✔ Improvements
✔ Fixes
✔ Future changes
 Handling Errors without interruptions
✔ Isolating error-prone code
✔ Fully resilient error management
✔ Connection to third-party error logging
Custom Operators
✔ Limitations of using pipe
✔ Leveraging the observable lifecycle hooks
✔ Write a custom higher-order operator
Testing
✔ The clutter of asynchronous tests
✔ Testing with async helpers
✔ Marble Testing
Multicasting
✔ Subjects rewound
✔ The misuse of share operators
✔ Understanding RxJS7 connectable observables