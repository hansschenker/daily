https://www.freecodecamp.org/news/typescript-curry-ramda-types-f747e99744ab/

initialState = {};
stateSubject = new BehaviorSubject<any>(this.initialState);

or we can use shareReplay.

state$ = this.stateSubject.asObservable()
  .pipe(
    shareReplay(1)
  );

The BehaviorSubject requires some initial value that gets broadcasted. 
If we just use Subject we also might want to use startWith(…) 
operator to push out the initial state value to subscribers.

state$ = this.stateSubject.asObservable()
    .pipe(
      startWith(this.initialState),
      shareReplay(1)
    );

Accumulating values In our example so far, executing

this.stateSubject.next({ name: 'Juri' });
this.stateSubject.next({ age: 33 });

..we would get each single value individually at our subscribers, 
first { name: 'Juri }' followed by { age: 33 }. 
Usually however what we’d like to get is the aggregated state:

interface StateObject {
  [prop: string]: any;
}

...

state$ = this.stateSubject.asObservable().pipe(
  scan((acc: StateObject, newVal: StateObject) => {
    // create a new object
    return { ...acc, ...newVal };
  }, this.initialState),
  startWith(this.initialState),
  shareReplay(1)
);

this.stateSubject.next({ name: 'Juri' });
this.stateSubject.next({ age: 33 });

