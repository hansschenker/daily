let's start knockout.js lock.js is client-side mvvm javascript
----------------------------------------------------------------
library it's an open source javascript library

mit license and it helps us to create rich responsive

display and editor user interfaces with a clean underlying data model it works

on all mainstream browsers some of the cool features of knockout js are elegant dependency tracking that is

automatically updating the right parts of your ui whenever your data model changes

declarative findings a simple and obvious way to connect parts of your ui to your data model you can construct a

complex dynamic ui easily using arbitrarily nested binding contexts

tribally extensible implement custom behaviors as new declarative bindings for easy reuse in just a few lines of

code some of the additional benefits superior javascript library and it can be added on top of your existing web

application without requiring major architectural changes it's very compact close to kb when

gzipped and it works on mainstream browsers starting from i so

what is it good for knockout gs provides rich client-side interactivity

and with this we get rid of overlapping mess of interrelated event handlers

with mvvm pattern there is model view view model pattern we get object

oriented javascript and declarative bindings obviously white browser support is always there so knock.js is good

when our ui gets non-trivial and has a few overlapping behaviors because in that case things can get

tricky and expensive to maintain if we just go with raw javascript or jquery

and the reason for that is because jquery or raw javascript does not come with a underlying data model whereas

knockout js has an underlying data model so it's much easier with knockout because it lets you scale up in

complexity without fear of introducing inconsistencies we'll see how easy it is when we'll be

dealing with some examples now let's come to mvvm model as the name suggests it is model view

view model over here we have got three different points model view model and

view order basically contains the business domain logic business rules data access

model classes etc view model acts as a middleman between the view and the model

vue obviously has the user interface now let's understand mvvm in detail

first starting with the model the model is what i like to refer to as the domain object the model represents

the actual data and or information we are dealing with an example of a model

might be a contact containing name phone number address etc the key to remember with the model is

that it holds the information but not behaviors or services that manipulate the information now coming on to the

view the view is what most of us are familiar with and the only thing the end user really interacts with it is the

presentation of the data the view takes certain liberties to make this data more presentable for example

showing a date in the local time format whereas it's stored in utc format in the

model a view can also have behaviors associated with it such as accepting

user input the view manages input that is key presses mouse movements touch

gestures etc which ultimately manipulates properties of the model in mvvm

the view is active as opposed to a passive view which has no knowledge of the model and is completely manipulated

by a controller or presenter the view in mvvm contains behaviors events and data

bindings that ultimately require knowledge of the underlying model and view model

while these events and behaviors might be mapped to properties method calls and commands the viewers are still

responsible for handling its own events and does not turn this completely over to the view model now the view model

the view model is a key piece of the triad because it introduces presentation separation or the concept of keeping the

new answers of the view separate from the model instead of making the model aware of the user's view of a let's say

date so that it converts the date to the display format the model simply holds the data the view

simply holds the format to date and the controller acts as the license between the two the controller might take input from the

view and place it on the model or it might interact with the service to retrieve the model then translate

properties and place it on the view the view model also exposes methods commands and other points that help maintain the

state of the view manipulate the model as the result of actions on the view and

trigger events in the view itself the view model exposes not only the models but other

properties such as state information and commands the view handles its own ui

events then maps them to the viewmodel via commands the models and properties on the

viewmodel are updated from the view two-way data binding the view model may

expose the model directly or properties related to the model for data binding the view model can contain interfaces to

services configuration data etc in order to fetch and manipulate the properties

it exposes to the view things will get more clear when we'll start working with examples using knockout js

now we'll see how we can download and install knockout.js there are two ways of it the first is

you can go ahead to knockout gs.com downloads slash index.html and

download the local copy save it in your project folder as i've done over here

you can see inside the scripts i have got the knockout js

the other way is using a cdn that is content delivery network and

microsoft hosts this at this url so you can just

use a cdn copy as well if you are using visual studio you have

the option of going through manage nuget packages so when you launch manage nuget packages

you can just go ahead and search for account over here