Angular and React with Rxjs
--------------------------
You started building an app using React or Angular and wanted to use RxJS for the Observable primitive.

Higher Order Observables
------------------------ 
Then, you stumbled upon the operators and started to use a few, mostly map(), switchMap(), and from(). 

Subjects
------------------------------
But, you don't fully know how to use a Subject compared to multicasted Observables, let alone each variant 
of a Subject and it's behavior. 

Error Handling
------------------------------
And, you're not sure of the exact nuances around error handling.

Cutom operator
------------------------ 
Finally, you know you can build a custom operator, but you've never really tried.

If that sounds like you or your team, then this workshop is made for you.

In this 1-day hands-on workshop we'll dive into 
--------------------------
- Subject and its variants, 
- multicasting, 
- error handling, 
- custom operators, and 
- test operators. 

The workshop will take your knowledge of RxJS to higher level.

Outline
-----------------------
- Subject
- Recap Observer
- Observables are Unicast
- Exercise - Unicast
- Solution - Unicast

- Subjects are Multicast
- Exercise - Multicast
- Solution - Multicast
- Multicasting Operators
- multicast() Operator
- Exercise - multicast() Operator
- Solution - multicast() Operator
- refCount() Operator
- Exercise - refCount() Operator
- Solution - refCount() Operator
- publish() Operator
- Exercise - publish() Operator
- Solution - publish() Operator

Subject Variants
-----------------
- AsyncSubject
- Exercise - AsyncSubject
- Solution - AsyncSubject
- BehaviorSubject
- Exercise - BehaviorSubject
- Solution - BehaviorSubject
- ReplaySubject
- Exercise - ReplaySubject
- Solution - ReplaySubject
- WebSocketSubject
- Exercise - WebSocketSubject
- Solution - WebSocketSubject
- Error Handling
- Error Notification
- Error Notification
- throwError() Operator
- Exercise - throwError() Operator
- Solution - throwError() Operator
- catchError() Operator
- Exercise - catchError() Operator
- Solution - catchError() Operator

- finalize() Operator
- Exercise - finalize() Operator
- Solution - finalize() Operator
- retry() Operator
- Exercise - retry() Operator
- Solution - retry() Operator
- retryWhen() Operator
- Exercise - retryWhen() Operator
- Solution - retryWhen() Operator
- throwIfEmpty() Operator

- Custom Operators

- Higher Order Observables
- Exercise - Pipe Function
- Solution - Pipe Function

- Higher-order Function Operator
- Exercise - Higher-order Function Operator
- Solution - Higher-order Function Operator
- Testing

- TestScheduler

- Marble Syntax
- Getting Started with Marble Tests
- Exercise - First Test
- Solution - First Test

- Exercise - Subscription
- Solution - Subscription
- Exercise - Error
- Solution - Error

- Flush
- Exercise - Test Custom Operator
- Solution - Test Custom Operator

Goals
The goals of the RxJS Fundamentals course are:

Learn and understand the Subject class, its variants, and their behaviors.
Understand multicasting in RxJS.
Create multicasted operators efficiently.
Learn the benefits of multicasted operators over a Subject.
Learn the nuances and guarantees of error handling in RxJS.
Learn to build a custom operator.
Learn to use the TestSchedule to test custom operators.
Prereqs
Students should be familiar with the following techologies:

JavaScript
RxJS Fundamentals