----------------------------------------------------
const tick$ = interval(SPEED);
----------------------------------------------------

-------------------------------------------------------
const keyDown$ = fromEvent(document.body, 'keydown');
-----------------------------------------------------
  .pipe(
    map((e: any) => DIRECTIONS[e.keyCode]),
    filter(Boolean),
    startWith(INITIAL_DIRECTION),
    scan(nextDirection),
    distinctUntilChanged()
  );
----------------------------------------------------
const direction$ = keyDown$
----------------------------------------------------

----------------------------------------------------
const increaseLength$ = new BehaviorSubject(0);
increaseLength$
-----------------------------------------------------
  .pipe(
    scan((snakeLength, grow) => snakeLength + grow, SNAKE_LENGTH)
  );
-------------------------------------------------------------
const snakeLength$
-------------------------------------------------------------

----------------------------------------------------------
tick$
----------------------------------------------------------
  .pipe(
    withLatestFrom(
      direction$,
      snakeLength$,
      (_, direction, snakeLength) => ({ direction, snakeLength })
    ),
    scan(move, generateSnake(SNAKE_LENGTH))
  );
-----------------------------------------------------------
const snake$
-------------------------------------------------------------

-----------------------------------------------------------
snake$
----------------------------------------------------------
  .pipe(
    scan(eat, generateApples(APPLE_COUNT)),
    distinctUntilChanged(compareObjects),
    share()
  );
---------------------------------------------------------
const apples$
---------------------------------------------------------

-------------------------------------------------------
apples$
------------------------------------------------------
  .pipe(
    skip(1),
    map(_ => GROW_PER_APPLE),
    tap( v => increaseLength$.next( v))
  )
//  .subscribe(v => increaseLength$.next(v));
--------------------------------------------------------
const applesEaten$
----------------------------------------------------

-------------------------------------------------------
increaseLength$
--------------------
  .pipe(
    skip(1),
    startWith(0),
    scan((score, _) => score + POINTS_PER_APPLE)
  );

----------------------------------------------------
snake$, apples$, score$
----------------------------------------------------
combineLatest(
  snake$, apples$, score$,
  (snake, apples, score) => ({ snake, apples, score })
);
-------------------------------------------------------
const scene$
------------------------------------------------------

-------------------------------------------------------
tick$
--------------------------------------------------------
  .pipe(
    withLatestFrom(scene$, (_, scene) => scene),
    takeWhile(scene => checkSnakeCollision(scene.snake))
  );
----------------------------------------------------------
const game$
----------------------------------------------------------


game$.subscribe(scene => render(ctx, scene));