view compiler -> view renderer

component factory (view definition)

component view (view data)

module factory

host and embedded views

internal representation of the components tree

module compiler

module factory

dependency injection

module & component injectors

static injector

change detection

DOM updates (interpolation)

child component and DOM element bindings updates

query list updates (ViewChildren and ContentChildren)

pipes processing

the role of zones

internal representation of the components (Angular views)

real-world examples:
avoiding confusions and unexpected results
leveraging the knowledge to design an efficient applications

--------------------------- manfred steyer 3 tage intensiv ---------------------------------------
AG 1: KOMPONENTEN: DEEP DIVE
 
Kommunikation zwischen Komponenten
Deklarative und programmatische Content Projection
ViewChildren und ContentChildren
Handles/ Template Variables und exportAs
Komponentenvererbung
View-Provider vs. “herkömmliche” Provider und lokale Services
Lazy Components mit Ivy


TAG 1: DATENBINDUNG: DEEP DIVE

Datenbindung: Deep Dive
Datenbindung unter der Motorhaube
Bewusste Einschränkungen und Fallstricke in der Datenbindung
Unidirektionaler Datenfluss und seine Konsequenzen
Umgang mit ExceptionHasBeenChangedAfterItWasCheckedError
Performancetuning mit der OnPush-Strategie, Immutables und Observables


TAG 2: DIREKTIVEN: DEEP DIVE
 
Attribut-Direktiven für Querschnittsfunktionen
Strukturelle Direktiven
Templates und Container
Microsyntax
Templates zur Laufzeit referenzieren


TAG 2: ROUTING: DEEP DIVE

Hierarchisches Routing mit Child-Routes
Aux Routes
Lazy Routes
Guards
Resolver
Router Events
Custom Url-Matchers




TAG 3: FORMULARE: DEEP DIVE
 
Template-driven Forms vs. Reactive Forms
Große Formulare auf mehrere Komponenten aufteilen
Wiederholgruppen mit FormArrays modellieren
Eigene Validierungsregeln
Asynchrone Validierungsregeln
Multi-Field-Validation
Dynamische Formulare
Mit ControlValueAccessor in die Datenbindung eingreifen
Eigene Formularsteuerelemente mit ngModel, formControl und Co. nutzen


TAG 3: DEPENDENCY-INJECTION: DEEP DIVE

Lokale vs. Globale Services
Die Arten von Providern: useClass, useValue, useFactory, useExisting
Multi-Provider
Token: InjectionToken vs. Basisklassen
Tree-Shakable Provider vs. “klassische” Provider
Services und Lazy Loading



