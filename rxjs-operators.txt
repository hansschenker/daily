Examples of streams
-------------------------------------------------------------------------------------
- http request
- database access
- socket connection
- sensor data
- UI events: button clicks, text input
- Twitter feed
- car dashboard (speed, rpm)
-------------------------------------------------------------------------------------
rename mergeMap, conatMap, exhaustMap, SwitchMap (Dean Radcliffe - rxjs-polyrhytmic)

- concatMap 	serial
- exhaustMap	mute , 
- mergeMap	parallel 
- switchMap	cutoff.(skip previous)

No-Loss		Limit 1
Parallel	Cutoff (replace)
Serial		Mute (drop)


- parallel 	is a fine default: just execute Jobs returned from Handlers with no fixed restriction. (Async lookups on a page)
- serial 	Jobs aren't begun until the previous one has finished. (Adding a song to a playback queue)
- cutoff 	A limit of 1 at a time - replacing any old Job with a new by canceling the first, then starting the new. (Autocomplete search results)
- mute  	A limit of 1 at a time. Ignoring/dropping new Jobs while another is processing. (Elevator buttons)

You might recognize these as corresponding to the RxJS operators mergeMap, concatMap, switchMap, and exhaustMap, only named friendlier :) 
That's the RxHelper making it easier for you!
-------------------------------------------------

rxjs-Polyrhythm - library of Dean Radcliffe
------------------------------------------


Polyrhythm is the simultaneous use of two or more conflicting rhythms”. 
Let’s take a 3 vs. 4 polyrhythm as an example: a 3/4 polyrhythm is when you hear 

- 3 evenly spaced pulses in the same amount of time as / every 1/3 of a second
- 4 evenly spaced pulses (and that sequence repeats). / every 1/4 of a second

If a repeating cycle is 1 second long, one pulse would be heard at: 0 sec, 1/3 sec, 2/3 sec (every 1/3 of a second). 
The second pulse would be heard at 0 sec, 1/4 sec, 2/4 sec and 3/4 sec (every 1/4 of a second).

12 intervals (3*4=12): 1 2 3 4 / 1 2 3 4 / 1 2 3 4 / 1 2 3 4
                      (1/12)
----------------------------------------------------------------------------------------------
A simple way to achieve this programmatically is to divide a cycle in 12 intervals (3*4=12), 
and have a clock generating numbers at the beginning of each interval (if the cycle is 1 sec, 
the interval would be 1/12 seconds long). We can then take those numbers as they are generated, 
and if a number is divisible by 3 or 4, we play a sound.

‍1 2 3 4 5 6 7 8 ...
    s d   s   d ...


-----------------------------------------------------------
the expand operator is a
flattening operator that takes its
results and feeds it back into the
mapping function that it has


use cases
--------

other valid use cases for expand l
different other like real world use

cases for expand the honestly the top
two cases for expand are 
 - crawling anasynchronous trees

- asynchronous process that needs to spawn
  more copies of itself and in that case
  you kind of are you have it feeding back
  into the top and there's various reasons
  that you might want to do something like


The essential concepts in RxJS which solve async event management are:

Observable is the producer (source observable)
----------------------------------------------------------------------

represents the idea of an invokable collection of future values or events.

- producer of valules,
- 1 to 1 relationship between producer and consumber unicast
- cold
- hot

- Cold observables start running upon subscription, i.e., 
  the observable sequence only starts pushing values to the observers when Subscribe is called. (…) 

- Hot observables such as mouse move events or stock tickers or video hangout
  are already producing values even before a subscription is active.

Observer is the consumer or subscriber (interface with 3 callback functions for next, error and complete)
-----------------------------------------------------------------------------------------------------------
- collection of callbacks (next, error, complete) that listen to values delivered by the Observable.
- consumer, subscriber

Subscription is return  subscribe function, used to unsubscribe  Source Observable
------------------------------------------------------------------------------------------------------
represents the execution of an Observable, is primarily useful for cancelling the execution.

Operators are pure functions (Observable in - Observable out
------------------------------------------------------------------------------------------------------
  (source: T ) => R

  pure functions that take an Observable as argument and return an Observable
- pure functions that enable a functional programming style of dealing 
- operations like map, filter, concat, reduce, etc.

  RxJS operator is simply a function which takes an observable as an input and returns an output stream, 
  it all comes down to writing a simple JavaScript function.

rxjs-dev
---------

interface UnaryFunction<T, R> {
  (source: T): R


interface Subscribable<T> {
  subscribe(observer?: PartialObserver<T>): Unsubscribable


class Observable<T> implements Subscribable {
  static create: Function
  static if: typeof iif
  static throw: typeof throwError
  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic)
  _isScalar: boolean
  source: Observable<any>
  operator: Operator<any, T>
  lift<R>(operator: Operator<T, R>): Observable<R>
  subscribe(observerOrNext?: NextObserver<T> | ErrorObserver<T> | CompletionObserver<T> | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Subscription
  _trySubscribe(sink: Subscriber<T>): TeardownLogic
  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>
  pipe(...operations: OperatorFunction<any, any>[]): Observable<any>
  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T>


interface OperatorFunction<T, R> extends UnaryFunction, Observable> {

  // inherited  index/UnaryFunction
  (source: T): R



Subject: is the equivalent to an EventEmitter, 
-----------------------------------------------------------------------------------------------------
and the only way of multicasting a value or event to multiple Observers.


Schedulers: are centralized dispatchers to control concurrency, 
----------------------------------------------------------------------------------------------------------
allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others.


First Order Observable (FOO): value producing operators: 
-------------------------------------------------------------------------------------------------
audit
auditTime

buffer
bufferCount
bufferTime
bufferToggle
bufferWhen

catchError

combineAll
----------
Flattens an Observable-of-Observables by applying combineLatest when the Observable-of-Observables completes.

combineAll takes an Observable of Observables, and collects all Observables  it. 
Once the outer Observable completes, it subscribes to all collected Observables and 
combines their values using the combineLatest strategy, such that:
Every time an inner Observable emits, the output Observable emits

When the returned observable emits, it emits all of the latest values by:
If a project function is provided, it is called with each recent value  each inner Observable in whatever order they arrived, 
and the result of the project function is what is emitted by the output Observable.
If there is no project function, an array of all the most recent values is emitted by the output Observable.

Examples
Map two click events to a finite interval Observable, then apply combineAll

combineLatest
--------------
combineLatest combines the values  all the Observables passed as arguments. 

Operator function:
------------------
This is done by subscribing to each Observable in order and, whenever any Observable emits, 
collecting an array of the most recent values  each Observable. [a, b]. So if you pass n Observables to operator, 
returned Observable will always emit an array of n values, in order corresponding to order of passed Observables 
[a, b] or {a, b

Static version 
--------------
accepts either an array of Observables or each Observable can be put directly as an argument. 
Note that array of Observables is good choice, if you don't know beforehand how many Observables you will combine. 
Passing empty array will result in Observable that completes immediately.

All input Observables must emit at least once
-----------------------------------------------
To ensure output array has always the same length, combineLatest will actually wait for all input Observables 
to emit at least once, before it starts emitting results. This means if some Observable emits values 
before other Observables started emitting, all these values but the last will be lost. 

No emitting if one does complete without emitting:
--------------------------------------------------
if some Observable does not emit a value but completes, resulting Observable will complete at the same moment 
without emitting anything, since it will be now impossible to include value  completed Observable in resulting array. 
Also, if some input Observable does not emit any value and never completes, combineLatest will also never emit 
and never complete, since, again, it will wait for all streams to emit some value.
If at least one Observable was passed to combineLatest and all passed Observables emitted something, 
resulting Observable will complete when all combined streams complete. So even if some Observable completes, 
result of combineLatest will still emit values when other Observables do. In case of completed Observable, 
its value  now on will always be the last emitted value. On the other hand, if any Observable errors, 
combineLatest will error immediately as well, and all other Observables will be unsubscribed.

combineLatest accepts as optional parameter project function, which takes as arguments all values 
that would normally be emitted by resulting Observable. project can return any kind of value, which will
 be then emitted by Observable instead of default array. Note that project does not take as argument that array of values, 
but values themselves. That means default project can be imagined as function that takes all its arguments and puts them into an array.


withLatest
---------------
withLatest combines each value  the source Observable (the instance) with the latest values 
 the other input Observables only when the source emits a value, optionally using a project function 
to determine the value to be emitted on the output Observable. 
Trigger:
All input Observables must emit at least one value before the output Observable will emit a value.


concat
--------

concatAll
concatMap
concatMapTo

count

debounce
debounceTime
defaultIfEmpty

delay
delayWhen

dematerialize

distinct
distinctUntilChanged
distinctUntilKeyChanged

elementAt

endWith

every

exhaust
exhaustMap

expand

filter

finalize

find
findIndex

first
groupBy

ignoreElements
isEmpty

last

map
mapTo

materialize
max

merge
mergeAll
mergeMap

flatMap

mergeMapTo
mergeScan

min
multicast
observeOn
onErrorResumeNext

pairwise
partition

pluck

publish
publishBehavior
publishLast
publishReplay

race

reduce

repeat
repeatWhen

retry
retryWhen

refCount

sample
sampleTime

scan

sequenceEqual

share
shareReplay

single

skip
skipLast
skipUntil
skipWhile

startWith

subscribeOn

switchAll
switchMap
switchMapTo

take
takeLast
takeUntil
takeWhile

tap

throttle
throttleTime

throwIfEmpty

timeInterval
timeout
timeoutWith
timestamp

toArray

window
windowCount
windowTime
windowToggle
windowWhen

withLatest

zip
zipAll


Subject: 
---------
is the equivalent to an EventEmitter, and the only way of multicasting 
a value or event to multiple Observers.
subject and observable, different types of subjects (BehaviorSubject, ReplaySubject, AsyncSubject)

Schedulers: 
----------
are centralized dispatchers to control concurrency, allowing us to coordinate 
when computation happens on e.g. setTimeout or requestAnimationFrame or others.



simple HOO$
-------------------
map, all, to, switch, combine, concat, merge, exhaust,



static operator
function operator

FOO$: first order observable:  returns simple values (string, number)
HOO$: higher order observable: (returns observable)

algebra: simple HOO$
-------------------
map, all, to, switch, combine, concat, merge, exhaust,

HOO$:
--------------------------------------------
mergeAll, concatAll, switchAll, exhaust

SOO$: Source o Observables
-------------------------


HOO Pattern: combine simple HOO to complexer HOO: mapping and flattening with Concurrency
-----------

mergeMap:
same order as emitted, no restriction on order
use cases: fire and forget, send multiple post requests

concatMap, queue observable, one after the other

switchMap, only the last one is running

exhaust:
--------
Converts a higher-order Observable into a first-order Observable by dropping inner Observables 
while the previous inner Observable has not yet completed.

exhaust<T>(): OperatorFunction<any, T>
Parameters
There are no parameters.

Returns
OperatorFunction<any, T>: An Observable that takes a source of Observables and 
propagates the first observable exclusively until it completes before subscribing to the next.

Description
Flattens an Observable-of-Observables by dropping the next inner Observables while the current inner is still executing.
exhaust subscribes to an Observable that emits Observables, also known as a higher-order Observable. 
Each time it observes one of these emitted inner Observables, the output Observable begins emitting the items 
emitted by that inner Observable. So far, it behaves like mergeAll. 

However, exhaust ignores every new inner Observable 
if the previous Observable has not yet completed. Once that one completes, 
it will accept and flatten the next inner Observable and repeat this process.

Examples: allow only one action be running, neglect all until prev Obs has completed
-----------------------------------------------------------------------------------
- Run a finite timer for each click, only if there is no currently active timer
- wait after mouse click until task is complete and only then allow for a next click

exhaustMap:
-----------
Projects each source value to an Observable which is merged in the output Observable only if the previous projected Observable has completed.
neglect all emitted values until inner is completed