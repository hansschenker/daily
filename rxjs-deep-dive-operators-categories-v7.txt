Categories of operators
----------------------------------------------------------------------


Creation Operators
-------------------------------------------------------------------------------------------------------------
ajax		fetch the response object that is returned from API 	--> use ajax()

bindCallback	callback API to a function that returns an Observable. 	--> useCallbackFunc

bindNodeCallbackNode API to a function that returns an Observable 	-->bindNodeCallback(fs.readFile)

defer		Creates an Observable that, on subscribe, calls an Observable factory 
		to make an Observable for each new Observer 		-->ticks = defer(() =>  interval(1000));

EMPTY		A simple Observable that emits no items to the Observer 
		and immediately emits a complete notification --> EMPTY

from		Creates an Observable from an Array, an array-like object, a Promise, 
		an iterable object, or an Observable-like object 	--> from(array)

fromEvent	Creates an Observable that emits events of 
		a specific type coming from the given event target. 	--> fromEvent(document, 'click')

fromEventPatternCreates an Observable from an arbitrary API 
          	for registering event handlers				-->
									          initial,   cond,  iterate,   res
generate	generate sequence of numbers				--> generate(0, x => x < 3, x => x + 1, x => x);

interval

of		Converts the arguments to an observable sequence	--> of('Hello')

range		Creates an Observable that emits a sequence 
		of numbers within a specified range			-->  range(1, 3)

throwError	Create a simple observable that will 
		create a new error with a timestamp and log it 
		and the message every time you subscribe to it		-->throwError(() => {
  									     const er = new Error(`nbr ${ ++nbr }`);
  									     er.timestamp = Date.now();
  									     return error;
									    });

timer		Since interval waits for the passed delay 		--> timer(0, 1000)
		before starting, timer starts interval immediately.

iif		Checks a boolean at subscription time, 			--> iif(() => isTrue, of('t'), of('f') )
		and chooses between one of two observable sources

Join Creation Operators
----------------------------------------------------------------------
These are Observable creation operators that also have join functionality -- 
emitting values of multiple source Observables.

combineLatest
concat
forkJoin
merge
partition
race
zip

Transformation Operators
----------------------------------------------------------------------
Transformation Operators
buffer
bufferCount
bufferTime
bufferToggle
bufferWhen
concatMap
concatMapTo
exhaust
exhaustMap
expand
groupBy
map
mapTo
mergeMap
mergeMapTo
mergeScan
pairwise
partition
pluck
scan
switchScan
switchMap
switchMapTo
window
windowCount
windowTime
windowToggle
windowWhen

Filtering Operators
----------------------------------------------------------------------
Filtering Operators
audit
auditTime
debounce
debounceTime
distinct
distinctUntilChanged
distinctUntilKeyChanged
elementAt
filter
first
ignoreElements
last
sample
sampleTime
single
skip
skipLast
skipUntil
skipWhile
take
takeLast
takeUntil
takeWhile
throttle
throttleTime

Join Operators
----------------------------------------------------------------------
Also see the Join Creation Operators section above.

combineLatestAll
concatAll
exhaustAll
mergeAll
switchAll
startWith
withLatestFrom

Multicasting Operators
----------------------------------------------------------------------
Multicasting Operators
multicast
publish
publishBehavior
publishLast
publishReplay
share

Error Handling Operators
----------------------------------------------------------------------
catchError
retry
retryWhen

Utility Operators
----------------------------------------------------------------------
tap
delay
delayWhen
dematerialize
materialize
observeOn
subscribeOn
timeInterval
timestamp
timeout
timeoutWith
toArray

Conditional and Boolean Operators
----------------------------------------------------------------------
defaultIfEmpty
every
find
findIndex
isEmpty

Mathematical and Aggregate Operators
----------------------------------------------------------------------
count
max
min
reduce


Creating custom operators
----------------------------------------------------------------------

Use the pipe() function to make new operators
----------------------------------------------------------------------

Creating new operators from scratch
----------------------------------------------------------------------
