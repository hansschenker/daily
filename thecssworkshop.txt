---------------------------------------------------------------------------------------------------------------------------------------------------------
CSS Basics
---------------------------------------------------------------------------------------------------------------------------------------------------------
To be able to create great layouts we need to have an understanding of some basic CSS. 
These free lessons cover some things you will use in the rest of the course.

CSS Selectors
The selectors in the CSS Level 3 Selectors specification are powerful and well supported by browsers. 
In order to truly master CSS layout we need to have a good understanding of how to select parts of our document.

Basic Selectors
In this lesson we take a look at some of the simple, basic selectors in CSS - element, ID and Class selectors.

Combinators
Combinators combine selectors in different ways to select elements based on their position in the document.

Attribute Selectors
Attribute selectors select elements in the document based on their attributes. 
Learn how to precisely match attributes and values in CSS.

Pseudo-class Selectors
A pseudo-class selector acts as if you have added a class to an element in your markup.

Pseudo-element Selectors
A pseudo-element acts as if a whole new element was inserted into our document, then CSS applied.

Selectors Usage Tips
Thoughts on browser support, and the future of CSS Selectors. Also, when should you 
choose a more complex selector over adding a class to your document?

Length Units
Understand length units in CSS. Relative units such as em and rem, the viewport units vh, vw, vmin and vmax, 
and absolute units such as px and pt. Which should you use, and why?

Absolute Units
A representation of actual measurement in the physical world. The units px, mm, cm, in, pt and pc.

Relative Units
These units don’t have fixed values but instead are relative to something else. 
The units described as relative units are em, ex, ch and rem. I’m also including % here.

Viewport Units
These are also relative units, but these newer additions to the specification 
define length relative to the size of the viewport making them very useful for responsive design. 
These units are vh, vw, vmin and vmax.
--------------------------------------------------------------------------------------------------------------------------------------------------------------

CSS Layout Fundamentals
---------------------------------------------------------------------------------------------------------------------------------------------------------s
A course to give you solid CSS Layout skills for today, and for the browsers from the past you still have to support.

Introduction
This course has very simple requirements. You’ll need a text editor and a web browser.

Get Started
An introduction to how this course works and the things you will need to follow along.

The Box Model
The CSS Box Model explained. How to use the alternate box model. Learn how margins and padding work, and why margins collapse.

The Standard CSS Box Model
In this lesson we will take a look at the standard CSS Box Model.

The Alternate Box Model
We can use an alternate Box Model in modern browsers. In this lesson we learn how to switch 
on this Box Model and the difference between it and the standard Box Model.

Padding
Padding is the space between the border of your box and the content.

Borders
The border goes around your element, you can wrap a border around each side or just some of the sides. 
For a seemingly simple thing there are a large number of border related properties.

Margins
The margin property in CSS adds a margin around the element.

Positioning
How to use absolute, relative and fixed positioning.

Position
In this lesson I introduce the position property in CSS.

Relative Positioning
Using relative positioning we can change how an element is positioned relative 
to where it would have been in the document flow.

Absolute Positioning
Absolute positioning positions as item relative to the viewport or 
the next parent element that has positioning context.

Fixed Positioning
Fixed positioning means that the items stays fixed in the viewport as the rest of the content scrolls.

Sticky Positioning
A newer method starting to have support in browsers that achieves an effect that up to now has required JavaScript.

Stacking Content
Introduction to stacking content in CSS and the z-index property.

Stacking Content
When we position items we can end up with some elements sat on top of others. We can control this stacking with CSS.

Controlling the Stack
In this lesson we learn how to control the order in which things stack up using the z-index property.

Floats
What are floats? How to float elements within content, create a navigation bar and use floats for layout.

Float Basics
Floats have been the mainstay of most CSS layout methods of the last ten years, in this lesson we will learn how to use them.

Using Floats in Layout
We can use the behaviour of floats to create multiple column CSS layouts. This lesson demonstrates a simple example.

Adding a Footer to a Floated Layout
The wrapping behaviour of floats can cause us problems when we want to add something underneath 
our floated columns. In this lesson I show the problem and how to fix it.

Float Clearing Methods
There are a variety of methods used to clear floats. In this lesson I demonstrate the different possibilities.

Building a Simple Floated Navigation Bar
In this lesson I demonstrate creating a simple, floated navigation bar.

The Display Property
Using display block, inline and inline-block for UI elements and layout. The strengths and pitfalls of display:table.

Introduction to the Display Property
In this module we will start to take a look at the display property, which has a number 
of possible values of use to us when doing layout.

Creating a larger “Hit Area” on a Link
In this example we take the floated navigation created in the Floats module and use the ability 
to turn inline items into block items to create a larger hit area on the navigation link.

Display inline-block
In the CSS 2.1 specification we get a new value, that of inline-block. When you set an element
 to display: inline-block it maintains some inline properties, but also takes on some properties of elements that are set to display block.

Table Values for Display
In this lesson we take a look at the values of the display property that display tables - 
and that can be usefully used on elements that are not an HTML table.

Getting Started with Flexbox
---------------------------
A beginners guide to flexbox, you will learn how to build UI elements such as navigation and cards.

Introducing Flexbox
--------------------------
In the last module we looked at the display property looking at some of the values you can use. 
I left out display: flex as Flexbox is a big enough subject to deal with alone! In this lesson we start to take a look.

The `align-items` property
--------------------------
We take a look at how to use align-items, this is the property that enables equal height columns, and centering of content.

The `justify-content` property
------------------------------
In an earlier lesson we saw how justify-content enables the spacing out of items. 
Here are some of the other ways this property can be used.

Controlling wrapping with `flex-wrap`
------------------------------------
Flexbox is designed for one-dimensional layout, it isn’t a good solution for complex grids, 
however it can work very well for lines of items that need to wrap.

Ordering Flex Items with the `order` Property
---------------------------------------------
We have already seen that we can reverse the flow of flex items but it as 
also possible to set an order using the order property.

Getting Started with Grid Layout
--------------------------------
The basics of CSS Grid Layout, get started defining grid and doing simple line-based positioning, 
naming lines and using grid template areas.

Defining a Grid
In this lesson we start to look at CSS Grid Layout, and find out how to define a grid.

Using the Firefox Grid Inspector
The Grid Inspector in Firefox DevTools is the best way to see what is happening when designing with Grid Layout.

The fr unit
The fr unit enables the creation of flexible grids, without the need to calculate percentages.

minmax()
Using minmax() means that you can set a minimum and maximum size for a track.

Auto Placement
The auto placement rules dictate how items are placed onto the grid.

Line-based Placement
Items are placed on the grid by referencing start and end lines for columns and rows.

Named Lines
In addition to placing items by line number, you can name lines on the grid and then use the names to place the items.

Grid Template Areas
An introduction to laying out content using the grid-template-areas property.

The difference between Grid and previous layout options
Using Grid for layout requires a shift in thinking about layout on the web, as the lesson explains.

Responsive Design
Learn about Media Queries and fluid grids. We’ll create a responsive layout and also learn 
how best to use images in our responsive designs.

Getting Started with Responsive Design
Responsive design is about creating layouts that will work well on a variety of devices - 
from a high resolution desktop right down to a mobile phone. In this lesson we start to look at some core concepts.

Media Queries
Media Queries let us tailor our CSS based on some properties of the device the user 
is using to view our content. In this lesson we learn how they work.

Responsive Images
The basics of images used in responsive design and how to use the new Responsive 
Images features for full control over the images used in your layouts.

Flexible Grids
To create a responsive layout we need a flexible, rather than a fixed width grid. 
A grid that will respond to the changing screen width and keep things in proportion.

Using calc()
The calc() property enables calculations to happen right within your CSS. This can be very useful when designing responsively.

Which Method Should You Use for Your Responsive Layout?
I’m often asked “which layout method should I use” and my answer tends to vary 
between “all of them” and “whichever suits the content, design and browsers coming 
to your site you have best”. Here are some more thoughts to help you make the right choice for your site.

Browser Support
Here we will cover cross-browser and device testing, along with techniques for using newer 
CSS without locking out peope with older browsers. Learn how to make good decisions as to when to embrace new CSS techniques.

Browser Support
CSS is constantly developing, and there will never be a point at which every single browser 
supports every single thing we might want to do. We can learn skills that help us cope with this issue.

Accessibility
It is also worth remembering that your visitors are not just limited by how up to date or 
otherwise the technology they are using is. Some of your visitors may be browsing the web 
using some sort of assistive technology, an obvious example being a screen reader which reads out the content of your website.

Vendor Prefixes
What are vendor prefixes and how do we use them?

Using New CSS as an Enhancement
We can use modern CSS as an enhancement to CSS that will work for older browsers. 
This is a practical way to give people the version of your site that suits the technology they are using.

Testing cross-browser
Some options for testing your work in a range of browsers and devices.

Debugging CSS Layout Issues
Common problems explained. Learn techniques for debugging issues in-browser 
and find out how to isolate problems in order to ask for help.

Debugging CSS Layout Issues
The final section of this part of the course aims to help you debug inevitable issues 
that arise when working with CSS for layout. In this lesson we think about validating our HTML and CSS.

Creating Reduced Test Cases
On a modern site a lot of things can be the cause of a layout problem. Being able to reduce the code 
down to just the things that cause the problem is a useful skill to learn.

Using Browser Tools
Every web browser has a set of tools to help web developers. These tools have become incredibly powerful, 
giving you a way to inspect what is happening under the hood of your website. In this lesson I show you the basics.

Searching and Asking For Help
The work you have already done to try and figure out your issue means that you will be able to ask
 for help in a forum, and get a positive response. In this lesson I give some tips for getting help quickly.

-------------------------------------------------------------------------------------------------------------------------------------------------
Advanced CSS Layout
--------------------------------------------------------------------------------------------------------------------------------------------------s
A course that will bring you right up to date with what is possible today, and the things that are part of the very near future.

This course assumes that you have a solid understanding of CSS layout, and want to learn 
about newer and emerging specifications for layout.

I intend to keep this material up to date and even add some lessons to cover any new features. 
It is likely to change far more quickly than the material in the fundamentals course. 
I’ll flag changes in Slack and also send infrequent emails if something major changes.

Multiple Column Layout
It’s be around for a while, but gets little attention. While limited there are some interesting use cases for this specification.

Introduction to Multiple-column Layout
Introducing the Multiple Column Layout specification and the column-count and column-width properties.

Column Gutters and Rules
Using the column-gap and column-rule properties to control spacing between columns and add rules.

Images and Spanning across columns
How to handle images that are contained in columns and also how to span content across your columns.

A Card Layout using Multiple-Column Layout
Creating a simple multiple column layout of “cards” with text and images, demonstrating how to use the break-inside property.

Advanced Flexbox
Build on the work we did in the Fundamentals Course and learn how to work with Flexbox to create more complex user interface features and layouts.

The Flex Properties
A look at the properties that the flex property is a shorthand for.

Flex Items and Auto Margins
A demonstration of how auto margins can work with Flexbox to achieve layouts not possible with Flexbox alone.

A Flexbox Pricing Example
A worked example of a pricing layout. This demonstrates using flexbox both for rows and columns 
to line up the items for each price point. We also use the order property to control which item displays first.

CSS Shapes
Break out of the box and learn how to use CSS Shapes to rid your designs of straight edges and square boxes.

Introducing CSS Shapes
An introduction to the CSS Shapes Module. This module gives us the ability to shape text around images and other page elements.

CSS Shapes: the inset() function
Using the inset() function to remove white space around an image.

CSS Shapes: The circle() Function
Demonstrations of the circle() value for creating shapes along with some other points relevant to all of our basic shapes.

CSS Shapes: The ellipse() Function
Using the ellipse() value for shape-outside.

CSS Shapes: The polygon() function
How to use the polygon() value to create more complex shapes than is possible with the simpler basic shapes.

CSS Shapes: Shapes from the Alpha Channel
You can create your shapes from an image with an Alpha Channel, the shape can follow the line of the transparent area.

CSS Shapes: Shapes from the Reference Box
Using the reference box to define our shape around the margin, border, padding or content.

CSS Grid Layout
The CSS Grid Layout specification. Get to grips with a brand new way of doing layout.

CSS Grid Layout
Introduction to CSS Grid Layout and basic line-based positioning.

CSS Grid: the fr unit
CSS Grid Layout introduces a new unit, the fr unit. This unit describes a fraction of the available 
space in the grid container and enables the creation of flexible grids without the need to calculate 
percentages as we might be used to doing when working with floats.

CSS Grid: line-based, responsive layout
Combining grid layout and media queries to redefine our grid and create a responsive design.

CSS Grid Layout: Named Grid Lines
Instead of relying on line numbers, and needing to keep track of the position of elements on our grid, we can name the lines.

CSS Grid Layout: Named Grid Areas
Another way to position items on the grid is with template areas, describing the layout as the value of the grid-template-areas property.

CSS Grid Layout: a flexible 12 column grid system
Exploring the creation of a 12 column flexible grid, based ont he grid that is part of the Skeleton framework.

CSS Grid Layout: a layout using our 12 column system
In this lesson we take the grid created for our skeleton grid replacement and use it to build a more realistic layout.

CSS Grid Layout: grid auto-placement
How to use the auto-placement rules in CSS Grid Layout, and an example of doing so to create an image gallery.

CSS Grid Layout: UI example for auto-placement
Grid layout is not just for major layout of your main page containers. It will be useful for smaller UI elements too - like this dl.

CSS Grid Layout: Repeat Notation
Using repeat notation can tidy up your track listings and make them easier to read.

CSS Grid Layout: auto-fill and auto-fit
Combining what we know about minmax() and repeat notation gives us a method of creating as many flexible columns as will fit.

What size is 1fr really?
The size that 1fr ends up can sometimes be confusing, in this video I explain how the sizing is worked out.

Content Sizing Keywords
The content sizing keywords enable the creation of tracks which size according to the content inside them.

Box Alignment
The Box Alignment Specification brings the alignment properties of Flexbox to Grid Layout 
and Block Layout too. This is the vertical alignment module!

Box Alignment: the align-items property
The align-items property with a video example demonstrating how it works in the context of CSS Grid Layout.

Box Alignment: the justify-items property
The justify-items property with a video example to demonstrate how it applies in Grid Layout.

Box Alignment: the align-self property
The align-self property with a video example to demonstrate how it applies in Grid Layout.

Box Alignment: the justify-self property
The justify-self property with a video example to demonstrate how it applies in Grid Layout.

Other interesting new things
Exclusions and Regions, and other emerging modules of relevance.

Using display: contents
An explanation of a new value of the display property, display: contents.

CSS Exclusions: a demonstration of exclusions
Exclusions let us wrap text around all sides of an element. They aren’t a positioning method in 
themselves however they work alongside other methods such as absolute positioning or Grid Layout.

CSS Regions: a demonstration of Regions and Grid
A demonstration of CSS Regions combined with CSS Grid Layout. Requires WebKit Nightlies or Safari Technology Preview.

Keeping up to date
Rounding up with some final thoughts on keeping up to date and contributing back to the web platform.

Keeping your skills up to date
Some closing thoughts about how and why to keep your CSS skills up to date.
-------------------------------------------------------------------------------------------------------------------------------------------------------