RxJs Operators samples from RxJs.dev
------------------------------------------------------------------------------------

buffer - Every second, emit an array of the recent click events
-------------------------------------------------------------------------------------

           input - 	what: interval emits every second a value
           condition -	when: the user clicks we buffer the emitted values  
	   output -	buffered values

interval:	----v----v----v----v-------
(1s = 4-)               |      |      |
click:		--------c------c------c----
buffered:       --------v------2v-----v----

-------------------------------------------------------------------------------------
import { fromEvent, interval, buffer } from 'rxjs';

const clicks = fromEvent(document, 'click');
const intervalEvents = interval(1000);

const buffered = intervalEvents.pipe(buffer(clicks));
buffered.subscribe(x => console.log(x));

-------------------------------------------------------------------------------------

bufferTime - Every 5 seconds, emit the click events from the next 2 seconds
-------------------------------------------------------------------------------------
import { fromEvent, bufferTime } from 'rxjs';

const clicks = fromEvent(document, 'click');
const buffered = clicks.pipe(bufferTime(2000, 5000));
buffered.subscribe(x => console.log(x));

-------------------------------------------------------------------------------------


bufferWhen - Emit an array of the last clicks every [1-5] random seconds
-------------------------------------------------------------------------------------
Buffers the source Observable values, using a factory function of closing 
Observables to determine when to close, emit, and reset the buffer.
Collects values from the past as an array. When it starts collecting values, it calls a function that returns an 
Observable that tells when to close the buffer and restart collecting.



import { fromEvent, bufferWhen, interval } from 'rxjs';

const clicks = fromEvent(document, 'click');
const buffered = clicks.pipe(
  bufferWhen(() => interval(1000 + Math.random() * 4000))
);
buffered.subscribe(x => console.log(x));
-------------------------------------------------------------------------------------