Misko Hevery
----------------------------------------------------------------------------------------------------------
So directives. So what are directives? I think directives are the 
- coolest features of Angular

because what they basically let you do is 
- teach the browser new tricks. Somebody on Twitter had an awesome quote, which I think--

I'm very proud of that they use this particular quote, but, basically, they said, 
- I'm pretty sure HTML 6 goes under the name of Angular. And I think the reason why the person said that is because

- Angular allows you to make new vocabulary for HTML so that

- you can emulate just about any construct you can think of.

And the moment you get in the business of emulating construct, which 
- you really are in the business of is creating a DSL.

Everybody knows what DSL is, right? Domain Specific Language. And so DSL for your application becomes--

HTML's really good at one thing. And that's static documents. But 

- with the introduction of directives, you can extend the vocabulary. And so now, 
- whatever you think you wish you had in HTML, and you can have it with directives. So directives is basically this magic.

And there's also this magic that is very unique to Angular. No other framework has anything like this.

There's other frameworks, for example, Knockout. And I'm not an expert in 
- Knockout same philosophy of using attributes of putting extra behavior in side of the HTML and then
  bind to those behaviors. 
  - But the set of vocabulary that they have is fixed.

If the authors of Knockout didn't put it in there, you can't have it. But 

- Angular's very, very different in a sense that we are the meta-framework. 
  We allow you to customize directives for yourself.



And I'm going to go through it. So as every application has to have, you have to wait for onload event.

- You have to wait for the DOM to load. Once the DOM is loaded, you can do a couple of things to kind of get the application going.

- first we have to do is, we have to find the root of the document. Normally, this is the location of ng-app, but in our case,
  it's just a root elements. Then we have to list a set of modules. Modules is probably another tech talk we're going to have

- Angular has a built-in module called ng, and
  that's the thing that has all of the directives and all the magic in. It turns out that 
- the same APIs we used for building Angular are 
  the same APIs you get to use for building your own directives. 
  So there's nothing special. We don't have any special access to the system, which is

- whatever we can do, you can do as well. So there's this hidden module called ng, which you normally

- The root element which we got, the holdoff says, this is the root element, so from now on, this is what it is.

  *** everything in Angular is dependency injected ***
- it turns out everything in Angular is dependency injected. And so this is no different. 
  So we create a root injector and we only create one injector per application. 

- from the injector, we get ahold of the compile service. This is what does all of the magic.

- the compile service does is, it basically traverses the DOM, starting at the root element
  And it looks for directives.

- once it discovers these directives, it executes its compile function. 
  And the compile function is responsible for returning the link function. 



- we get a hold of the root scope. Every application has exactly one root scope.

- And then we call the composite linking function within the root scope. And we kick the Angular to say, hey, go.
 And this is basically a whole bootstrapping process.

- one to one translation from HTML to the DOM structure. There's nothing has yet happened because we are currently 

- compile service, go walk the DOM starting at root element and go look for all those
 directives. And so, inside of our "Hello, world," we have an li.

- And notice that we have basically the raw directives as we have them in here. 
  So you guys are familiar with ng-model is a directive. ng-bind is a directive. ng-repeat is a directive.

- when we call the compile function, we actually are going to execute the compile function of individual directives.

- most directives have no compile functions. So it's going to no app. But some do, for example, a repeater.

- Repeater says, well, I'm going to have to make a whole bunch of copies of these things, right? 
  Because I'm a repeater, and so I need to be able to clone it. 
  And so its compile function simply yanks out the content puts it in a placeholder, which is just a comment, 
  so it knows where the other items are supposed to go.

- if you remove a DOM element, it's probably considered a DOM fragment because it is no longer part
  of the render tree. Yes, it's basically been disconnected from the original render tree, 

- a linking function is, every directive has a linking function, I think.
  when we execute the linking function, and when you step over it, notice, again, nothing happened to the DOM.
  because linking function basically, it is, in essense, it creates the view.

- If HTML is your template, which then gets loaded and becomes a DOM, 
  - then view is the live thing that knows how to react to different events.
    And so when the linking function runs, we create all the bindings. 

So let's build a directive.
-------------------------------

- simple Hello World app. 

- let's write a directive Demo Greet.
  So I'm sure you guys know how to register a directive.
  Simply, you take the module for the application, and you simply say directive, Demo Greet. 


A Practical Guide to Angular Directives - sitepoint:  Claudio Ribeiro

Directives are perhaps the most important bit of an Angular application, and if we think about it, 
the most-used Angular unit, the component, is actually a directive

An Angular component isn’t more than a directive with a template. When we say that components 
are the building blocks of Angular applications, we’re actually saying 
that directives are the building blocks of Angular applications.

A directive can be used (selector) as:
 - element, my-directive
- attribute, [bordered]
- class or   .highlighted
- comment.   ng-container

from Angular versions 2 and onward, Angular directives are separated into three different types:
---------------------------------------------------------------------------------------------------

Components = Element directives , create a tag
--------------------------------
As we saw earlier, components are just directives with templates. 
Under the hood, they use the directive API and give us a cleaner way to define them.

The other two directive types don’t have templates. Instead, they’re specifically tailored to DOM manipulation.

Attribute directives
---------------------------------
Attribute directives manipulate the DOM by changing its behavior and appearance.

We use attribute directives to apply conditional style to elements, show or hide elements or dynamically 
change the behavior of a component according to a changing property.

Structural directives or Template Directives (change the DOM structure)
--------------------------------------------
These are specifically tailored to create and destroy DOM elements.


Element Directives
    built in
    custom

Attribute Directives
    built in
    custom

Template Directives
    built in
    custom

Angular Workflow
------------------------------------------------------------------
Html (DOM Element or Template) + Directive + Injector -> live View in the DOM
------------------------------------------------------------------


Dependency Injection
--------------------

  Each DOM element has a ElementInjector
  --------------------------------------
- ElementInjector 
  hierarchy, created implicitly at each DOM element. 
  An ElementInjector is empty by default unless 
  you configure it in the providers property on @Directive() or @Component().

- ModuleInjector
  The ModuleInjector can be configured in one of two ways by using:
  - The @Injectable() providedIn property to refer to @NgModule(), or root
  - The @NgModule() providers array
    With @Injectable() providedIn, optimization tools can perform tree-shaking, 
    which removes services that your application isn't using. This results in smaller bundle sizes.


Router




Forms



Http


Change Detection


Typescript


Rxjs


Compiler


CLI


