////   state.js
-----------------------------------------------------------------------------------------------
import { Observable, BehaviorSubject } from 'rxjs';
import { take, switchMap } from 'rxjs/operators';

export interface State {
  messages: string[];
  isFormValid: boolean;
  isLoadingQuote: boolean;
  hasQuoteError: boolean;
}

export const defaultState: State = {
  messages: [],
  isFormValid: true,
  isLoadingQuote: false,
  hasQuoteError: false,
};

export type Action<TPayload> = (payload?: TPayload) => Reducer;
export type Reducer = (currentState: State) => Observable<State>;

export const appState = new BehaviorSubject<State>(defaultState);

export const withState = (reducer: Reducer) =>
  appState
    .pipe(
      take(1),
      switchMap(state => reducer(state)),
    );

export const toNextState = (reducer: Reducer) => {
  const sequence = withState(reducer);
  sequence.subscribe(newState => appState.next(newState));
  return sequence;
};

//// mutations.ts
---------------------------------------------------------------------------
// reducers as observables
import { of, concat } from "rxjs";
import { ajax } from "rxjs/ajax";
import { State, withState } from "./state";
import { catchError, switchMap } from "rxjs/operators";

export const addMessage = (message: string) => (currentState: State) =>
  of({
    ...currentState,
    isFormValid: !!message.length,
    isLoadingQuote: false,
    hasQuoteError: false,
    messages: [...(message.length ? [message] : []), ...currentState.messages]
  });

export const onQuoteLoading = () => (currentState: State) =>
  of({
    ...currentState,
    isLoadingQuote: true,
    hasQuoteError: false
  });

export const onQuoteError = () => (currentState: State) =>
  of({
    ...currentState,
    isLoadingQuote: false,
    hasQuoteError: true
  });

export const addRonSwansonQuote = (getJSON = ajax.getJSON) => () =>
  concat(
    withState(onQuoteLoading()),
    getJSON<string[]>(
      "https://ron-swanson-quotes.herokuapp.com/v2/quotes"
    ).pipe(
      switchMap(([quote]) => withState(addMessage(quote))),
      catchError(() => withState(onQuoteError()))
    )
  );
--------------------------------------------------------------------------------------------
