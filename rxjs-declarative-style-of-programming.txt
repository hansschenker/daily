what is declarative style of programming

Declarative programming is a programming paradigm where the programmer focuses 
on describing the problem to be solved, rather than writing step-by-step 
instructions on how to solve it. In declarative programming, the code 
describes the relationship between the inputs and the outputs, rather 
than specifying the control flow and algorithms.

Declarative programming languages emphasize what the program should 
accomplish rather than how to accomplish it. This allows the programmer 
to express a solution in a more concise and intuitive way, making the 
code easier to read and understand. Common examples of declarative programming 
languages include SQL for database queries, HTML and CSS for web development, 
and Prolog for artificial intelligence.

In contrast, imperative programming is a style of programming where the 
programmer specifies the exact sequence of steps needed to solve a problem. 
Imperative programs consist of statements that change a program's state, 
while declarative programs focus on describing the desired result.

is javascript reactive extension programming also declarative style of programming

Yes, Reactive Extension (Rx) programming with JavaScript can be considered a 
declarative style of programming. Rx programming provides a way to write code 
in a reactive and event-driven way, where the programmer specifies what should 
happen in response to events, rather than how to handle each event.

In Rx programming, you define a set of rules that describe how the system should 
respond to changes in the input. The rules are written using a functional style, 
and they can be composed together to create complex behavior in response to user 
input or other external events.

The Rx programming model is based on a set of observable sequences, which can be 
thought of as a stream of events. The developer can then apply various operators 
to these sequences to transform and filter the data, allowing them to create a 
pipeline of data processing that is easy to reason about and modify.

By defining behavior in a declarative way using Rx programming, developers can 
create applications that are more responsive, resilient, and scalable.

Yes, functional programming with JavaScript can be considered a declarative 
style of programming. In functional programming, the focus is on defining 
the behavior of a program in terms of functions and their interactions, 
rather than on explicitly controlling the flow of execution.

In functional programming, functions are used to transform data from one 
form to another, and the program is defined as a set of function compositions 
that operate on input data to produce output. Functions are defined as pure functions, 
meaning that they don't have any side effects and their return value depends 
only on their input parameters.

Functional programming in JavaScript is often used in conjunction with other 
declarative programming styles, such as Reactive Extension (Rx) programming or 
functional reactive programming (FRP). In this context, functions can be used 
to define rules for how the system should respond to events, and to transform 
and filter data in a reactive and declarative way.

By using a functional programming style in JavaScript, developers can create 
applications that are more modular, composable, and easy to reason about. 
The declarative nature of functional programming also makes it easier to 
parallelize and optimize the code for performance, making it a popular 
choice for modern web development.

what is lambda calculus

Lambda calculus is a formal system developed by mathematician Alonzo Church in 
the 1930s as a way to study the foundations of mathematics and logic. It is 
also considered one of the 
- fundamental building blocks of functional programming.

Lambda calculus is a 
- system of symbolic logic that uses expressions made up of variables, functions, 
  and application to represent computation. 

- functions are defined as mappings from inputs to outputs, 
  and they can be composed and applied to other functions or variables to create new functions.

Lambda calculus is based on the concept of 
- a lambda abstraction, which is a way of defining a new function 
  by specifying its input variable and its output in terms of the input. 

The syntax for a lambda abstraction is to write the input variable after the lambda symbol (Î»), 
followed by a dot (.), and then the expression that defines the output in terms of the input.

Lambda calculus has been influential in the development of programming languages, 
especially functional programming languages such as Lisp, Scheme, and Haskell. 
The principles of lambda calculus have also been used in the development of 
type systems, compilers, and other areas of computer science.


what are the basis of functional reactive programming

Functional Reactive Programming (FRP) is a programming paradigm that combines 
functional programming and reactive programming concepts to create reactive systems 
that respond to changes in input data in a declarative and composable way. The basis 
of FRP includes the following concepts:

Streams: A stream is a sequence of events that represent changes in data over time. 
Streams can be created from user input, network messages, or other sources. In FRP, 
streams are treated as first-class citizens and can be transformed, filtered, and 
combined with other streams to create more complex behavior.

Signals: A signal is a value that changes over time and can be derived from one or 
more streams. Signals are a higher-level abstraction that represent the current state 
of the system and can be used to create reactive behavior that responds to changes 
in the input data.

Functional Programming: FRP is based on the principles of functional programming, 
where functions are used to transform data from one form to another. In FRP, functions 
are used to create new streams and signals from existing ones.

Declarative Programming: FRP is a declarative programming paradigm, where the programmer 
describes what the program should do, rather than how it should do it. FRP allows the 
programmer to define the behavior of the system in terms of streams, signals, and transformations, 
making it easier to reason about and modify.

Event-Driven Programming: FRP is also based on the principles of event-driven programming, 
where the program responds to external events such as user input, network messages, 
or system events. In FRP, events are represented as streams, and the system responds 
to changes in the input data by transforming streams and signals to create new behavior.

Functional Reactive streams vs signals

In Functional Reactive Programming (FRP), streams and signals are two important concepts 
that are used to represent changing data over time.

Streams 
are sequences of discrete events that represent changes in data over time. 
For example, a stream might represent mouse clicks, keyboard inputs, or network messages. 
In FRP, streams are typically modeled as an infinite sequence of discrete values that 
arrive over time. A stream can be created from user input, network messages, or other sources.

Signals, 
on the other hand, are continuous values that change over time. They represent 
the current state of the system and can be derived from one or more streams. Signals are 
a higher-level abstraction that represents the current value of the system at any given 
point in time. For example, a signal might represent the current position of the mouse, 
the temperature of a room, or the progress of a download.

The key difference between streams and signals is that 
- streams represent discrete events that occur over time, 
- while signals represent continuous values that change over time. 

- Streams can be transformed, filtered, and combined to create new streams, 
- while signals can be derived from streams and transformed to create new signals.

In FRP, streams and signals are used to create reactive behavior that responds to changes 
in the input data. By using a stream-based model, FRP allows developers to create systems 
that are more modular and composable, making it easier to reason about and modify the 
behavior of the system.


The basis of FRP provides a powerful and flexible framework for creating reactive systems 
that can respond to changes in input data in a declarative and composable way. 
By using functional programming principles and stream-based abstractions, 
FRP allows developers to create systems that are more modular, composable, 
and easier to reason about.

in FRP what is sample code for a signal

In Functional Reactive Programming (FRP), a signal represents a value that changes 
over time and can be derived from one or more streams. Here is some sample code 
in JavaScript using the RxJS library to create a signal that represents the current time:

const { interval } = require('rxjs');
const { map } = require('rxjs/operators');

// create a stream that emits an event every second
const time$ = interval(1000);

// transform the stream to create a signal that represents the current time
const timeSignal$ = time$.pipe(
  map(() => new Date())
);

// subscribe to the signal to receive the current time every second
timeSignal$.subscribe(currentTime => console.log(currentTime));


In this code, we first create a stream called time$ using the interval function 
from the RxJS library. This stream emits an event every second.

We then transform this stream using the map operator to create a signal called 
timeSignal$ that represents the current time. The map function is used to transform 
each event emitted by the time$ stream into a new value that represents the current time.

Finally, we subscribe to the timeSignal$ signal to receive the current time every second. 
The subscribe function is used to register a callback that is called every time 
the signal emits a new value.

This example demonstrates how a signal can be created from a stream and used to 
represent the current time. Signals can be derived from multiple streams and 
combined to create more complex behavior in a reactive and declarative way.

in FRP what is sample code for a stream

In Functional Reactive Programming (FRP), a stream is a sequence of discrete events 
that represent changes in data over time. Here is some sample code in JavaScript 
using the RxJS library to create a stream that represents mouse clicks:

javascript
Copy code
const { fromEvent } = require('rxjs');

// create a stream that represents mouse clicks
const clicks$ = fromEvent(document, 'click');

// subscribe to the stream to receive mouse click events
clicks$.subscribe(event => console.log(event));
In this code, we use the fromEvent function from the RxJS library to create a stream 
called clicks$ that represents mouse clicks on the document. The first parameter to 
the fromEvent function is the source object, in this case the document object, and 
the second parameter is the event name, in this case 'click'.

We then subscribe to the clicks$ stream using the subscribe function to register 
a callback that is called every time a mouse click event is detected. 
The subscribe function is used to pass a callback that receives the event object 
as a parameter, which can be used to access the details of the event, such as the 
mouse position or the target element.

This example demonstrates how a stream can be created using the RxJS library to 
represent mouse click events. Streams can be transformed, filtered, and combined 
to create more complex behavior in a reactive and declarative way.

Angular Signals - Sander Elias on Github

In this Article, I will go into the Why, What, and Wherefor of Angular Signals.
 
And why this is such a big deal that everyone seems to have an opinion on. 
How it is a going to be a complementary technology to Angular, 
and not a replacement to anything already there. 
(spoiler alert: it is not a replacement for RxJS)

DISCLAIMER: this is not the current API of Angular Signals. As the current API doesn't 
really exist just yet. Yes, there is a POC implementation, but it is not the final API. 

The API is still being discussed. But this is the API that I think will make the easer 
to read samples. And it is the API that I think will be the most intuitive to use. 

So I will use it in this article. But it is not the final API, and it is also 
not the current implementation.

Why Angular Signals?
Ah, yes, the question that everyone is asking.

Why do we need another reactive library?
Why now?

Why not just use RxJS?

Why not use promises?
Why not just use the async pipe?
Why not just use the async pipe with RxJS?
Why this and not my favorite feature that is missing?
Why is this list ending here?
Well, I can not answer all of those questions. But I can answer some of them. And I will try to answer them in a way that is not just my opinion. But also in a way that is backed up by facts.

Why not just use RxJS?

The Angular user-base is huge. And it is growing every day. But also it is split in a 50/50 way. 
50% want more Observable integration. And 50% want less Observable integration. 
There is a point to both sides of the argument. And I will try to explain why. 

The current best solution for Observables is RxJS. A library I personally love. 
As a nice bonus, Angular is also using it for a few parts of it. 

But it does have a steep learning curve, and to be fair, you can solve most use-cases 
where Angular shines fine without it. 
Aside from those issues. 

If I hand you an observable, there is no way you can know if it is sync or async. 
You also don't know if it will ever complete, or how many values it will produce. 
Also, when you subscribe to it, you become responsible for unsubscribing. 
Forgetting that, might lead to a memory leak. 
You can solve advanced use-cases easily with RxJs, but the trade-off is that you need 
to know a lot about the specifics surrounding the observable primitive to handle it correctly. 
And that is not always the case.

Bottom line: RxJS is great. But it is not for everyone. And it is not for every use-case. 

Embracing this more would make Angular less accessible to a lot of people. 
And that is not something we want. So that is the reason to not just use Rxjs.

Why not just use the async pipe, or promises?

Promises and async functions are a great way to handle async code. But they are not a 
great way to handle sync code. They are also not a great way to handle multiple values 
over time (user generated events for example). They are also not a great way to handle errors. 
And they are async by design. That means you need at least 2 event-loop cycles to 
get a result into the view.

There is directly also the answer on why not use the async pipe. It is a great way 
to get values into the view, combined with an NgIf you can also handle loading indicators and so on. 

This alone introduces more complexity into the templates. Also, the result of the async pipe only 
"lives" in the view. What if you need to use that in the component? Or need a couple of side
 effects from that value. Yes, there are solutions for that, but it becomes hacky and hard to read. 
And that is not something we want. So that is the reason to not just use the async pipe.

Why another reactive library?
Why now use X, or Y, or Z? Well, This one, I can not answer with 100% certainty. 
I know for a fact that the team has been looking at all kind of implementations. 
Then they came up with a spec. This spec is built from knowing what is needed in Angular. 
And what is not. So it is built from the ground up to be a great fit for Angular. 
And it is build from the ground up to be a great fit for the Angular user-base. 
As I have been reading the code of the Angular signal POC, and the code of quite a 
couple of other signal implementations, and did build my own signal prototype, 
I can say I agree with the team on this. The tradeoffs in the other libraries are 
not a good fit for Angular.

Why now?
Ah, this is an interesting one. I can only speculate. But one of the most asked-for 
features of Angular is "zone-less" support. This is a big step in making that possible. 
Right now, Angular is depending on ZoneJS to trigger its change-detection. Having a 
reactive primitive makes it easy to trigger change-detection. Even more, having this 
primitive in the core of Angular would even allow to build an app without change-detection. 
You don't need to detect changes, when you know when and where those changes happen. 
And that is exactly what the signal primitive brings to Angular. Let me put in a quote 
from Pawel Kozlowski, one of the Angular team members:

Signals let us understand changes to the data model (what gets modified) and how the 
model is used (templates that need update).

With this precise info we can just update templates that read changed values, instead 
of dirty-checking the entire application / all templates.

This is a huge step in making Angular more efficient. And it is a huge step in making 
Angular more flexible. And it is a huge step in making Angular more powerful. And it is a 
huge step in making Angular more future-proof.

A side observation is that we are getting more and more streams (like media capture) in 
the browser. Signals are a great way create a reactive interface to those streams. And 
that is something that is going to be more and more important in the future.

Wait, wut? does this mean I need to rewrite my app?
Well no, not at all. This is a new primitive. It is not a replacement for anything.
 
You can still do the same things you did before. You can still use Observables. You 
can still use Promises. You can still use the async pipe. In addition to that, 
you will be able to use the new signal primitive. Embracing that will allow a future 
you to turn of ZoneJS, if that is something you want to do. But that is a future you. 
And that is a future that is not here yet. Also, you might not even want to do that. 

You might want to keep using ZoneJS. And that is fine. This will give future you more possibilities. 
But it will not take anything away from you.

What is the problem Angular Signals solves?
First let me show you what the problem that Angular Signals is trying to solve. And then 
I will show you how it solves it. Not the technical how, as there are numbers of explanations 
on that already. But the conceptual how.

The problem:

let counter = 0;

/** I'm using console.log here, but look at this as a component that is rendering a
 counter into the view */
console.log(counter) // 0

counter +=1; // Nothing happens here
The problem is that the value of counter is not reactive. When you update it, it will 
not call the console.log again. The view will not be updated. The code I use is silly, 
and it will be really clear to everyone that ever has written any program that this will 
never work as expected (For the sample, we expect the consoleLog to refire!).

This is exactly where a signal comes to play. lets look at the same code, but with a signal:

import { signal, effect } from '@angular/core';

let counter = signal(0);

/** here we wrap our console log into an "effect" */
effect(() => console.log(counter.value)) // 0

counter.value +=1; // this will now log 1 to the console! (in our viewpoint for this doc, 
It does update the view)

// NOTE: see disclaimer at the top.
A signal is a synchronous value. It is a value that can be updated. When updated it will 
trigger all effects that are using it. This is the core of it.

let that sync in.

A signal is a synchronous value.
But what does that even mean? Well, it means that when you update the value of a signal, 
it is updated immediately. It is not updated in the next tick. It is not updated in the 
next frame. It is updated immediately. When you read it on the next line of code, it will 
have the updated value right away.

there are some technical details I will not go into in this article. They don't add anything 
to the concept of the article. There are numerous articles that go into the technical details o
f how this works. Ask me if you want to know more about it.

A bit of background on the effect function. You might never have encountered this before. 
But it is a very common pattern in functional programming. It is a function that takes a 
function as an argument. And it will call that function. But it will also call that function 
when the value of the signal changes. In the above sample we are using a function that logs 
the value of the signal. But you can do anything, and it will be called every time the value 
of the signal changes. Also, you can have multiple effects on the same signal. And they will 
all be called when the value of the signal changes. Also, you can use multiple signals in the 
same effect. And the effect will be updated every time any of the signals change. This whole 
process is called reactive programming. And it is the core of Angular Signals.

However that does not mean the effects that are using that signal will be triggered in the 
same cycle of the event loop. The current implementation uses a micro-task to trigger the effects. 
But that is an implementation detail. And it might change in the future. The effects are triggered 
batched and lazy. This means that if an effect uses multiple signals, it will only be triggered once. 
And it will be triggered after all the signals have been updated.

The problem Angular Signals solves is:
Adds the missing reactive primitive in Javascript.
Allows very fine-grained control over when and how the view is updated.
Enables future zone-less applications.
Bridge the gap between the imperative and reactive world.
Wherefor art thou Angular Signals?
Yeah, that doesn't sound right. But I can't think of a better title. In this part of the article, 
In this part I will list the things that didn't fit in the above 2 sections. A large part of me 
being really happy about this direction is that it will allow us to build a lot of stuff on top 
of it. And it will make the interop between all of concepts and programming paradigms a lot easier.

An example:

@Component({
  selector: 'sample',
  template: `
    <button #button>Click me</button>
    <div> {{ clickCount.value) }} </div>  
  `
})
class SampleComponent implements OnInit {
  @ViewChild('button') button: ElementRef;
  clickCount = signal(0);

  ngOnInit() {
    fromEvent(this.button.nativeElement, 'click')
      .pipe(
        map(() => this.clickCount.value += 1),        
      )
      .subscribe();
  }
}
// NOTE: see disclaimer at the top.
I know, I know, not cleaning up the subscribe. Not the point of the example. The point 
is that there is an observable stream, (clicks here, but it can be anything) that is 
being kept in sync with the view. Oh, look ma, no async pipe No *ngIf and no other constructs.

As the team saw this as a common case you can expect the following to be possible:

@Component({
  selector: 'sample',
  template: `
    <button #button>Click me</button>
    <div> {{ clickCount.value) }} </div>  
  `
})
class SampleComponent implements OnInit {
  @ViewChild('button') button: ElementRef;
  clickCount: Signal<number>;

  ngOnInit() {
    let count = 0; 
    const obs$ = fromEvent(this.button.nativeElement, 'click')
      .pipe(
        map(() => count += 1), // yes there should be some more intelligent code here!!!       
      )
    this.clickCount = signalFromObservable(obs$);
  }
}
// NOTE: see disclaimer at the top.
Again, the observable is not what it should be. Mixing imparitive and FRP in a bad way. 
It is only here to represent an observable stream, don't write code like this!

Notice how the .subscribe is gone? That is because the signalFromObservable function will 
take care of that for you. It will also take care of unsubscribing when the component is
 destroyed. And it will also take care of unsubscribing when the signal is no longer needed. 
Also a reminder, this is not the final API. This is just an example of what will be possible.

what else is possible?
Of course there will be an way to go the other way around. meaning you can create an observable 
from one (or more) signals. Right now, I don't really think that is very interesting. However, 
I have high hopes for the future. I can see things like life-cycle-hooks and inputs being signals.

Imagine this:

@Component({
  selector: 'some-component',
  template: `
    <div>
      {{ customer.value?.name }}
      {{ customer.value?.email }}
    </div>
  `
})
class SomeComponent {
  customerService = inject(CustomerService);
  /** 
   * think of this as a alternative to the @Input decorator. but then reactive.
   * I'm casting only for the example, this will be done automatically 
   */
  customerId = futureMagicalSignalFromInput('customerId',undefined) as signal<number | undefined>;

  // make a Observable stream from a signal
  customer$ = observableFromSignal(this.customerId) 
    .pipe(
      /** do Observable stuff here, driven from the above "@Input"  */
      switchMap(id => id ? this.customerService.getCustomer(id) : of(undefined))
    )

  /** 
   * Convert an observable stream into a signal. 
   * It doesn't add any value in this example, but think about viewModels, or
   * more complex and combined streams.
   * This takes care of the subscription and unsubscribing.
   * and it easily allow you to react to changes in the stream.
  */
  customer = signalFromObservable(this.customer$);
  
  // make a signal from a life-cycle hook
  destroy = futureMagicalSignalFromLifeCycleHook('destroy') ;
  
  // use the life-cycle hook signal to do something
  destroyEffect = effect(() => {
    if (this.destroy) {
      console.log('destroying the customer signal, while destroying the component');  
    }
  })
}
// NOTE: see disclaimer at the top.
This is a very contrived example. Let me be clear, I'm unaware of the team having plans 
around this. To me it makes a lot of sense adding those things once the signal is in the 
core. But that is just me. I'm sure the team has a lot of other ideas. And I'm sure they 
will be great.

learnability
Ok, this is one more concept to learn, so its a hit for learnability, right?. Well, not really. 
the API will be really simple, and even easier to grasp as promises. And it will be a lot easier 
to grasp than observables. Having this in the toolbox will help both sides. Both the nay, 
as well as the yay-sayers on observables will be able to use this (remember the 50-50 divide!). 
And that is a win for everyone. Right now ZoneJS is a black box. You can't really see what is 
going on. And that is a problem. With signals, you will be able to see what is going on. And 
that is a win for everyone.

computed values
In this article I have only been talking signals and effect. This is actually the bulk of the 
API. But there is more. There is also computed. This is actually both a signal and an effect. 
It is a signal that is driven by an effect. It is easier to show than to explain. 
So here is an example:

const counter = signal(0);
const double = computed(() => counter.value * 2);
const triple = computed(() => double.value * 3);
const pickOne = computed(() => counter.value %2 === 0 ? double.value : triple.value);

effect(() => {
  console.log(`counter: ${counter.value}`);
  console.log(`Result: ${pickOne.value}`);
});

counter.value = 10;

// NOTE: see disclaimer at the top.
Is this all?
No. There are more details to the whole API, and every part of it is worth looking into it.
 But that lies outside of the scope of this article. Feel free to contact me, and I will be
 happy to have an more in depth conversation about it.

Conclusion
Angular signals are all set to green for a bright future. They will be the foundation for a 
load of cool stuff, and will be the (now missing) grease between lots of things. Especially 
the interop between observables and signals will be a huge win. Dropping in and out of the 
reactive stream is where most problems are, and this will decrease the need for this dropping 
in and out. ZoneJS is wonderful, but at the same time, it can be an issue for performance in 
some cases. Reading the signal tells me that this is also something where by buying into them 
will make a huge difference.

Here I want to give thanks to the people that helped me improving the content of this article, 
by proofreading and giving feedback. And checking the facts and making sure I didn't make any
 mistakes. In no particular order:

