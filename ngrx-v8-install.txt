
store install:
---------------------------------------------------------------------------------------------------------------

ng add @ngrx/store --statePath store --stateInterface AppState -m app 
-----------------------------------------------------------------------------------------------------------------
Optional ng add flags

path - 		path to the module that you wish to add the import for the StoreModule to.

project - 	name of the project defined in your angular.json to help locating the module to add the StoreModule to.

module - 	name of file containing the module that you wish to add the import for the StoreModule to. 
		Can also include the relative path to the file. For example, src/app/app.module.ts;
		minimal - flag to only provide minimal setup for the root state management. 
		Only registers StoreModule.forRoot() in the provided module with an empty object, and default runtime checks.

statePath - 	The file path to create the state in. By default, this is reducers.

stateInterface 	The type literal of the defined interface for the state. By default, this is State.


store create:
-----------------------------------------------------------------------------------------------------------------------

ng generate store State --root --statePath store --stateInterface AppState -m app 



store-devtools
--------------------------------------------------------------------------------------------------------------------
install options

path		 path to the module that you wish to add the import for the StoreDevtoolsModule to.
project		 name of the project defined in your angular.json to help locating the module to add the StoreDevtoolsModule to.
module		 name of file containing the module that you wish to add the import for the StoreDevtoolsModule to. 
maxAge		(>1) | 0 - maximum allowed actions to be stored in the history tree. The oldest actions are removed once maxAge is reached. 
		It's critical for performance. 0 is infinite. Default is 25 for performance reasons.

ng add @ngrx/store-devtools



feature
-------------
create feature
-------------
ng generate feature user/User -r ../store/index.ts -c -api --spec false

options
----------------

Provide the project name where the feature files will be created.

--project

Alias: -p
Type: string
Use creator functions for actions, reducers, and effects.

--creators

Alias: -c
Type: boolean
Default: false
Nest the effects file within a folder based on the feature name.

--flat

Type: boolean
Default: true
Group the actions, effects and reducers files within their respective folders.

--group

Alias: -g
Type: boolean
Default: false
Provide the path to a file containing an Angular Module and the feature reducer will be added to its imports array using StoreModule.forFeature.

--module

Alias: -m
Type: string
Provide the path to a reducers file containing a state interface and a object map of action reducers. 
The generated feature interface will be imported added to the first defined interface within the file. 
The feature reducer will be imported and added to the first defined object with an ActionReducerMap type.

--reducers

Alias: -r
Type: string
Specifies if api success and failure actions, reducer, and effects should be generated as part of this feature.

--api

Alias: -a
Type: boolean
Default: false
Generate spec files associated with the feature files.

--spec

Type: boolean
Default: true





entity
--------
install entity
ng add @ngrx/entity


create entity
---------------
ng generate entity user/entity/User -r ../../store/index.ts -c -m user --spec false


effects
---------
install options:

path		 path to the module that you wish to add the import for the EffectsModule to.
flat		 Indicate if a directoy is to be created to hold your effects file
spec		 Specifies if a spec file is generated.
project		name of the project defined in your angular.json to help locating the module to add the EffectsModule to.
module		name of file containing the module that you wish to add the import for the EffectsModule to. 
minimal		Only provide minimal setup for the root effects setup. Only registers EffectsModule.forRoot() in the provided module with an empty array.
group		Group effects file within effects folder

ng add @ngrx/effects




store-devtools
---------------





ngrx
---
// install ngrx libs: store, effects, entities, router-store, dev-tools, schematics
ngrxi

// add store
ng add @ngrx/store

// add effects
ng add @ngrx/effects


// add entities
ng add @ngrx/entities

// add dev-tools
ng add @ngrx/store

// add dev-tools
ng add @ngrx/store-devtools

// add router-store
ng add @ngrx/router-store

// create auth module
ngma

// create normal module
ng g m [name] --routing --spec alse

// create eature
ng g feature auth/auth -a -c -m auth -r ../reducers/index.ts --spec false
