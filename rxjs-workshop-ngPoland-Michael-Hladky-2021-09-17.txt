ðŸ”µ 4 days of amazing knowledge with Michael Hladky
Dariusz Kalbarczyk <darek@ng-poland.pl>
Fr, 27.08.2021 11:04
Weitere Aktionen

Hey Hans,

In just 3 weeks, you have the chance to take part in an amazing 4-day workshop that will 
change your professional life forever!

Sep 14, 2021 - RxJS Expert Skills
Sep 15, 2021 - Advanced Reactive UI Patterns
Sep 16-17, 2021 - Performance at scale - High-speed applications on any device


Book your place at the workshop

RxJS Expert Skills

Sep 14, 2021
Itâ€™s time to take the next step. If you feel you are comfortable with RxJS and confident 
to solve common challenges in your applications, this workshop is a perfect fit! Push ;) 
your knowledge to the next level and learn to handle the tricky things.

Maintainable error handling and resilient data streams are a difficult but essential 
part of every vital application. The way we shape our state and the derived data streams 
is admittedly a matter of deep architecture knowledge, but also it involves dealing with 
the low-level problems of multicasting and shared state. 

In this session, we will come 
to understand how to solve those problems from the inside out, create our own operators 
that are beyond using the pipe method, and implement our learnings in a reusable way. 

As one of my favorite parts, we will reverse engineer Observables to have a clear picture 
of their lifecycle hooks and how to leverage all of them in code. 

To ensure we are safe 
from regressions, different testing approaches should be employed. Therefore, we will 
take a closer look at those and implement marble tests to cover teardown logic and avoid 
memory leaks over tests.

Agenda
A quick wrap-up on RxJS7
âœ” Improvements
âœ” Fixes
âœ” Future changes
Handling Errors without interruptions
âœ” Isolating error-prone code
âœ” Fully resilient error management
âœ” Connection to third-party error logging
Custom Operators
âœ” Limitations of using pipe
âœ” Leveraging the observable lifecycle hooks
âœ” Write a custom higher-order operator
Testing
âœ” The clutter of asynchronous tests
âœ” Testing with async helpers
âœ” Marble Testing
Multicasting
âœ” Subjects rewound
âœ” The misuse of share operators
âœ” Understanding RxJS7 connectable observables


Advanced Reactive UI Patterns
Sep 15, 2021
If you already know REDUX or reactive state management patterns and want to learn 
more about the internal architectural implementation details, this is the workshop 
you need to book. Local component state, flattening operators, contextual state and 
its display component templates â€“ this workshop will provide a solid foundation from 
which you can continue to develop these and many more advanced skills pushing your 
knowledge to the next level.

Agenda
We will learn:
âœ” Local vs. global state (when to us what)
âœ” Derived state (shared computations, distinct changes, and nullish values)
âœ” View vs. ViewModel
âœ” OOP Design Patterns and Component state (Facade, MVVM, MVC, Adapter)
âœ” Observable Inputs without decorators
âœ” Observable HostBindings
âœ” Managing async data streams with RxJS flattening operators
âœ” How to handle error, complete, suspense, and values in the template
âœ” Component lazy loading
âœ” Improving UX with Reusable reactive helpers (nonFlickerLoader)

If you already know REDUX or reactive state management patterns and want to learn 
more about the internal architectural implementation details, this is the workshop 
you need to book. We start off with some theory to deepen the understanding of global 
and local state, learn about common terms like model and viewmodel, and determine how 
to apply this knowledge in our Angular applications. Defining the state of your application 
can be a cumbersome task. Done wrong, it can potentially lead to utterly complex scenarios 
that harm the performance of your components. Learn how to effectively make use of state 
derivations and master communication with async APIs powered by RxJS flattening operators 
like exhaustMap. Efficiently reflecting a reactive state in the UI is key to providing 
exceptional user experiences. Yet, the task can easily be further complicated â€“ 
managing state coming from asynchronous APIs (e.g., websockets, Http results) in 
your UI adds a whole new layer of challenges to handle. In this workshop, we will 
focus on a practical approach to understanding and addressing this problem. To this end,
together we will examine the terms suspense, next, error and complete, and identify the 
different states that reactive data sources reflect in the UI. We will round up by 
enhancing your knowledge about the best practices around OOP design patterns.You will 
also learn how patterns like Adapter or MVVM can increase the scalability and maintainability 
of your Angular applications. [ In the end, you will be able to apply all the performance and 

scalability relevant software design patterns to your Angular applications. ]

Outcome
âœ” Local vs. global state (when to us what)
âœ” derived state (shared computations, distinct changes and nullish values)
âœ” View vs. ViewModel
âœ” OOP Design Patterns and Component state (Facade, MVVM, MVC, Adapter)
âœ” Observable Inputs without decorators
âœ” Observable HostBindings
âœ” Managing async data streams with RxJS flattening operators
âœ” How to handle error, complete, suspense, and values in the template
âœ” Component lazy loading
âœ” Improving UX with Reusable reactive helpers (nonFlickerLoader, focusManager, ..)



Performance at scale
Sep 16-17, 2021
The async pipe is boring! We will skip ChangeDetection OnPush & trackBy and jump straight to 
the guts of performance. Exciting exercises as well as deep knowledge is core of this training.

Angular has known performance bottlenecks. Especially in larger applications. Even if there is 
information in the web on how to improve performance, mostly the knowledge in around change 
detection strategy OnPush and async pipe. This for sure is only a tiny fraction of what's possible. 
Ready to learn more?

The web was never more exciting! But also never as demanding to our devices and infrastructure 
as today. Our Browsers ship new features and languages get updates only the squeeze out the 
last bit of performance we can get. The problem here, there are no real resources out there 
that show us how to apply those techniques in practice. Especially when it comes to framework 
specific questions. This Workshop will boost your knowledge and goes way beyond the basics. 
The async pipe is boring! We will skip ChangeDetection OnPush & trackBy and jump straight to 
the guts of performance. Exciting exercises as well as deep knowledge is core of this training. 
In the end you will go home with lots of exercises and you will be impressed by how much faster 
your application can get.

Together we will have a close look on how a auditing process looks like. We will have a spin on 
the brand new Angular Performance DevTools, and also compare them with the original ChromeDevTools. 
You will get feedback, and we discuss and point out improvements on your approach. Furthermore we
 will run a live sample audit based on our expert knowledge applied to your software in the given 
environment. The outcome should be well documented first findings and a general overview of 
performance related issues.

Agenda
Content:
âœ” How to record and analyze flame charts
âœ” How to document performance issues and measure improvements
âœ” How to detect performance bottlenecks
âœ” MASTER EXERCISE - Analyze and fix performance bugs
âœ” Hands down with Angularâ€™s brand new DevTools
âœ” Analyze memory usage and active event listeners
âœ” Blocking tasks and how to spot scripting bottle necks
âœ” Network analysis and improvement strategies

Training:
In a series of small presentations & exercises we will introduce the fundamental 
knowledge on change detection and other related performance topics. Low level 
Browser knowledge will help us to fix even the hardest bug and modern APIs push 
render optimizations to the Browser itself. A Q&A session as well as feedback on 
your specific questions will align with performance best practices and identify 
the critical path for improving your application.

Content:
âœ” ChangeDetection
âœ” Change detection strategies & IVY features
âœ” detectChanges vs markForCheck
âœ” zone.js & NgZone
âœ” MASTER EXERCISE - Refactoring an application to go fully zone-less
âœ” ChangeDetection profiling
âœ” Subscription handling & memory leaks
âœ” Performance Component architecture
âœ” Best & Bad performance practices of DOM Structure and css rendering
âœ” Runtime performance of scripting, rendering and painting
âœ” MASTER EXERCISE - Refactoring an application by leverage browse native features

Engineering:
Prepare your demos!! We will go hands on with your application. Together with the trainer
 you will review and analyze parts of your application. You will get valuable feedback to 
your specific implementations.

Content:
âœ” Applied knowledge and topics identified during auditing & training
âœ” Mini code review checklist
âœ” Strategies to improve your architecture
âœ” Code Quality and CI setup review
âœ” OPEN END - Q&A


Book your place at the workshop



Best regards

Dariusz Kalbarczyk
+48 664 931 800
https://workshopfest.dev
https://angularmaster.dev
https://ng-poland.pl
https://js-poland.pl









NG-POLAND

Klimczaka, 10F/4, Warszawa
Poland

You received this email because you signed up on our website or made a purchase from us.

Unsubscribe
BUILT WITH	MailerLite
