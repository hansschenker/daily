he touch-action property in CSS gives you control over the effect of 
touchscreen interactions with an element, similar to the more 
widely-used pointer-events property used to control mouse interactions. ... By default,
 a browser will handle touch interactions automatically: 
Pinch to zoom, swipe to scroll, etc.02.

var hammertime = new Hammer(myElement, myOptions);
hammertime.on('pan', function(ev) {
	console.log(ev);
});

Enabling vertical or all directions for the pan and swipe recognizers:

hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });
hammertime.get('swipe').set({ direction: Hammer.DIRECTION_VERTICAL })

A viewport represents the area in computer graphics being currently viewed. 
In web browser terms, it is generally the same as the browser window, excluding the UI, menu bar, etc. 
That is, the part of the document you are viewing.

The size of the viewport depends on the size of the screen

On larger monitors where applications aren't necessarily full screen, the viewport is the size of the browser window.
On most mobile devices and when the browser is in fullscreen mode, the viewport is the entire screen.
In fullscreen mode, the viewport is the device screen, the window is the browser window, 
which can be as big as the viewport or smaller, and the document is the website, which can be much taller or wider than the viewport.
To recap, the viewport is basically the part of the document that is currently visible.

The document element's Element.clientWidth is the inner width of a document in CSS pixels, 
------------------------------------------------------------------------------------------
including padding (but not borders, margins, or vertical scrollbars, if present). This is the viewport width.
The Window.innerWidth is the width, in CSS pixels, of the browser window viewport including, if rendered, the vertical scrollbar.
The Window.outerWidth is the width of the outside of the browser window including all the window chrome.

The area within the innerHeight and innerWidth is generally considered the layout viewport. 
The browser chrome is not considered part of the viewport.

Size Content to The Viewport
-------------------------------
Users are used to scroll websites vertically on both desktop and mobile devices - but not horizontally!

So, if the user is forced to scroll horizontally, or zoom out, to see the whole web page it results in a poor user experience.

Some additional rules to follow:
---------------------------------
1. Do NOT use large fixed width elements - For example, if an image is displayed at a width wider than the viewport 
it can cause the viewport to scroll horizontally. Remember to adjust this content to fit within the width of the viewport.

2. Do NOT let the content rely on a particular viewport width to render well - Since screen dimensions and width 
in CSS pixels vary widely between devices, content should not rely on a particular viewport width to render well.

3. Use CSS media queries to apply different styling for small and large screens - Setting large absolute 
CSS widths for page elements will cause the element to be too wide for the viewport on a smaller device.
Instead, consider using relative width values, such as width: 100%. Also, be careful of using large 
absolute positioning values. It may cause the element to fall outside the viewport on small devices.

Hammer.Swipe(options)
Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.

Option	Default	Description
event	swipe	Name of the event.

pointers	1	Required pointers.
threshold	10	Minimal distance required before recognizing.
direction	DIRECTION_ALL	Direction of the panning.
velocity	0.3	Minimal velocity required before recognizing, unit is in px per ms.
Events
swipe, together with all of below

swipeleft
swiperight
swipeup
swipedown

Notes
When calling Hammer() to create a simple instance, the pan and swipe recognizers are configured to only detect horizontal gestures.


Git Commit Guidelines
---------------------
We have very precise rules over how our git commit messages can be formatted. This leads to more 
readable messages that are easy to follow when looking through the project history.
But also, we use the git commit messages to generate the AngularJS change log.

Commit Message Format
Each commit message consists of a header, a body and a footer. The header has a special 
format that includes a type, a scope and a subject:

<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
The header is mandatory and the scope of the header is optional.

Any line of the commit message cannot be longer 100 characters! This allows the message 
to be easier to read on GitHub as well as in various git tools.

Revert
If the commit reverts a previous commit, it should begin with revert: , followed by the header 
of the reverted commit. In the body it should say: This reverts commit <hash>., 
where the hash is the SHA of the commit being reverted.

Type
Must be one of the following:

feat: A new feature
fix: A bug fix
docs: Documentation only changes
style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
refactor: A code change that neither fixes a bug nor adds a feature
perf: A code change that improves performance
test: Adding missing tests
chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
Scope
The scope could be anything specifying place of the commit change. For example $location, 
$browser, $compile, $rootScope, ngHref, ngClick, ngView, etc...

Subject
The subject contains succinct description of the change:

use the imperative, present tense: "change" not "changed" nor "changes"
don't capitalize first letter
no dot (.) at the end
Body
Just as in the subject, use the imperative, present tense: "change" not "changed" nor "changes". 
The body should include the motivation for the change and contrast this with previous behavior.

Footer
The footer should contain any information about Breaking Changes and is also the place 
to reference GitHub issues that this commit Closes.

Breaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. 
The rest of the commit message is then used for this.

A detailed explanation can be found in this document.


