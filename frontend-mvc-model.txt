The whole purpose of a user interface is to allow a user to manipulate data on 
a computer

- model: This data is the **model** (state in form of an address)
  The main point is that the data in the model may change over time
  where you register callback functions to be called whenever a change happens

- view: the user has to see a representation of the data on the (see address)
  computer screen; this is the **view**

- controller: actively change it. (press keys on his keyboard to change the address
  He does so by operating a **controller**

- widget: *Widgets** embody  (component: view and controller closely related)
  this combination of controller and view
  smart component: with data
  representational: only displaying


From an implementation point of view, the concepts of model, controller and view are *relative* notions, they 
depend on your level of abstraction. 
- a city map with scrollbars will be perceived mainly as a view by the user, 
- but it actually consists of a model (rectangle displayed), a controller (scrollbars) and a view (showing 
  the partial map). 

In turn, the scrollbar itself consists of 
- a model (position), 
- a controller (responds to mous drags) and 
- a view (position indicator). 

In other words, the MVC concepts can be nested arbitrarily. 
Moving up and down the abstraction ladder, we can easily create rich widgets by combining simple ones

FRP vs MVC
--------------------
The core idea of FRP is to use abstract data types that already include a notion of time. There are several 
different variations on this theme; in Threepenny, we will use the FRP variant laid out in the [reactive-banana 
library][reactive-banana]. It consists of two core types, the **Behavior** and the **Event**.

Behavior (attach time to a value) - State Change - State Transition over time
-------------------------------------------------------
A Behavior is simply a *value that varies in time*. 

You can think of it as a function that maps each moment in time to the corresponding value.
    type Behavior a = Time -> a

An Event is a sequence of *event occurrences*. Think of it as an (infinite) list of occurrences, which are pairs: 
the first component indicates when the occurrences happens and the second component is a value tagged to this 
occurrence.
    type Event    a = [(Time,a)]
The following figures illustrate the meaning of these types. 
![](img/frp-behavior.png)
![](img/frp-event.png)

Behavior: Value changing over time
---------------------------------------------------------
In words, a Behavior is like a continuously varying value, 
- say the position of a ball that is being thrown by a basketball player, 
  while an Event is a sequence of occurrences, 
 for instance keeping track of whenever said ball falls through the basket.

Combinators
---------------------------------------------------------
Several combinators allow us to make new Behaviors and Events from old ones, thus giving us a new way to program 
with time-dependent data. Unfortunately, a detailed explanation of FRP is out of scope for this document, [see 
elsewhere][reactive-banana-slides] for a more thorough introduction.

FRP in an imperative language? 
------------------------------
- Behavior and Event is that their implementations perform update notification internally. 
- for a programming language that does not support FRP as actual data types, 
  it is still very useful  to use **FRP as a concept** for thinking about your code. 

For instance, in an imperative language
-----------------------------------------
- Behavior roughly corresponds to a read-only variable (with built-in change notification), while 
- an Event is an object where you can register event listeners.

In fact, using FRP is completely optional when programming with the Threepenny library. You can view the type 
`Event` as a means to register event handlers and `Behavior` as a read-only variable.

Whether you use FRP as actual data types or as a concept only, the key **advantage** of FRP is the syntactic style 
it encourages:
> Programming in the style of functional reactive programming means to 
- specify the dynamic behavior of a value completely at the time of declaration.
 
Counter imperative style - at the time of declaration, only the initial value for the counter is specified
-----------------------------------------------------------------------------------------------------------
- counter: two buttons labelled “Up” and “Down” which can be used to 
  - increment or 
  - decrement the counter. 
    Imperatively, you would first specify an initial value and then change it 
    whenever a button is pressed; something like this:
    counter := 0                               -- initial value 
    on buttonUp   = (counter := counter + 1)   -- change it later 
    on buttonDown = (counter := counter - 1)

- The point is that at the time of declaration, only the initial value for the counter is specified; 
- the dynamic behavior of counter is implicit in the rest of the program text. 
   A remote part of the program may change the counter, and 
   this "action at a distance" is not visible at the point where the counter is declared.


Functional Reactive Programming Style - FRP specifies the whole dynamic behavior at the time of declaration
------------------------------------------------------------------------------------------------------------
In contrast, FRP specifies the whole dynamic behavior at the time of declaration, like this: 
    counter :: Behavior Int
    counter = accumulate ($) 0 
                (fmap (+1) eventUp
                 `union` fmap (subtract 1) eventDown)

Now, it is no longer possible for a remote part of the program to change the counter; 
the only way to influence the counter is to do so at declaration time. 

----------------------------------------------------------------------------------------------------
This is the key property of FRP that helps you simplify your code, and it 
is worth keeping in mind whenever you program with FRP.
------------------------------------------------------------------------------------------------------
  [reactive-banana-slides]: http://apfelmus.nfshost.com/blog/2012/07/15-frp-tutorial-slides.html 
  [reactive-threepenny]: ../src/Reactive/Threepenny.hs


Three Principles for Representing MVC Concepts with FRP 
------------------------------------------------------- 


1. The **Model** is represented by a continuous time-varying value, i.e. a **Behavior**. 
-------------------------------------------------------------------------------------------------------

Behaviors do change notification under the hood, this is transparent to the programmer. The contents of a view 
should **only** depend on the present (and past) values of the model, and **not** on how often the model has
"changed internally". This eliminates a large source of potential errors and helps you keep your code clean.

2. Only the **user** may trigger **controller** **Events**. 
-----------------------------------------------------------------------------------------------------------
- a programmatic change to the model never leads to the widget emitting an event. 
- user input will usually lead to events being triggered. 
  user input is represented in terms of Events only. 

This is in line with the first principle and helps you to cleanly separate between updates that the 
model *still needs* to incorporate, and updates that the model *already has* incorporated.

3. Often, there is the issue of **feedback cycles**: the user makes a change to the widget, which is propagated to 
-------------------------------------------------------------------------------------------------------------
the model, which in turn changes the view contents of the widget and may heavily interfere with the user's editing 
operations. The solution is to use a **temporary copy**: as long as the user manipulates the widget, the view 
contents may diverge from the model, so he is essentially manipulating a copy of the data represented by the 
widget, instead of the data taken from the model

