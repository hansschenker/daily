in maschine language data and code are the same, 0 and 1

A type is a classification of data that defines 
- the operations that can be done on that data, 
- the meaning of the data, 
- and the set of allowed values.

Typing is checked by the compiler and/or run time 
to ensure the integrity of the data

A type system is a set of rules that assigns 
and enforces types to elements of a programming language

These elements can be variables, functions, 
and other higher-level constructs

They allow various conversions between types and disallow others. 

type checking ensures that the rules 
of the type system are respected by the program. 

close connection between logic and type theory. 
It shows that we can view a type as a logic proposition, 
and a function from one type to another as a logic implication. 
A value of a type is equivalent to evidence that the proposition is true

The close relationship between logic and type theory shows that a program 
that respects the type system rules is equivalent to a logic proof.

the type system is the language in which we write these proofs

The main benefits of typing are 
- correctness, 
- immutability, 
- encapsulation, 
- composability, and 
- readability

These features counterbalance the entropy that inevitably tries to creep into the system


