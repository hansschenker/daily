I want you to act as an expert in <topic>. You have all the information about anything to do
with <topic>. I will ask you questions about different topics within <topic> and you will
provide me with clear, concise, and accurate information. Ensure that you only respond back
with answers that you are fully confident in. Please limit your responses to specific
information requested and avoid providing unnecessary details.

Generate a table with 5 [concise] research question options that incorporate relev

ant
academic keywords for a paper focusing on [Your Research Topic]. Each question should be
fewer than 100 characters in length and align with the overarching theme of '[Your Research
Topic].' Add a column to display the 5 corresponding abstracts, which must also include the
same academic keywords and a research hypothesis

use flipped interaction technique when you are tired

I would like you to ask me questions to help me diagnose a problem with my Internet. Ask
me questions until you have enough information to identify the two most likely causes. Ask
me one question at a time. Ask me the first question.

I would like you to ask me questions to help me create variations of my marketing materials.
You should ask questions until you have sufficient information about my current draft
messages, audience, and goals. Ask me the first question.

ask ChatGPT to write the prompt

From now on, whenever I ask a question, suggest a better version of the question and ask me
if I would like to use it instead

ask ChatGPT to be critical

For every prompt I give you, If there are alternative ways to word a prompt that I give you, list
the best alternate wordings. Compare the pros and cons of each wording.

ask ChatGPT for alternatives

For anything that I ask you to write, determine the underlying problem that I am trying to
solve and how I am trying to solve it. List at least one alternative approach to solve the
problem and compare / contrast the approach with the original approach implied by my
request to you.

ask ChatGPT to give you the best idea out of a list

Out of the X titles, which one would you choose?
Rewrite [5] variants and convince me why these are
better.

ask ChatGPT to respond in Markdown

Write the key points of a lecture on cognitive psychology using Markdown

ask ChatGPT in XML tag style

Absolutely! If the user is a software engineer ooking to interact with ChatGPT for specific
tasks or queries, an XML-based template might look something like this:
xml
Copy code
<ChatGPTInteraction>
<!-- User Information -- >
<UserInfo>
<Name>Your Name Here</Name>
<Role>Software Engineer</Role>
<ProjectType>Web Development, Data Science, AI, etc .< /ProjectType>
</UserInfo>
<!-- Technical Queries -- >
<TechQueries>
<Query>
<Text>Your Coding Problem Here</Text>
<Language>Python, JavaScript, etc .< /Language>
<DesiredFormat>Code Snippet, Explanation, Steps, etc .< /DesiredFormat>
</Query>

This template is tailored for software engineers and covers the different kinds of technical
queries they might have. It also allows for customization in terms of programming
languages, frameworks, and coding style preferences. The structured nature of this XML
document makes it easier to generate highly relevant and context-aware responses.

ask ChatGPT as Professor Synaps

Act as Professor Synapse., a conductor of expert agents. Your job is to support the user in
accomplishing their goals by aligning with their goals and preference, then calling upon an
expert agent perfectly suited to the task by initializing "Synapse_COR"= "$(emoji}: I am an
expert in $(role}. I know $(context}. I will reason step-by-step to determine the best course
of action to achieve ${goal). I can use $(tools} to help in this process
I will help you accomplish your goal by following these steps:
${reasoned steps}
My task ends when ${completion}.
${first step, question}."
Follow these steps:
1. , Start each interaction by gathering context, relevant information and clarifying the
user's goals by asking them questions
2. Once user has confirmed, initialize "Synapse_CoR"
3. and the expert agent, support the user until the goal is accomplished

/start
Greetings, I am Professor Synapse., the conductor of expert agents! I'm here to help you
accomplish your goals by aligning with your needs and preferences, then connecting you to
the best-suited expert agent for your task.
First things first, could you please provide more context about thefgoal you want to achieve?
Is it related to creating educational content, developing Al tools, or something else entirely?

Fantastic! Creating clear and effective prompts for ChatGPT is a skill that can vastly improve p
your interactions with the model. Let's start by clarifying your specific goals:
1. Are you looking to create prompts for a particular purpose, such as education, research, or
content creation?
2. What level of complexity are you aiming for in the responses (e.g., beginner, intermediate,
advanced)?
3. Are there any technical or stylistic preferences you'd like to incorporate (e.g., Markdown,
XML, etc.)?
Once we've dialed into your needs, l'll initiate a Synapse_CoR with the most suitable expert
agent to guide you through the process.
What's the main purpose of the prompts you want to create?

Synapse_CoR=": I am an expert in educational content and developer tools. I know the
ins and outs of how ChatGPT functions and how to make the most of its capabilities. My goal
is to help you create clear and effective prompts for educational purposes that focus on
helping developers use ChatGPT more efficiently. I can use Markdown, XML, and other
technical aspects to enhance the prompts.
I will help you accomplish your goal by following these steps:
1. Analyze common questions or tasks that developers often have when using ChatGPT.
2. Design a set of sample prompts that address these common needs.
3. Review and refine the prompts for clarity, efficiency, and educational value.
4. Test the prompts to ensure they yield desired responses.
5. Compile the final list of prompts along with usage instructions.
My task ends when you have a set of educational prompts that are ready to be shared with
developers.

Understanding that the primary concern for developers is to improve their code quality,
we can focus on generating prompts that guide developers toward that goal. Prompts can
range from debugging help, best practices, code review, to optimization techniques.
I will help you accomplish your goal by following these steps:
1. Compile a list of common coding challenges that developers seek to improve (e.g.,
debugging, optimization, architecture).
2. Create specific prompts that offer solutions or insights into these challenges.
3. Implement and test these prompts to ensure they bring value in terms of code
improvement.
1. Iterate based on feedback and real-world applicability.
5. Compile and document the finalized list of prompts.
My task ends when you are satisfied with a list of effective, educational prompts tailored for
developers aiming to improve their code.

ask ChatGPT with good ajectives

How to be more persuasive
"Rewrite my text with powerful, convincing language that will
leave my readers no choice but to take action."

How to be more persuasive
"Rewrite my text with powerful, convincing language that will
leave my readers no choice but to take action."
Make your text sound more informative
"Rewrite my text with rich, informative details that will leave
my readers feeling educated and informed."

More humorous
"Rewrite my text with clever, comedic touches that will leave
my readers laughing and entertained."
More action-oriented
"Rewrite my text with urgent, action-oriented language that will
inspire my readers to take immediate action."

ask ChatGPT to respond in a Tree of Thoughts

Tree of Thoughts
Keywords:
1. Node = state in the problem solving process
2. Thought = decisions or steps the LM generates to solve the
problem
3. Backtracking = LM can go back to a previous node and try
a different thought
4. Answer = combination of thought generation, state
evaluation, and search algorithm

Three experts with exceptional logical thinking skills are collaboratively answering a
question using a tree of thoughts method. Each exprt will share their thought process in
detail, taking into account the previous thoughts of others and admitting any errors. They
will iteratively refine and expand upon each other's ideas, giving credit where it's due. The
process continues until a conclusive answer is found. Organize the entire response in a
markdown table format. The question is: "Tom washed 10 pairs of socks. The socks are now
wet from the wash, so Tom hangs the 10 pairs of socks outside to dry. 10 hours later, he
comes back outside to check on the socks. He feels eah sock and notices they are all dry. He
takes them back inside because they are all dry. How long will it take Tom to dry 7 pairs of
socks?

Expert
A
Corrections
Corrected by
User and Expert
Thoughts
Initial thought
B
B
None
Correcting A's
thought
C
Thought Process
If it took 10 hours for 10 pairs of socks to dry,
then on average it took 1 hour for each pair to
dry. Therefore, 7 pairs should take 7 hours.
Expert A's logic on the rate is incorrect if we
consider that all pairs are drying at the same
time. If that's the case, then 7 pairs should also
dry in 1 hour.
Expert B's adjustment is valid. If all 7 pairs are
drying simultaneously under the same
conditions, then indeed, it should take 1 hour for
7 pairs to dry.
None
Agreeing with
B's correction

use Tree of Thoughts in a use case

Imagine that you are a senior software engineer at a large tech company. You are leading a
team of developers who are building a new social media platform.
What are the key fechnical challenges that you need to address? Answer using the
technique Tree of Thoughts
Absolutely! Building a new social media platform is a multi-faceted endeavor with several
key technical challenges. Let's break them down:
Challenge 1: Scalability
. Sub-challenge 1.1: Database Architecture
· We need to decide between SQL or NoSQL depending on our data structure and queries.
. Sub-challenge 1.2: Load Balancing
· Distributing incoming network traffic across multiple servers to ensure no single server
is overwhelmed.
Challenge 2: User Experience

matt hummer solution to prompt engineering on github: https://github.com/mshumer/gpt-prompt-engineer

Prompt Generation: Using GPT-4 and GPT-3.5-Turbo, gpt-prompt-engineer can generate a variety of possible prompts based on a provided use-case and test cases.

Prompt Testing: The real magic happens after the generation. The system tests each prompt against all the test cases, comparing their performance and ranking them using an ELO rating system.

Screen Shot 2023-07-04 at 11 41 54 AM
ELO Rating System: Each prompt starts with an ELO rating of 1200. As they compete against each other in generating responses to the test cases, their ELO ratings change based on their performance. This way, you can easily see which prompts are the most effective.

Classification Version: The gpt-prompt-engineer -- Classification Version notebook is designed to handle classification tasks. It evaluates the correctness of a test case by matching it to the expected output ('true' or 'false') and provides a table with scores for each prompt.

Screen Shot 2023-07-10 at 5 22 24 PM
Weights & Biases Logging: Optional logging to Weights & Biases of your configs such as temperature and max tokens, the system and user prompts for each part, the test cases used and the final ranked ELO rating for each candidate prompt. Set use_wandb to True to use.

Portkey: Optional tool to log and trace all the prompt chains and their responses. Set use_portkey to True to use.

Setup
Open the notebook in Google Colab or in a local Jupyter notebook. For classification, use this one.

Add your OpenAI API key to the line openai.api_key = "ADD YOUR KEY HERE".

If you have GPT-4 access, you're ready to move on. If not, change CANDIDATE_MODEL='gpt-4' to CANDIDATE_MODEL='gpt-3.5-turbo'. If you're using the classification version, and don't have GPT-4 access, change model='gpt-4' in the second cell to model='gpt-3.5-turbo'.

How to Use
Define your use-case and test cases. The use-case is a description of what you want the AI to do. Test cases are specific prompts that you would like the AI to respond to. For example:
description = "Given a prompt, generate a landing page headline." # this style of description tends to work well

test_cases = [
    {
        'prompt': 'Promoting an innovative new fitness app, Smartly',
    },
    {
        'prompt': 'Why a vegan diet is beneficial for your health',
    },
    {
        'prompt': 'Introducing a new online course on digital marketing',
    },
    {
        'prompt': 'Launching a new line of eco-friendly clothing',
    },
    {
        'prompt': 'Promoting a new travel blog focusing on budget travel',
    },
    {
        'prompt': 'Advertising a new software for efficient project management',
    },
    {
        'prompt': 'Introducing a new book on mastering Python programming',
    },
    {
        'prompt': 'Promoting a new online platform for learning languages',
    },
    {
        'prompt': 'Advertising a new service for personalized meal plans',
    },
    {
        'prompt': 'Launching a new app for mental health and mindfulness',
    }
]
For the classification version, your test cases should be in the format:

test_cases = [
    {
        'prompt': 'I had a great day!',
        'output': 'true'
    },
    {
        'prompt': 'I am feeling gloomy.',
        'output': 'false'
    },
    // add more test cases here
]
Choose how many prompts to generate. Keep in mind, this can get expensive if you generate many prompts. 10 is a good starting point.

Call generate_optimal_prompt(description, test_cases, number_of_prompts) to generate a list of potential prompts, and test and rate their performance. For the classification version, just run the last cell.

The final ELO ratings will be printed in a table, sorted in descending order. The higher the rating, the better the prompt.

Screen Shot 2023-07-04 at 11 48 45 AM
For the classification version, the scores for each prompt will be printed in a table (see the image above).

Contributions are welcome! Some ideas:
have a number of different system prompt generators that create different styles of prompts, to cover more ground (ex. examples, verbose, short, markdown, etc.)
automatically generate the test cases
expand the classification version to support more than two classes using tiktoken
License
