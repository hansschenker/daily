RxJS is a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type, the Observable, satellite types (Observer, Schedulers, Subjects) and operators inspired by Array methods (map, filter, reduce, every, etc) to allow handling asynchronous events as collections.

Think of RxJS as Lodash for events.

ReactiveX combines the Observer pattern with the Iterator pattern and functional programming with collections to fill the need for an ideal way of managing sequences of events.

The essential concepts in RxJS which solve async event management are:

Observable: 
represents the idea of an invokable collection of future values or events.

Observer: 
is a collection of callbacks that knows how to listen to values delivered by the Observable.

Subscription: 
represents the execution of an Observable, is primarily useful for cancelling the execution.

Operators: 
are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.

Subject: 
is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.

Schedulers: are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others.

Observables
------------
Observable
Observables are lazy Push collections of multiple values. They fill the missing spot in the following table:

	SINGLE		MULTIPLE
--------------------------------
Pull	Function	Iterator
Push	Promise		Observable

Pull versus Push
----------------
Pull and Push are two different protocols that describe how a data Producer can communicate with a data Consumer.

What is Pull? 
--------------
In Pull systems, the Consumer determines when it receives data from the data Producer. The Producer itself is unaware of when the data will be delivered to the Consumer.

Every JavaScript Function is a Pull system. The function is a Producer of data, and the code that calls the function is consuming it by "pulling" out a single return value from its call.

ES2015 introduced generator functions and iterators (function*), another type of 

Pull system. 
---------------
Code that calls iterator.next() is the Consumer, "pulling" out multiple values from the iterator (the Producer).

		PRODUCER				CONSUMER
----------------------------------------------------------------------------------------------
Pull		Passive: produces data when requested.	Active: decides when data is requested.

Push		Active: produces data at its own pace.	Passive: reacts to received data.

What is Push? 
--------------
In Push systems, the Producer determines when to send data to the Consumer. The Consumer is unaware of when it will receive that data.

Promises are the most common type of Push system in JavaScript today. A Promise (the Producer) delivers a resolved value to registered callbacks (the Consumers), but unlike functions, it is the Promise which is in charge of determining precisely when that value is "pushed" to the callbacks.

RxJS introduces Observables, a new Push system for JavaScript. An Observable is a Producer of multiple values, "pushing" them to Observers (Consumers).

A Function is a lazily evaluated computation that synchronously returns a single value on invocation.
A generator is a lazily evaluated computation that synchronously returns zero to (potentially) infinite values on iteration.
A Promise is a computation that may (or may not) eventually return a single value.
An Observable is a lazily evaluated computation that can synchronously or asynchronously return zero to (potentially) infinite values from the time it's invoked onwards.

Observables as generalizations of functions
-------------------------------------------

Contrary to popular claims, Observables are not like EventEmitters nor are they like Promises for multiple values. 
Observables may act like EventEmitters in some cases, namely when they are multicasted using RxJS Subjects, 
but usually they don't act like EventEmitters.

Observables encapsulate a data source which acts as a data producer which emits the data over time
with the help of an scheduler (virtual timer). An Observable is an arraylike structue with a virtual timer (scheduler) attached to it.

A subscription to an Observable create a direct connection from a consumer (observer) to the producer (observable).

Observables are able to deliver values either synchronously or asynchronously.


Anatomy of an Observable
Observables are created using new Observable or a creation operator, are subscribed to with an Observer, execute to deliver next / error / complete notifications to the Observer, and their execution may be disposed. These four aspects are all encoded in an Observable instance, but some of these aspects are related to other types, like Observer and Subscription.

Core Observable concerns:

Creating Observables
Subscribing to Observables
Executing the Observable
Disposing Observables
Creating Observables
The Observable constructor takes one argument: the subscribe function.

The following example creates an Observable to emit the string 'hi' every second to a subscriber.

Observables can be created with new Observable. Most commonly, observables are created using creation functions, like of, from, interval, etc

Subscribing to Observables
The Observable observable in the example can be subscribed to, like this:

content_copyopen_in_new
observable.subscribe((x) => console.log(x));
It is not a coincidence that observable.subscribe and subscribe in new Observable(function subscribe(subscriber) {...}) have the same name. In the library, they are different, but for practical purposes you can consider them conceptually equal.

This shows how subscribe calls are not shared among multiple Observers of the same Observable. When calling observable.subscribe with an Observer, the function subscribe in new Observable(function subscribe(subscriber) {...}) is run for that given subscriber. Each call to observable.subscribe triggers its own independent setup for that given subscriber.

Subscribing to an Observable is like calling a function, providing callbacks where the data will be delivered to.

This is drastically different to event handler APIs like addEventListener / removeEventListener. With observable.subscribe, the given Observer is not registered as a listener in the Observable. The Observable does not even maintain a list of attached Observers.

A subscribe call is simply a way to start an "Observable execution" and deliver values or events to an Observer of that execution.

Executing Observables
The code inside new Observable(function subscribe(subscriber) {...}) represents an "Observable execution", a lazy computation that only happens for each Observer that subscribes. The execution produces multiple values over time, either synchronously or asynchronously.

There are three types of values an Observable Execution can deliver:

"Next" notification: sends a value such as a Number, a String, an Object, etc.
"Error" notification: sends a JavaScript Error or exception.
"Complete" notification: does not send a value.
"Next" notifications are the most important and most common type: they represent actual data being delivered to a subscriber. "Error" and "Complete" notifications may happen only once during the Observable Execution, and there can only be either one of them.

These constraints are expressed best in the so-called Observable Grammar or Contract, written as a regular expression:

content_copyopen_in_new
next*(error|complete)?
In an Observable Execution, zero to infinite Next notifications may be delivered. If either an Error or Complete notification is delivered, then nothing else can be delivered afterwards.

Disposing Observable Executions
Because Observable Executions may be infinite, and it's common for an Observer to want to abort execution in finite time, we need an API for canceling an execution. Since each execution is exclusive to one Observer only, once the Observer is done receiving values, it has to have a way to stop the execution, in order to avoid wasting computation power or memory resources.

When observable.subscribe is called, the Observer gets attached to the newly created Observable execution. This call also returns an object, the Subscription:

content_copyopen_in_new
const subscription = observable.subscribe((x) => console.log(x));
The Subscription represents the ongoing execution, and has a minimal API which allows you to cancel that execution. Read more about the Subscription type here

When you subscribe, you get back a Subscription, which represents the ongoing execution. Just call unsubscribe() to cancel the execution.

Each Observable must define how to dispose resources of that execution when we create the Observable using create(). You can do that by returning a custom unsubscribe function from within function subscribe().

For instance, this is how we clear an interval execution set with setInterval:

The reason why we use Rx types like Observable, Observer, and Subscription is to get safety (such as the Observable Contract) and composability with Operators.





