Angular Templates
-------------------

Angular is rendering with 	- Templates
-------------------------------------------
- templates are pure HTML, and hence are constrained, 
- tools can make smart assumptions about what components are and how they behave, and 
- Angular can do with them.
- give us is a clear boundary separating the view layer from the the framework
- framework can have multiple implementations of the template compiler optimized for different use cases (e.g., mobile vs desktop).
- Templating languages are different. They just define the structure of the view and have a limited set of well-defined side effects
- clear separation of the dynamic and static parts of the view.
- Angular knows that only expressions can cause changes in the DOM
- So after the initial rendering is done, the static markup is essentially free
- lot of people are already proficient with HTML and CSS, and they can leverage this knowledge to write html templates
- there is a rich set of tools around these technologies, and being able to use them when building applications is a huge plus
- to separate data from the presentation. 
  view - data bindings - data


  Directive/Component Input: with Property Bindings and Directive/Component Output with Event Bindings
------------------------------------------------------------------------------------------------------
- Input and output properties are the public API of a directive
- Data flows into a directive via its inputs 	- We can update input properties using property bindings
						  The component declares that it has an input property named “talk” and an output property “rate”. 
						  Only the input properties of a component can be updated using property bindings. 
					 	  This separates the input of the component from its internal state

- Data flows out via its outputs		- And we can subscribe to output properties using event bindings
						  Angular uses the Rx style of programming to deal with events. 
						  EventEmitter is an implementation of both the observable and observer interfaces. 
						  So we can use it to fire events, and Angular can use it to listen to events.

Interpolation
<div>Rating {{rating}}</div>
is just sugar for

<div [textContent]="interpolate(['Rating'], [rating])"></div>

Passing Constants
<input md-input formControlName="title">
is just sugar for

<input md-input [formControlName]=" 'title' ">

References
It is not uncommon to have two components that have to talk to each other. 
To enable that Angular supports defining references in the template.

<confirmation-dialog #dialog></confirmation-dialog> 
<button (click)="dialog.open()">Open</button>
The references get hoisted, so their order does not matter.

Templates and *
Angular treats template elements in a special way. 
-----------------------
Angular View - is a chunk of DOM angular can manipulate dynamically - a template coming to live with the help of data binding
------------------------
They are used to create views, chunks of DOM you can dynamically manipulate. 
The * syntax is a shortcut that lets you avoid writing 
the whole <template> element. Let me show you how it works.

Say we render a list of talk components.

<talk-cmp *ngFor="let t of talks; let i=index" [talk]="t" [index]="i"></talk-cmp>
This de-sugars it into

<talk-cmp 
  template="ngFor: let t of talks; let i=index" 
  [talk]="t" 
  [index]="i">
</talk-cmp>







React is rendering with 	- Javascript

 