Dependency Injection
-----------------------

DI is a software design pattern
based Inversion of Control (Dont call us we call you)


- depend on interfaces rather than concrete types
- this leads to more decoupled code, which enables testability
- Angular comes with a dependency injection system

1 DI InjectionToken<T>
----------------
to provide a resource it needs an injection token

Creates a token that can be used in a DI Provider

Use an InjectionToken to make the class, object, function or value recognized by Angular
----------------------------------------------------------------------------------------
- whenever the type you are injecting is not reified (make an abstract idea or concept real or concrete, does not have a runtime representation) 
  such as when injecting an interface, callable type, array or parameterized type.

- InjectionToken is parameterized on T which is the type of object which will be returned by the Injector. 
  This provides an additional level of type safety.

sample:
interface MyInterface {...}
const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));

// myInterface is inferred to be MyInterface.
When creating an InjectionToken, 
- you can optionally specify a factory function which returns (possibly by creating) a default value of the parameterized type T. 
  This sets up the InjectionToken using this factory as a provider as if it was defined explicitly in the application's root injector. 

- If the factory function, which takes zero arguments, needs to inject dependencies, it can do so using the inject function. 
  As you can see in the Tree-shakable InjectionToken example below.
- if a factory is specified you can also specify the providedIn option, which overrides the above behavior 
  and marks the token as belonging to a particular @NgModule. As mentioned above, 'root' is the default value for providedIn.

make an URL available to Angular
-------------------------------------------------------------
const BASE_URL = new InjectionToken<string>('BaseUrl');
const injector =
    Injector.create({providers: [{provide: BASE_URL, useValue: 'http://localhost'}]});
const url = injector.get(BASE_URL);
// Note: since `BASE_URL` is `InjectionToken<string>`
// `url` is correctly inferred to be `string`
expect(url).toBe('http://localhost');


2 DI Provider - Describes how the Injector should be configured.
---------------------------------------------------------------
type Provider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | any[];

Class Provider : 	useClass
Value Provider: 	useValue
Factory Provider: 	useFactory
Aliased Class Provider: useExisting

Two main roles exist in the DI system: 
- dependency consumer and 
- dependency provider
- injector - interaction between dependency consumers and dependency providers using an abstraction called Injector.
- dependency request: the injector checks its registry to see if there is an instance already available there. 
                      If not, a new instance is created and stored in the registry. 
                      Angular creates an application-wide injector (also known as "root" injector) during the application bootstrap process, 
                      as well as any other injectors as needed. 
                      In most cases you don't need to manually create injectors, but you should know that there is a layer 
                      that connects providers and consumers
- possible providers: Angular also allows you to 
                      - use functions, 
                      - objects, 
                      - primitive types such as string or Boolean, or 
                      - any other types as dependencies



Configuring dependency providers
----------------------------------
Angular DI provides the necessary APIs to make the dependency configuration flexible

1 provide a value: 	const API_URL= new InjectionToken<string>('') - providers: [ { provide: API_URL, useValue: 'http://SomeEndPoint.com/api' }]
-------------------
2 provide an object:	
-------------------
const APP_CONFIG =  Object.freeze({
  serviceURL: 'www.serviceUrl.comapi',
  IsDevleomentMode: true
})
providers: [{ provide: 'APP_CONFIG', useValue: APP_CONFIG }]
constructor(@Inject('APP_CONFIG') public appConfig: any) {}

3 provide a function:	
--------------------
providers: [{ provide: 'FUNC', useValue: () => { return 'hello';}}]
constructor(@Inject('FUNC') public someFunc: any) { console.log(someFunc());}

useFactory:
-------------
 providers: [
    { provide: LoggerService, useClass: LoggerService },
 
    { provide: 'USE_FAKE', useValue: true },
 
    {
      provide: ProductService,
      useFactory: (USE_FAKE, LoggerService) => USE_FAKE 
                                               ? new FakeProductService() 
                                               : new ProductService(LoggerService),
      deps: ['USE_FAKE', LoggerService]
    }
  ]


4 provide a classs:	providers: [{ provideValue: Logger, useClass: Logger }]
--------------------


Registering Providers
--------------------------------------------------------------------
- every class, object, function or value has to go through DI
  which means you have to define a provider for it and register it on
  root module, feature module or feature component provider
- Generally, I recommend to register providers at the module level 
  when they do not depend on the DOM, components, or directives

- Generally, I recommend to register providers at the module level when 
  they do not depend on the DOM, components, or directives


Injector Tree
--------------
- And everything an object depends on (services, directives, and elements) 
  is injected into its constructor. 
  To make this work the framework builds a tree of injectors

Now you know that the dependency injection configuration has two parts:

- Registering providers: How and where an object should be created.
- Injecting dependencies: What an object depends on.

Every directive or component on a DOM Element
- it gets an injector
- This injector contains the component instance, 
  all the providers registered by the component, and a few “local” objects (e.g., the element)

Lazy loading:
- is akin to bootstrapping a module in that 
  it creates a new injector out of the module and plugs it into the injector tree

Controlling Visibility
You can be more specific where you want to get dependencies from. 
For instance, you can ask for another directive on the same element.

Summary:
----------------------------
- Dependency injection is a key component of Angular.
- You can configure dependency injection at the component or module level.
- Dependency injection allows us to depend on interfaces rather than concrete types.
- This results in more decoupled code.
- This improves testability.
