ViewportScroller - CLASS
------------------------------------------------------------------------

Defines a scroll position manager. Implemented by BrowserViewportScroller.

abstract class ViewportScroller {
  abstract setOffset(offset: [number, number] | (() => [number, number])): void
  abstract getScrollPosition(): [number, number]
  abstract scrollToPosition(position: [number, number]): void
  abstract scrollToAnchor(anchor: string): void
  abstract setHistoryScrollRestoration(scrollRestoration: "auto" | "manual"): void
}

viewportScroller.scrollToPosition
----------------------------------------------------------------------------
class AppModule {
  constructor(router: Router, viewportScroller: ViewportScroller) {
    router.events.pipe(
      filter((e: Event): e is Scroll => e instanceof Scroll)
    ).subscribe(e => {
      if (e.position) {
        // backward navigation
        viewportScroller.scrollToPosition(e.position);
      } else if (e.anchor) {
        // anchor navigation
        viewportScroller.scrollToAnchor(e.anchor);
      } else {
        // forward navigation
        viewportScroller.scrollToPosition([0, 0]);
      }
    });
  }
}

router events for loading spinner - minko gechev
-----------------------------------
import { Component } from '@angular/core';
import { Router, RouteConfigLoadStart, RouteConfigLoadEnd, RouterEvent } from '@angular/router';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  loading: boolean;

  constructor(router: Router) {
    this.loading = false;

    router.events.subscribe(
      (event: RouterEvent): void => {
        if (event instanceof RouteConfigLoadStart) {
          this.loading = true;
        } else if (event instanceof RouteConfigLoadEnd) {
          this.loading = false;
        }
      }
    );
  }
}

firebase service acccount.json
-----------------------------------------------

var admin = require("firebase-admin");

var serviceAccount = require("path/to/serviceAccountKey.json");

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://netxpert-cb9e4.firebaseio.com"
});
----------------------------------------------------
npm install firestore-export-import
6. Example Code
This example will be using 3 files:
config.js
serviceAccount.json
import.js
config.js
// Firebase Config
const firebaseConfig = {
  apiKey: "API_KEY_HERE",
  authDomain: "AUTH_DOMAIN_HERE",
  databaseURL: "DATABASE_URL_HERE",
  projectId: "PROJECT_ID_HERE",
  storageBucket: "STORAGE_BUCKET_HERE",
  messagingSenderId: "MESSAGING_ID_HERE"
}
// Exports
module.exports = firebaseConfig;
serviceAccount.json
{
  "type": "service_account",
  "project_id": "PROJECT_ID_HERE",
  "private_key_id": "PRIVATE_ID_KEY_HERE",
  "private_key": "PRIVATE_KEY_HERE",
  "client_email": "CLIENT_EMAIL_HERE",
  "client_id": "CLIENT_ID_HERE",
  "auth_uri": "AUTH_URI_HERE",
  "token_uri": "TOKEN_URI_HERE",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "CLIENT_CERT_URL_HERE"
}

npm install firestore-export-import

import.js

// Imports
const firestoreService = require('firestore-export-import');
const firebaseConfig = require('./config.js');
const serviceAccount = require('./netxpert-service-ccount.json');

// JSON To Firestore
const jsonToFirestore = async () => {
  try {
    console.log('Initialzing Firebase');
    await firestoreService.initializeApp(serviceAccount, firebaseConfig.databaseURL);
    console.log('Firebase Initialized');

    await firestoreService.restore('./data-clean/firebase/users.json');
    console.log('Upload Success');
  }
  catch (error) {
    console.log(error);
  }
};

jsonToFirestore();
7. Import
Run the following command to execute the function to import your JSON data to Firebase Cloud Firestore:
node import.js