Components and Directives
-------------------------------------------------------------------------------------------------------
To build an Angular application you define 
- a set of components, for every UI element, screen, and route. 

An application will 
- always have root components (usually just one) that contain all other components. 
- assume the application has a single root component, and thus 
- Angular application will have a component tree

Comonent communication (Parent C ->  <- Child C) 
-------------------------
- Input, Output decorators
Template
A component has a template, which describes how the component is rendered on the page.
Lifecycle
Components have a well-defined lifecycle, which you can tap into. TalkCmp does not subscribe 
to any lifecycle events, but some other components can. For instance, 
this component will be notified when its input properties change.
Providers
A component can configure dependency injection by defining the list of providers the component and its children may inject.


Host Element: associate an Angular component with a DOM element
-----------------------------------------------------------------------------
To turn an Angular component into something rendered in the DOM you have to 

View:
- associate an Angular component with a DOM element. We call such elements host elements.

A component can interact with its host DOM element in the following ways:

- can listen to its events 	-> event binding
- can update its properties.	-> property binding (class, attributes)

It can invoke methods on it.
The component, for instance, listens to the input event using hostListeners, trims the value, 
and then stores it in a field. Angular will sync up the stored value with the DOM.

trimmed-input directive sample
-----------------------------------------------------------------------------
@Directive({
  selector: '[trimmed-input]'
})
class TrimmedInput {
  @HostBinding() value: string;

  @HostListener("input", "$event.target.value")
  onChange(updatedValue: string) {
    this.value = updatedValue.trim();
  }
}

DOM - View (renderer) - Component
------------------------------------------------------------------------------------------- 
- no direct interaction with the DOM directly. 
- Angular aims to provide a higher-level API, 

so the native platform, the DOM, will just reflect the state of the Angular application. 
This is useful for a couple of reasons:

components easier 
- to refactor.
- allows unit testing most of the behavior of an application without touching the DOM. 

Platform abstraction
-----------------------------
It allows running Angular applications 
- run in a web worker, 
- on the server, or 
- other platforms where a native DOM isn’t present.
Sometimes you just need to interact with the DOM directly. 
Angular provides such APIs, but our hope is that you will rarely need to use them.


View Queries
------------------------------------------------------------------------------------
In addition to access its host element, a component can interact with its children. 
There are two types of children a component can have: content children and view children. 
To understand the difference between them, let’s look at the following example:

The content children of the tabs component are the three tab components. 
The user of the tabs component provided those. The previous and next buttons are the view children of the tabs component. 
The author of the tabs component provided those. Components can query their children using 
the ContentChild, ContentChildren, ViewChild, and ViewChildren decorators.

This means that any component can be bootstrapped. It does not have to be special in any way. 
Moreover, any component can be loaded into a router outlet. As a result, you can write a component 
that can be bootstrapped as an application, loaded as a route, or used in some other component directly. 
This results in less API to learn. And it also makes components more reusable.

The component is just the most important type of a directive, but not the only one. 
A component is a directive with a template. But you can still write 
decorator-style directives, which do not have templates


Summary:
------------
What I have listed constitutes a component.

- A component knows how to interact with its host element.
- A component knows how to interact with its content and view children.
- A component knows how to render itself.
- A component configures dependency injection.
- A component has a well-defined public API of input and output properties


Directive communication ( Directive - DOM Element)
---------------------------------------------------
- HostBinding, HostListener Decorator
