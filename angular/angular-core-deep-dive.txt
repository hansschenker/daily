// ngFor template 
----------------------------------------------------- 
<course—card
*ngFor="let course of courses;index as i; first as isFirst;Last as isLast;
even as isEven;odd as isOdd"
[class.is—first]="isFirst"
[class.is—last]="isLast"
[class.is—even]="isEven"
[class.is—odd]="isOdd"
(courseSelected)="onCourseSelected($event)"
[course)="course" (cardIndexWi + 1">
</course—card>

// course-card styles
----------------------------------------------------
course-card.is-first {
border-top: 2px solid grey;
padding-top: 20px;
F
course-card. is-last {
border-bottom: 2px solid grey;
padding-top: 20px;

course-card.is-even {
background: 217171171
F
course-card. is-odd {
background: lightcyan;

// ngi template
-----------------------------------------------------------
<img width="300" alt="Angular Logo"
*ngIf="isImageVisible(); else noImage"
[src]="course.iconUrr>
<ng-template #noImage>
<p>No image is available.</p>
</ng-template>


// ngClass conditionally apply classes
-----------------------------------------------------
(string - one class)
<some-element [ngClass]="'first second'">...</some-element>
(array - many classes)
<some-element [ngClass]="['first', 'second']">...</some-element>
(configuration object: class: condition)
<some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
(expression)
<some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
(configuration object - many classes to one condition
<some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>

// ngStyle
-----------------------------------------------------------
NgStyle attribute DIRECTIVE

An attribute directive that updates styles for the containing HTML element. 
Sets one or more style properties, specified as colon-separated key-value pairs. 
The key is a style name, with an optional .<unit> suffix (such as 'top.px', 'font-style.em'). 
The value is an expression to be evaluated. The resulting non-null value, 
expressed in the given unit, is assigned to the given style property. 
If the result of evaluation is null, the corresponding style is removed.

// ngSwitch
-------------------------------------------------------------------
<div class="course-category" [ngSwitch]="course.category"›
<div class="category" *ngSwitchCase="'BEGINNER— >Beginner</div>
<div class="category" *ngSwitchCase="'INTERMEDIATE'">I ntermedi
<div class="category" *ngSwitchCase="'ADVANCED'">Advanced</div>
<div class="category" *ngSwitchDefault> All Leveli</div> 
</div>

// Pipe Decorator
-------------------------------------------------------------------
A pipe class must implement the PipeTransform interface. For example, 
if the name is "myPipe", use a template binding expression such as the following:

content_copy
{{ exp | myPipe }}
The result of the expression is passed to the pipe's transform() method.

A pipe must belong to an NgModule in order for it to be available to a template. 
To make it a member of an NgModule, list it in the declarations field of the NgModule metadata.

// ViewChild Decorator
------------------------------------------------------------------------

Property decorator that configures a view query. The change detector looks for the first element 
or the directive matching the selector in the view DOM. If the view DOM changes, 
and a new child matches the selector, the property is updated.

See more...

Description
View queries are set before the ngAfterViewInit callback is called.

Metadata Properties:

selector - The directive type or the name used for querying.
read - True to read a different token from the queried elements.
static - True to resolve query results before change detection runs
When static is not provided, uses query results to determine the timing of query resolution. 
If any query results are inside a nested view (such as *ngIf), the query is resolved after 
change detection runs. Otherwise, it is resolved before change detection runs.

The following selectors are supported.
----------------------
a Any class with the @Component or @Directive decorator

b template reference variable as a string (e.g. query <my-component #cmp></my-component> with @ViewChild('cmp'))
c provider defined in the child component tree of the current component (e.g. @ViewChild(SomeService) someService: SomeService)
d provider defined through a string token (e.g. @ViewChild('someToken') someTokenVal: any)
e TemplateRef (e.g. query <ng-template></ng-template> with @ViewChild(TemplateRef) template;)

ContentChild Decorator
---------------------------------------------------------------------------

Parameter decorator that configures a content query.

Use to get the first element or the directive matching the selector from the content DOM. 
If the content DOM changes, and a new child matches the selector, the property will be updated.

Content queries are set before the ngAfterContentInit callback is called.

Does not retrieve elements or directives that are in other components' templates, 
since a component's template is always a black box to its ancestors.

Metadata Properties:
-------------------
selector 	- The directive type or the name used for querying.
read 		- True to read a different token from the queried element.
static 		- True to resolve query results before change detection runs, 
		  false to resolve after change detection.

When static is not provided, uses the query results to determine the timing of query resolution. 
If any query results are inside a nested view (such as *ngIf), the query is resolved 
after change detection runs. Otherwise, it is resolved before change detection runs.


NgTemplater and NgContainer
-----------------------------------------------------------------------------------------------------------------------
<ng-template #blankImage let-courseName="description"›
  <p class="warn">{{courseName}l has no image yet.</p>
  <img src="/assets/empty-image.png"›
</ng-template>

<ng-containerj *ngTemplateOutlet="blankImage; context: {description: course.description}">
</ng-container>


NgTemplate as input to Component
----------------------------------------------------------------------------------------
<ng-template #blankImage let-courseName="description"›
  <p class="warn">{{courseName}l has no image yet.</p>
  <img src="/assets/empty-image.png"›
</ng-template>

<course-card
  (courseSelected)="onCourseSelected($event)"
  [course]="course" [noimageTpl]="blankImage"›
  <course-image src ="course.iconUrl">
  </course-image>
  <div class="course-description"›
  course.longDescription }

</course-card>

NgTemplateOutlet to output input NgTemplate
--------------------------------------------------------------------------------------------
<ng-template #noImage>
<ng-container *ngTemplateOutlet="noImageTpl;context: {description></ng-container>
</ng-template>

NgTemplateOutlet angular.io sample
------------------------------------
You can attach a context object to the EmbeddedViewRef by setting [ngTemplateOutletContext]. 
[ngTemplateOutletContext] should be an object, the object's keys will be available for binding by the local template let declarations.

@Component({
  selector: 'ng-template-outlet-example',
  template: `
    <ng-container *ngTemplateOutlet="greet"></ng-container>
    <hr>
    <ng-container *ngTemplateOutlet="eng; context: myContext"></ng-container>
    <hr>
    <ng-container *ngTemplateOutlet="svk; context: myContext"></ng-container>
    <hr>
    
    <ng-template #greet><span>Hello</span></ng-template>
    <ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>
    <ng-template #svk let-person="localSk"><span>Ahoj {{person}}!</span></ng-template>
`
})
export class NgTemplateOutletExample {
  myContext = {$implicit: 'World', localSk: 'Svet'};
}


Navigate the Component Tree with DI
-----------------------------------------------------------------------------------------------------------------------

Application components often need to share information. You can often use loosely coupled techniques 
for sharing information, such as 
- data binding and 
- service sharing, 

but sometimes it makes sense for one component to have a direct reference to another component. 
You need a direct reference, for instance, to 

- access values or 
- call methods on that component.

Obtaining a component reference is a bit tricky in Angular. Angular components themselves do not have a tree 
that you can inspect or navigate programmatically. 
The parent-child relationship is indirect, established through the components' view objects.

Each component has a host view, 
--------------------------------
and can have additional embedded views. 
An embedded view 
-----------------
in component A is the host view of component B, which can in turn can have embedded view. 
This means that there is a 
view hierarchy 
------------------
for each component, of which that component's host view is the root.

API for navigating down the view hierarchy. 
------------------------------------------
- Query, 
- QueryList, 
- ViewChildren, 
- ContentChildren in the API Reference.

There is no public API for acquiring a 

parent reference. 
------------------
every component instance is added to an injector's container, you can use Angular dependency injection to reach a parent component.

This section describes some techniques for doing that.

Find a parent component of known type
-------------------------------------
You use standard class injection to acquire a parent component whose type you know.

AlexComponent has several children including a CathyComponent:

parent-finder.component.ts (AlexComponent v.1)
@Component({
  selector: 'alex',
  template: `
    <div class="a">
      <h3>{{name}}</h3>
      <cathy></cathy>
      <craig></craig>
      <carol></carol>
    </div>`,
})
export class AlexComponent extends Base
{
  name = 'Alex';
}
@Component({
  selector: 'cathy',
  template: `
  <div class="c">
    <h3>Cathy</h3>
    {{alex ? 'Found' : 'Did not find'}} Alex via the component class.<br>
  </div>`
})
export class CathyComponent {
  constructor( @Optional() public alex: AlexComponent ) { }
}



Angular Core Api - angular/core
----------------------------------------------------------------------------------------------------------------------------

Implements Angular's core functionality, low-level services, and utilities.

Defines the 
- class infrastructure for components, 
- view hierarchies, 
- change detection, 
- rendering, and 
- event handling.

Defines the 
- decorators that supply metadata and context for Angular constructs.

Defines infrastructure for 
- dependency injection (DI), 
- internationalization (i18n), and various 
- 
testing and debugging facilities.

Entry points
Primary
@angular/core	
Implements Angular's core functionality, low-level services, and utilities.

Secondary
@angular/core/testing	
Primary entry point exports
NgModules
ApplicationModule	
Configures the root injector for an app with providers of @angular/core dependencies that ApplicationRef needs to bootstrap components.

Classes
ApplicationInitStatus	
A class that reflects the state of running APP_INITIALIZERs.

ChangeDetectorRef	
Base class for Angular Views, provides change detection functionality. A change-detection tree collects 

all views that are to be checked for changes. Use the methods to add and remove views from the tree, initiate change-detection, 
and explicitly mark views as dirty, meaning that they have changed and need to be rerendered.

Compiler	
Low-level service for running the angular compiler during runtime to create ComponentFactorys, 

which can later be used to create and render a Component instance.

CompilerFactory	
A factory for creating a Compiler

ComponentFactory	
Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component 
with resolveComponentFactory(). Use the resulting ComponentFactory.create() method to create a component of that type.

ComponentFactoryResolver	
A simple registry that maps Components to generated ComponentFactory classes that can be used to create instances of components. 
Use to obtain the factory for a given component type, then use the factory's create() method to create a component of that type.

ComponentRef	
Represents a component created by a ComponentFactory. Provides access to the component instance and related objects, 
and provides the means of destroying the instance.

DebugEventListener	
DefaultIterableDiffer	
Deprecated: v4.0.0 - Should not be part of public API.

ElementRef	
A wrapper around a native element inside of a View.

EmbeddedViewRef	
Represents an Angular view in a view container. An embedded view can be referenced from a component other than the 
hosting component whose template defines it, or it can be defined independently by a TemplateRef.

ErrorHandler	
Provides a hook for centralized exception handling.

EventEmitter	
Use in components with the @Output directive to emit custom events synchronously or asynchronously, 
and register handlers for those events by subscribing to an instance.

InjectionToken	
Creates a token that can be used in a DI Provider.

Injector	
Concrete injectors implement this interface.

IterableDiffers	
A repository of different iterable diffing strategies used by NgFor, NgClass, and others.

KeyValueDiffers	
A repository of different Map diffing strategies used by NgClass, NgStyle, and others.

ModuleWithComponentFactories	
Combination of NgModuleFactory and ComponentFactorys.

NgModuleFactory	
NgModuleFactoryLoader	
Deprecated: the string form of loadChildren is deprecated, and NgModuleFactoryLoader is part of its implementation. 
See LoadChildren for more details.

Used to load ng module factories.

NgModuleRef	
Represents an instance of an NgModule created via a NgModuleFactory.

NgProbeToken	
A token for third-party components that can register themselves with NgProbe.

NgZone	
An injectable service for executing work inside or outside of the Angular zone.

Query	
Base class for query metadata.

QueryList	
An unmodifiable list of items that Angular keeps up to date when the state of the application changes.

ReflectiveInjector	
Deprecated: from v5 - slow and brings in a lot of code, Use Injector.create instead.

A ReflectiveDependency injection container used for instantiating objects and resolving dependencies.

ReflectiveKey	
Deprecated: No replacement

A unique object used for retrieving items from the ReflectiveInjector.

RenderComponentType	
Deprecated: Use RendererType2 (and Renderer2) instead.

Renderer	
Deprecated: Use the Renderer2 instead.

Renderer2	
Extend this base class to implement custom rendering. By default, Angular renders a template into DOM. 
You can use custom rendering to intercept rendering calls, or to render to something other than DOM.

RendererFactory2	
Creates and initializes a custom renderer that implements the Renderer2 base class.

ResolvedReflectiveFactory	
An internal resolved representation of a factory function created by resolving Provider.

RootRenderer	
Deprecated: Use RendererFactory2 instead.

Injectable service that provides a low-level interface for modifying the UI.

Sanitizer	
Sanitizer is used by the views to sanitize potentially dangerous values.

SimpleChange	
Represents a basic change from a previous to a new value for a single property on a directive instance. 
Passed as a value in a SimpleChanges object to the ngOnChanges hook.

SystemJsNgModuleLoader	
Deprecated: the string form of loadChildren is deprecated, and SystemJsNgModuleLoader is part of its implementation. 
See LoadChildren for more details.


NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory

SystemJsNgModuleLoaderConfig	
Deprecated: the string form of loadChildren is deprecated, and SystemJsNgModuleLoaderConfig is part of its implementation. 
See LoadChildren for more details.

Configuration for SystemJsNgModuleLoader. token.

TemplateRef	
Represents an embedded template that can be used to instantiate embedded views. To instantiate embedded views based on a template, 
use the ViewContainerRef method createEmbeddedView().

Testability	
The Testability service provides testing hooks that can be accessed from the browser and by services such as Protractor. 
Each bootstrapped Angular application on the page will have an instance of Testability.

TestabilityRegistry	
A global registry of Testability instances for specific elements.

Version	
Represents the version of Angular

ViewContainerRef	
Represents a container where one or more views can be attached to a component.

ViewRef	
Represents an Angular view, specifically the host view that is defined by a component. Also serves as the 
base class that adds destroy methods for embedded views.

WrappedValue	
Indicates that the result of a Pipe transformation has changed even though the reference has not changed.

Decorators
Attribute	
Parameter decorator for a directive constructor that designates a host-element attribute whose value 
is injected as a constant string literal.

Component	
Decorator that marks a class as an Angular component and provides configuration metadata that determines 
how the component should be processed, instantiated, and used at runtime.

ContentChild	
Parameter decorator that configures a content query.

ContentChildren	
Parameter decorator that configures a content query.

Directive	
Decorator that marks a class as an Angular directive. You can define your own directives 
to attach custom behavior to elements in the DOM.

Host	
Parameter decorator on a view-provider parameter of a class constructor that tells the 
DI framework to resolve the view by checking injectors of child elements, 
and stop when reaching the host element of the current component.

HostBinding	
Decorator that marks a DOM property as a host-binding property and supplies configuration metadata. 
Angular automatically checks host property bindings during change detection, 
and if a binding changes it updates the host element of the directive.

HostListener	
Decorator that declares a DOM event to listen for, and provides a handler method to run when that event occurs.

Inject	
Parameter decorator on a dependency parameter of a class constructor that specifies a custom provider of the dependency.

Injectable	
Decorator that marks a class as available to be provided and injected as a dependency.

Input	
Decorator that marks a class field as an input property and supplies configuration metadata. 
The input property is bound to a DOM property in the template. During change detection, 
Angular automatically updates the data property with the DOM property's value.

NgModule	
Decorator that marks a class as an NgModule and supplies configuration metadata.

Optional	
Parameter decorator to be used on constructor parameters, which marks the parameter 
as being an optional dependency. The DI framework provides null if the dependency is not found.

Output	
Decorator that marks a class field as an output property and supplies configuration metadata. 
The DOM property bound to the output property is automatically updated during change detection.

Pipe	
Decorator that marks a class as pipe and supplies configuration metadata.

Self	
Parameter decorator to be used on constructor parameters, which tells the DI framework 
to start dependency resolution from the local injector.

SkipSelf	
Parameter decorator to be used on constructor parameters, which tells the DI framework to start 
dependency resolution from the parent injector. Resolution works upward through the injector hierarchy, 
so the local injector is not checked for a provider.

ViewChild	
Property decorator that configures a view query. The change detector looks for the first element or 
the directive matching the selector in the view DOM. If the view DOM changes, 
and a new child matches the selector, the property is updated.

ViewChildren	
Parameter decorator that configures a view query.

Functions
asNativeElements	
assertPlatform	
Checks that there currently is a platform which contains the given token as a provider.

createPlatform	
Creates a platform. Platforms have to be eagerly created via this function.

createPlatformFactory	
Creates a factory for a platform

destroyPlatform	
Destroy the existing platform.

enableProdMode	
Disable Angular's development mode, which turns off assertions and other checks within the framework.

forwardRef	
Allows to refer to references which are not yet defined.

getPlatform	
Returns the current platform.

isDevMode	
Returns whether Angular is in development mode. After called once, the value is locked and won't change any more.

resolveForwardRef	
Lazily retrieves the reference value from a forwardRef.

setTestabilityGetter	
Set the GetTestability implementation used by the Angular testing framework.

Structures
AbstractType	
Represents an abstract class T, if applied to a concrete class it would stop being instantiatable.

AfterContentChecked	
A lifecycle hook that is called after the default change detector has completed checking all content of a directive.

AfterContentInit	
A lifecycle hook that is called after Angular has fully initialized all content of a directive. 
Define an ngAfterContentInit() method to handle any additional initialization tasks.

AfterViewChecked	
A lifecycle hook that is called after the default change detector has completed checking a component's view for changes.

AfterViewInit	
A lifecycle hook that is called after Angular has fully initialized a component's view. 
Define an ngAfterViewInit() method to handle any additional initialization tasks.

ApplicationRef	
A reference to an Angular application running on a page.

ChangeDetectionStrategy	
The strategy that the default change detector uses to detect changes. When set, 
takes effect the next time change detection is triggered.

ClassProvider	
Configures the Injector to return an instance of useClass for a token.

ClassSansProvider	
Configures the Injector to return a value by invoking a useClass function. 
Base for ClassProvider decorator.

CollectionChangeRecord	
Deprecated: v4.0.0 - Use IterableChangeRecord instead.

ConstructorProvider	
Configures the Injector to return an instance of a token.

ConstructorSansProvider	
Configures the Injector to return an instance of a token.

DebugElement	
DebugNode	
DoBootstrap	
Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule annotation.

DoCheck	
A lifecycle hook that invokes a custom change-detection function for a directive, 
in addition to the check performed by the default change-detector.

ExistingProvider	
Configures the Injector to return a value of another useExisting token.

ExistingSansProvider	
Configures the Injector to return a value of another useExisting token.

FactoryProvider	
Configures the Injector to return a value by invoking a useFactory function.

FactorySansProvider	
Configures the Injector to return a value by invoking a useFactory function.

ForwardRefFn	
An interface that a function passed into forwardRef has to implement.

GetTestability	
Adapter interface for retrieving the Testability service associated for a particular context.

InjectFlags	
Injection flags for DI.

InjectableType	
A Type which has an InjectableDef static field.

InjectorType	
A type which has an InjectorDef static field.

IterableChangeRecord	
Record representing the item change information.

IterableChanges	
An object describing the changes in the Iterable collection since last time IterableDiffer#diff() was invoked.

IterableDiffer	
A strategy for tracking changes over time to an iterable. Used by NgForOf to respond 
to changes in an iterable by effecting equivalent changes in the DOM.

IterableDifferFactory	
Provides a factory for IterableDiffer.

KeyValueChangeRecord	
Record representing the item change information.

KeyValueChanges	
An object describing the changes in the Map or {[k:string]: string} since last time KeyValueDiffer#diff() was invoked.

KeyValueDiffer	
A differ that tracks changes made to an object over time.

KeyValueDifferFactory	
Provides a factory for KeyValueDiffer.

MissingTranslationStrategy	
Use this enum at bootstrap as an option of bootstrapModule to define the strategy 
that the compiler should use in case of missing translations:

Error: throw if you have missing translations.
Warning (default): show a warning in the console and/or shell.
Ignore: do nothing.
ModuleWithProviders	
A wrapper around an NgModule that associates it with the providers.

OnChanges	
A lifecycle hook that is called when any data-bound property of a directive changes. 
Define an ngOnChanges() method to handle the changes.

OnDestroy	
A lifecycle hook that is called when a directive, pipe, or service is destroyed. 
Use for any custom cleanup that needs to occur when the instance is destroyed.

OnInit	
A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. 
Define an ngOnInit() method to handle any additional initialization tasks.

PipeTransform	
An interface that is implemented by pipes in order to perform a transformation. 
Angular invokes the transform method with the value of a binding as the first 
argument, and any parameters as the second argument in list form.

PlatformRef	
The Angular platform is the entry point for Angular on a web page. Each page has exactly 
one platform, and services (such as reflection) which are common to every 
Angular application running on the page are bound in its scope.

Predicate	
A boolean-valued function over a value, possibly including context information 
regarding that value's position in an array.

RendererStyleFlags2	
Flags for renderer-specific style modifiers.

RendererType2	
Used by RendererFactory2 to associate custom rendering data and styles with a rendering implementation.

ResolvedReflectiveProvider	
An internal resolved representation of a Provider used by the Injector.

SchemaMetadata	
A schema definition associated with an NgModule.

SecurityContext	
A SecurityContext marks a location that has dangerous security implications, e.g. a 
DOM property like innerHTML that could cause Cross Site Scripting (XSS) security bugs when improperly handled.

SimpleChanges	
A hashtable of changes represented by SimpleChange objects stored at the declared property 
name they belong to on a Directive or Component. This is the type passed to the ngOnChanges hook.

StaticClassProvider	
Configures the Injector to return an instance of useClass for a token.

StaticClassSansProvider	
Configures the Injector to return an instance of useClass for a token. Base for StaticClassProvider decorator.

TrackByFunction	
An optional function passed into the NgForOf directive that defines how to track changes for items in an iterable. 
The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.

Type	
Represents a type that a Component or other object is instances of.

TypeDecorator	
An interface implemented by all Angular type decorators, which allows them to be used as decorators as well as Angular syntax.

TypeProvider	
Configures the Injector to return an instance of Type when Type is used as the token.

ValueProvider	
Configures the Injector to return a value for a token.

ValueSansProvider	
Configures the Injector to return a value for a token. Base for ValueProvider decorator.

ViewEncapsulation	
Defines template and style encapsulation options available for Component's Component.

WtfScopeFn	
Deprecated: the Web Tracing Framework is no longer supported in Angular

A scope function for the Web Tracing Framework (WTF).

Types
ANALYZE_FOR_ENTRY_COMPONENTS	
A DI token that you can use to create a virtual provider that will populate the entryComponents 
field of components and NgModules based on its useValue property value. All components 
that are referenced in the useValue value (either directly or in a nested array or map) are added to the entryComponents property.

APP_BOOTSTRAP_LISTENER	
All callbacks provided via this token will be called for every component that is bootstrapped. 
Signature of the callback:

APP_ID	
A DI Token representing a unique string id assigned to the application by Angular and used primarily 
for prefixing application attributes and CSS styles when ViewEncapsulation.Emulated is being used.

APP_INITIALIZER	
A function that will be executed when an application is initialized.

COMPILER_OPTIONS	
Token to provide CompilerOptions in the platform injector.

CUSTOM_ELEMENTS_SCHEMA	
Defines a schema that allows an NgModule to contain the following:

Non-Angular elements named with dash case (-).
Element properties named with dash case (-). Dash case is the naming convention for custom elements.
CompilerOptions	
Options for creating a compiler

INJECTOR	
An InjectionToken that gets the current Injector for createInjector()-style injectors.

InjectableProvider	
Injectable providers used in @Injectable decorator.

LOCALE_ID	
Provide this token to set the locale of your application. It is used for i18n extraction, 
by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe, DecimalPipe and PercentPipe) and by ICU expressions.

NO_ERRORS_SCHEMA	
Defines a schema that allows any property on any element.

NgIterable	
A type describing supported iterable types.

PACKAGE_ROOT_URL	
A token which indicates the root directory of the application

PLATFORM_ID	
A token that indicates an opaque platform id.

PLATFORM_INITIALIZER	
A function that will be executed when a platform is initialized.

Provider	
Describes how the Injector should be configured.

StaticProvider	
Describes how the Injector should be configured as static (that is, without reflection).

TRANSLATIONS	
Use this token at bootstrap to provide the content of your translation file (xtb, xlf or xlf2) 
when you want to translate your application in another language.

TRANSLATIONS_FORMAT	
Provide this token at bootstrap to set the format of your TRANSLATIONS: xtb, xlf or xlf2.

defineInjectable	
Deprecated: in v8, delete after v10. This API should be used only be generated code, and 
that code should now use ??defineInjectable instead.

getDebugNode	
getModuleFactory	
Returns the NgModuleFactory with the given id, if it exists and has been loaded. Factories for 
modules that do not specify an id cannot be retrieved. Throws if the module cannot be found.

inject	
Injects a token from the currently active injector.

platformCore	
This platform has to be included in any other platform

wtfCreateScope	
Deprecated: the Web Tracing Framework is no longer supported in Angular

Create trace scope.

wtfEndTimeRange	
Deprecated: the Web Tracing Framework is no longer supported in Angular

Ends a async time range operation. [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been enabled.

wtfLeave	
Deprecated: the Web Tracing Framework is no longer supported in Angular

Used to mark end of Scope.

wtfStartTimeRange	
Deprecated: the Web Tracing Framework is no longer supported in Angular

Used to mark Async start. Async are similar to scope but they don't have to be strictly nested. 
The return value is used in the call to [endAsync]. Async ranges only work if WTF has been enabled.
