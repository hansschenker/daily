Angular DOM Manipulations
--------------------------------------------------------------------------------------------------------
https://indepth.dev/exploring-angular-dom-manipulation-techniques-using-viewcontainerref/
https://www.youtube.com/watch?v=qWmqiYDrnDc&list=PLVI0Ut22uwY4UC1v5fUvi2RIU4R4jPkba&sns=tw


The new Angular version runs on different platforms — in a browser, on a mobile platform or inside a web worker. 
So a level of abstraction is required to stand between platform specific API and the framework interfaces. 
In angular these abstractions come in a form of the following reference types: 
- ElementRef, 
- TemplateRef, 
- ViewRef, 
- ComponentRef and 
- ViewContainerRef.

Directives are markers on a DOM element that tell AngularJS to attach a specified behaviour 
to that DOM element or even transform the DOM element and its children. In short, it extends the HTML. 
Most of the directives in Angular are starting with ng- where ng stands for Angular. 
Angular includes various built-in directives. In addition to this, 
you can create custom directives for your application

Template Variable:
-----------------------------------------------------------------------------------------------------
They are combined with Template Variable access:

see: Alain Chautard: https://www.youtube.com/watch?v=wJwvmuK4tQw
https://blog.angulartraining.com/tutorial-the-magic-of-template-reference-variables-3183f0a0d9d1

Access Host Element via Dependency Injection
---------------------------------------------------------------------------------------------------
ElementRef can be returned for any DOM element using the ViewChild decorator. But since all components 
are hosted inside a custom DOM element and all directives are applied to DOM elements, 
component and directive classes can obtain an instance of ElementRef 
associated with their host element through Dependency Injection (DI):

@Component({
    selector: 'sample',
    ...
export class SampleComponent{
    constructor(private hostElement: ElementRef) {
        //outputs <sample>...</sample>
        console.log(this.hostElement.nativeElement.outerHTML);
    }

Angular Query DOM Nodes
---------------------------------------------------------------------------------------------------
@ViewChild#
Before we explore the DOM abstractions, let’s understand how we access these abstractions inside a component/directive class. 
Angular provides a mechanism called DOM queries. It comes in the form of 
- @ViewChild and 
- @ViewChildren decorators. They behave the same, only the former returns one reference, 
while the latter returns multiple references as a QueryList object. 
In the examples in this article I’ll be using mostly the  
ViewChild decorator and will not be using the @ symbol before it.

Angular Views and References (Element, Template & ViewContainer)
---------------------------------------------------------------------------------------------------

View
------------------------------------------------------------------------------------------------
For every element in Angular template HTML, there is a corresponding view. 
Angular recommends interacting with the platforms through these views. While direct manipulation 
is still possible, Angular warns against it. Angular offers 
its own application programming interface (API) to replace the native manipulations.

abstract class ViewRef extends ChangeDetectorRef {
  abstract destroyed: boolean
  abstract destroy(): void
  abstract onDestroy(callback: Function): any

  // inherited from core/ChangeDetectorRef
  abstract markForCheck(): void
  abstract detach(): void
  abstract detectChanges(): void
  abstract checkNoChanges(): void
  abstract reattach(): void
}

ChangeDetectorRef
--------------------------------------------------------------------------------------------------
Base class that provides change detection functionality. A change-detection tree collects 
all views that are to be checked for changes. Use the methods to add and remove views from the tree, 
initiate change-detection, and explicitly mark views as dirty, meaning that they have changed and need to be re-rendered.

abstract class ChangeDetectorRef {
  abstract markForCheck(): void
  abstract detach(): void
  abstract detectChanges(): void
  abstract checkNoChanges(): void
  abstract reattach(): void
}

ChangeDetection Hooks - DoCheck, OnChanges
--------------------------------------------------------------------------------------------------------------------
Using change detection hooks
Angular calls the ngOnChanges() method of a component or directive whenever it detects changes to the input properties. 
The onChanges example demonstrates this by monitoring the OnChanges() hook.

on-changes.component.ts (excerpt)
content_copy
ngOnChanges(changes: SimpleChanges) {
  for (const propName in changes) {
    const chng = changes[propName];
    const cur  = JSON.stringify(chng.currentValue);
    const prev = JSON.stringify(chng.previousValue);
    this.changeLog.push(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);
  }
}

View Bindings
-----------------------------------------------------------------------------------------------
binding
Generally, the practice of setting a variable or property to a data value. Within Angular, 
typically refers to data binding, which coordinates DOM object properties with data object properties.

Data Binding
---------------------------------------------------------------------------------------------------

A process that allows apps to display data values to a user and respond to user actions (such as clicks, touches, and keystrokes).

In data binding, you declare the relationship between an 
- HTML widget and 
. a data source and let the framework handle the details. 

Data binding is an alternative to manually pushing application data values into HTML, 
attaching event listeners, 
pulling changed values from the screen, and updating application data values.

Read about the following forms of binding in Angular's Template Syntax:

Interpolation: {{ exp }}
----------------------------

Property binding: [name]="name" , name must be in Compoent Class: @Input() name
--------------------------------------------------------------------------------
Use property binding to set properties of target elements or directive

Event binding: (change)="nameChange($event)", nameChange must be in Compoent Class: @Output() nameChange = new EventEmitter<string>()
----------------------------------------------------------------------------------------------------------------------------------------

Attribute binding [attr.disabled]="actionName"
----------------------------
Set the value of an attribute directly with an attribute binding. 

This is the only exception to the rule that a binding sets a target property and 
the only binding that creates and sets an attribute.

Usually, setting an element property with a property binding is preferable to setting the attribute with a string. 
However, sometimes there is no element property to bind, so attribute binding is the solution.

Consider the ARIA and SVG. They are purely attributes, don't correspond to element properties, 
and don't set element properties. In these cases, there are no property targets to bind to.

Attribute binding syntax resembles property binding, but instead of an element property between brackets, 
start with the prefix attr, followed by a dot (.), and the name of the attribute. You then set the attribute value, 
using an expression that resolves to a string, or remove the attribute when the expression resolves to null.

One of the primary use cases for attribute binding is to set ARIA attributes, as in this example:

<!-- create and set an aria attribute for assistive technology -->
<button [attr.aria-label]="actionName">{{actionName}} with Aria</button>

colspan and colSpan
Notice the difference between the colspan attribute and the colSpan property.

<tr><td colspan="{{1 + 1}}">Three-Four</td></tr>
You'd get this error:
Can't bind to 'colspan' since it isn't a known native property

As the message says, the <td> element does not have a colspan property. 
This is true because colspan is an attribute—colSpan, with a capital S, is the corresponding property. 

Interpolation and property binding can set only properties, not attributes.

Instead, you'd use property binding and write it like this:
<tr><td [colSpan]="1 + 1">Three-Four</td></tr>


Class binding
------------------------------------------------------------------------------------------------------------------
Here's how to set the class attribute without a binding in plain HTML:

<div class="foo bar">Some text</div>
You can also add and remove CSS class names from an element's class attribute with a class binding.

single class binding, 
-----------------------
start with the prefix class followed by a dot (.) and the name of the CSS class (for example, [class.foo]="hasFoo"). 
Angular adds the class when the bound expression is truthy, and it removes the class when the expression is falsy 
(with the exception of undefined, see styling delegation).

binding to multiple classes, 
------------------------------
use a generic [class] binding without the dot (for example, 
[class]="classExpr"). 
The expression can be a space-delimited string of class names, or you can format it as an object with class names 
as the keys and truthy/falsy expressions as the values. 
With object format, Angular will add a class only if its associated value is truthy.

It's important to note that with any object-like expression (object, Array, Map, Set, etc), 
the identity of the object must change for the class list to be updated. 
Updating the property without changing object identity will have no effect.

If there are multiple bindings to the same class name, conflicts are resolved using styling precedence.

Binding Type		Syntax			Input Type			Example Input Values
-------------------------------------------------------------------------------------------------------
Single class binding	[class.foo]="hasFoo"	boolean | undefined | null	true, false
--------------------------------------------------------------------------------------------------------
Multi-class binding	[class]="classExpr"	string	"my-class-1 my-class-2 my-class-3"
----------------------------------------------------------------------------------------------
{[key: string]: boolean | undefined | null}	{foo: true, bar: false}
------------------------------------------------------------------------------------------------
Array<string>	['foo', 'bar']

The NgClass directive (will be removed in future)
---------------------
can be used as an alternative to direct [class] bindings. However, 
using the above class binding syntax without NgClass is preferred because due to improvements in class binding in Angular, 
NgClass no longer provides significant value, and might eventually be removed in the future.

Style binding
-------------------------------------------------------------------------------------------------
Here's how to set the style attribute without a binding in plain HTML:

<div style="color: blue">Some text</div>

You can also set styles dynamically with a style binding.
To create a single style binding, start with the prefix style followed by a dot (.) and the name of the CSS style property (for example, 

[style.width]="width"). The property will be set to the value of the bound expression, which is normally a string. 
Optionally, you can add a unit extension like em or %, which requires a number type.

Note that a style property name can be written in either dash-case, as shown above, or camelCase, such as fontSize.

If there are multiple styles you'd like to toggle, you can bind to the [style] property directly without the dot 
(for example, [style]="styleExpr"). 
The expression attached to the [style] binding is most often a string list of styles like "width: 100px; height: 100px;".

You can also format the expression as an object with style names as the keys and style values as the values, 
like {width: '100px', height: '100px'}. It's important to note that with any object-like expression 
(object, Array, Map, Set, etc), the identity of the object must change for the class list to be updated. 
Updating the property without changing object identity will have no effect.

If there are multiple bindings to the same style property, conflicts are resolved using styling precedence rules.

Binding Type			Syntax			Input Type			Example Input Values
---------------------------------------------------------------------------------------------------------------
Single style binding		[style.width]="width"	string | undefined | null	"100px"
---------------------------------------------------------------------------------------------------------------
Single style binding with units	[style.width.px]="width"	number | undefined | null	100
---------------------------------------------------------------------------------------------------------------
Multi-style binding		[style]="styleExpr"	string	"width: 100px; height: 100px"
----------------------------------------------------------------------------------------------------------------
{[key: string]: string | undefined | null}	{width: '100px', height: '100px'}
Array<string>	['width', '100px']
The NgStyle directive can be used as an alternative to direct [style] bindings. 
However, using the above style binding syntax without NgStyle is preferred because due to improvements in style binding in Angular, 
NgStyle no longer provides significant value, and might eventually be removed in the future.

Styling Precedence
----------------------------
A single HTML element can have its CSS class list and style values bound to multiple sources 
(for example, host bindings from multiple directives).

When there are multiple bindings to the same class name or style property, 
Angular uses a set of precedence rules to resolve conflicts and determine which classes 
or styles are ultimately applied to the element.

Styling precedence (highest to lowest)
Template bindings

Property binding (for example, <div [class.foo]="hasFoo"> or <div [style.color]="color">)
Map binding (for example, <div [class]="classExpr"> or <div [style]="styleExpr">)
Static value (for example, <div class="foo"> or <div style="color: blue">)
Directive host bindings

Property binding (for example, host: {'[class.foo]': 'hasFoo'} or host: {'[style.color]': 'color'})
Map binding (for example, host: {'[class]': 'classExpr'} or host: {'[style]': 'styleExpr'})
Static value (for example, host: {'class': 'foo'} or host: {'style': 'color: blue'})
Component host bindings

Property binding (for example, host: {'[class.foo]': 'hasFoo'} or host: {'[style.color]': 'color'})
Map binding (for example, host: {'[class]': 'classExpr'} or host: {'[style]': 'styleExpr'})
Static value (for example, host: {'class': 'foo'} or host: {'style': 'color: blue'})
The more specific a class or style binding is, the higher its precedence.

A binding to a specific class (for example, [class.foo]) will take precedence over a generic [class] binding, 
and a binding to a specific style (for example, [style.bar]) will take precedence over a generic [style] binding.

<h3>Basic specificity</h3>

<!-- The `class.special` binding will override any value for the `special` class in `classExpr`.  -->
<div [class.special]="isSpecial" [class]="classExpr">Some text.</div>

<!-- The `style.color` binding will override any value for the `color` property in `styleExpr`.  -->
<div [style.color]="color" [style]="styleExpr">Some text.</div>
Specificity rules also apply when it comes to bindings that originate from different sources. 

It's possible for an element to have bindings in the template where it's declared, 
from host bindings on matched directives, and from host bindings on matched components.

Template bindings are the most specific because they apply to the element directly and exclusively, 
so they have the highest precedence.

Directive host bindings are considered less specific because directives can be used in multiple locations,
 so they have a lower precedence than template bindings.

Directives often augment component behavior, so host bindings from components have the lowest precedence.

src/app/app.component.html
content_copy
<h3>Source specificity</h3>

<!-- The `class.special` template binding will override any host binding to the `special` 
class set by `dirWithClassBinding` or `comp-with-host-binding`.-->
<comp-with-host-binding [class.special]="isSpecial" dirWithClassBinding>Some text.</comp-with-host-binding>

<!-- The `style.color` template binding will override any host binding to the `color` 
property set by `dirWithStyleBinding` or `comp-with-host-binding`. -->
<comp-with-host-binding [style.color]="color" dirWithStyleBinding>Some text.</comp-with-host-binding>
In addition, bindings take precedence over static attributes.

In the following case, class and [class] have similar specificity, but the [class] binding will take precedence because it is dynamic.

src/app/app.component.html
content_copy
<h3>Dynamic vs static</h3>

<!-- If `classExpr` has a value for the `special` class, this value will override the `class="special"` below -->
<div class="special" [class]="classExpr">Some text.</div>

<!-- If `styleExpr` has a value for the `color` property, this value will override the `style="color: blue"` below -->
<div style="color: blue" [style]="styleExpr">Some text.</div>
Delegating to styles with lower precedence
It is possible for higher precedence styles to "delegate" to lower precedence styles using undefined values.
 Whereas setting a style property to null ensures the style is removed, setting it to undefined will 
cause Angular to fall back to the next-highest precedence binding to that style.

For example, consider the following template:

src/app/app.component.html
content_copy
<comp-with-host-binding dirWithHostBinding></comp-with-host-binding>
Imagine that the dirWithHostBinding directive and the comp-with-host-binding component both have a [style.width] host binding. 
In that case, if dirWithHostBinding sets its binding to undefined, the width property will fall back to the value 
of the comp-with-host-binding host binding. However, if dirWithHostBinding sets its binding to null, 
the width property will be removed entirely.

Class binding
-----------------------------

Style binding
-----------------------------

Two-way data binding with ngModel
------------------------------------

DOM and the View
-----------------------------------------------------------------------------------------------
The relationship between DOM and View
Two main building blocks of change detection in Angular: Component view and The associated bindings.
Every component in Angular has a template with HTML elements. 
When Angular creates the DOM nodes to render the contents of the template on the screen, 
it needs a place to store the references to those DOM nodes, which
 is known as View. 
There is a one to one relationship between a component and a view.
Component - creates a HostView ( The Element itself is the viewcontainer
Directive - creates an EmbeddedView (with the help of a viewcontainer)

Views are almost like virtual DOM
Each view contains a reference to corresponding section of the DOM. 
Inside a view are nodes that mirror what is in the section.
Angular assigns one view node per DOM element, each node holds a reference to a matching element.
There are three types of views: view containers, embedded and host view.

View Container
Holds both embedded and host views and often refers to “views”
Every @Component class registers a view container (view) with Angular. 
New components generate a custom selector targeting a certain DOM element. 
The view attaches to that element wherever it appears. 
Angular now knows the component exists looking at the view model. 
Each component in Angular is represented as a view with nodes. 
Most nodes in the view resemble component template structure and represent DOM nodes.

❗️ ViewContainerRef is the type of reference for view container, 
it represents a container where one or more views can be attached. Usually, 
a good candidate to mark a place where a ViewContainer should be created is ng-container element. 
It’s rendered as a comment and so it doesn’t introduce redundant html elements into DOM. 

@Component({
    selector: 'sample',
    template: `
        <span>I am first span</span>
        <ng-container #vc></ng-container>
        <span>I am last span</span>
    `
})
export class SampleComponent implements AfterViewInit {
    @ViewChild("vc", {read: ViewContainerRef}) vc: ViewContainerRef;

    ngAfterViewInit(): void {
        // outputs `template bindings={}`
        console.log(this.vc.element.nativeElement.textContent);
    }
}

Host View
------------------------------------------------------------------------------------------------
Host views host dynamic components. Angular compiler generates host views for each component 
defined in bootstrap or entryComponentof a module. And each host view is responsible 
for creating a component view when you call factory.createComponent. The factories 
that are returned by the componentFactoryResolver are the host view factories.
Creating components dynamically and registering them in the Angular view model takes a few extra steps. 
Structural directives help manage dynamic content (*ngIf, *ngFor, and *ngSwitch…). 
Factories act as blueprints for host views. They build views to interface with Angular on behalf of their components. 
Host views attach to DOM elements. A view container (view) for holding views must first exist.

Embedded View
-------------------------------------------------------------------------------------------------------------
Embedded views attach to other views no added input. It s a view that is created for the view nodes specified in the ng-template.
The difference between embedded and host view is that embedded views are linked to a template, 
while host views are linked to a component.

import { Component, AfterViewInit, ViewChild,
ViewContainerRef, TemplateRef } from '@angular/core';

@Component({
  selector: 'app-example',
  template: `
  <h1>Application Content</h1>
  <ng-container #container></ng-container> <!-- embed view here -->
  <h3>End of Application</h3>

  <ng-template #template>
    <h1>Template Content</h1>
    <h3>Dynamically Generated!</h3>
  </ng-template>
  `
})
export class ExampleComponent implements AfterViewInit {
  @ViewChild("template", { read: TemplateRef }) tpl: TemplateRef<any>;
  @ViewChild("container", { read: ViewContainerRef }) ctr: ViewContainerRef;

  constructor() { }

  ngAfterViewInit() {
    const view =  this.tpl.createEmbeddedView(null);
    this.ctr.insert(view);
  }
}

ElementRef, TemplateRef & ViewContainerRef:
---------------------------------------------------------------------------------------------------------------
🏆ElementRef:
-----------
This is the most basic HTML DOM abstraction
Usage:
Usage one: Since all components are hosted inside a custom DOM element and all directives are applied to DOM elements, 
component and directive classes can obtain an instance of ElementRef associated with their host element through DI mechanism:

TemplateRef:
--------------
The TemplateRef class (_templateRef) stores the reference to the template that the structural directive is referring to.
Usage:
By itself the TemplateRef class is a simple class. It holds a reference to its host element in elementRef property 
and has one method createEmbeddedView. A view can be instantiated from the template using createEmbeddedView method like this:

ViewContainerRef:
-------------------
Manipulating the view:
ViewContainer provides a convenient API for manipulating the view:
class ViewContainerRef {
    ...
    clear() : void
    insert(viewRef: ViewRef, index?: number) : ViewRef
    get(index: number) : ViewRef
    indexOf(viewRef: ViewRef) : number
    detach(index?: number) : ViewRef
    move(viewRef: ViewRef, currentIndex: number) : ViewRef
}
By using insert, we can insert view into view container, the example has been mentioned in embedded view section.
Creating views:
ViewContainer also provides API to create a view automatically:
class ViewContainerRef {
    element: ElementRef
    length: number
    createComponent(componentFactory...): ComponentRef<C>
    createEmbeddedView(templateRef...): EmbeddedViewRef<C>
    ...
}
It has two important methods:

- createEmbeddedView(templateRef: TemplateRef<C>, context?: C, index?: number) : EmbeddedViewRef<C> 
This method is to create embedded view from a HTML template.

- createComponent(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: 
any[][]) : ComponentRef<C> 
This method is to initialize a component and insert its host view to the view container.

From ViewContainerRef, we can get its ElementRef (further access its native DOM element).
For structural directives, since they are implemented through HTML template element, so it can get a TemplateRef

View Hierachy - Navigate the component tree with DI
------------------------------------------------------------------------------------------------
Application components often need to share information. You can often use loosely coupled techniques for sharing information, 
such as data binding and service sharing, but sometimes it makes sense for one component to have a direct reference to another component. 
You need a direct reference, for instance, to access values or call methods on that component.

Obtaining a component reference is a bit tricky in Angular. Angular components themselves do not have a tree that you can 
inspect or navigate programmatically. The parent-child relationship is indirect, established through the components' view objects.

Each component has a host view, and can have additional embedded views. An embedded view in component A is the host view of component B, 
which can in turn have embedded view. This means that there is a view hierarchy for each component, of which that component's host view is the root.

There is an API for navigating down the view hierarchy. Check out Query, QueryList, ViewChildren, and ContentChildren in the API Reference.

There is no public API for acquiring a parent reference. However, because every component instance is added to an injector's container, 
you can use Angular dependency injection to reach a parent component.

This section describes some techniques for doing that.

Find a parent component of known type
You use standard class injection to acquire a parent component whose type you know.

In the following example, the parent AlexComponent has several children including a CathyComponent:

parent-finder.component.ts (AlexComponent v.1)
content_copy
@Component({
  selector: 'alex',
  template: `
    <div class="a">
      <h3>{{name}}</h3>
      <cathy></cathy>
      <craig></craig>
      <carol></carol>
    </div>`,
})
export class AlexComponent extends Base
{
  name = 'Alex';
}



NgTemplateOutlet
-------------------------------------------------------------------------------------------------
NgTemplateOutlet - DIRECTIVE
Inserts an embedded view from a prepared TemplateRef. 

You can attach a context object to the EmbeddedViewRef by setting [ngTemplateOutletContext]. 
[ngTemplateOutletContext] should be an object, 
the object's keys will be available for binding by the local template let declarations.

content_copy
<ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
Using the key $implicit in the context object will set its value as default.

Example
content_copy
@Component({
  selector: 'ng-template-outlet-example',
  template: `
    <ng-container *ngTemplateOutlet="greet"></ng-container>
    <hr>
    <ng-container *ngTemplateOutlet="eng; context: myContext"></ng-container>
    <hr>
    <ng-container *ngTemplateOutlet="svk; context: myContext"></ng-container>
    <hr>

    <ng-template #greet><span>Hello</span></ng-template>
    <ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>
    <ng-template #svk let-person="localSk"><span>Ahoj {{person}}!</span></ng-template>
`
})
export class NgTemplateOutletExample {
  myContext = {$implicit: 'World', localSk: 'Svet'};
}

TemplateRef - TemplateRef CLASS
-------------------------------------------------------------------------------------------------
Represents an embedded template that can be used to instantiate embedded views. 
To instantiate embedded views based on a template, use the ViewContainerRef method createEmbeddedView().
Access a TemplateRef instance by placing a directive on an <ng-template> element (or directive prefixed with *). 

The TemplateRef for the embedded view is injected into the constructor of the directive, using the TemplateRef token.

You can also use a Query to find a TemplateRef associated with a component or a directive.

Properties
Property	Description
abstract elementRef: ElementRef	Read-Only
The anchor element in the parent view for this embedded view.

The data-binding and injection contexts of embedded views created from this TemplateRef inherit from the contexts of this location.

Typically new embedded views are attached to the view container of this location, but in advanced use-cases, 
the view can be attached to a different container while keeping the data-binding and injection context from the original location.

ViewContainerRef - CLASS
----------------------------------------------------------------------------------------------------------

abstract class ViewContainerRef {
  abstract element: ElementRef
  abstract injector: Injector
  abstract parentInjector: Injector
  abstract length: number
  abstract clear(): void
  abstract get(index: number): ViewRef | null
  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>
  abstract createComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>
  abstract insert(viewRef: ViewRef, index?: number): ViewRef
  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef
  abstract indexOf(viewRef: ViewRef): number
  abstract remove(index?: number): void
  abstract detach(index?: number): ViewRef | null


Represents a container where one or more views can be attached to a component.
Can contain host views (created by instantiating a component with the createComponent() method), 
and embedded views (created by instantiating a TemplateRef with the createEmbeddedView() method).

A view container instance can contain other view containers, creating a view hierarchy.


Directive Links collection
--------------------------------------------------------------------------------------------------------------
angular-is;			is 3d; directives; data binding, dependency injection - green; google developer 2013 
angular-directives; 		alex rickabaugh; nav and carousel; E;\_downloads\_fe\_js\ng 
angular-directives; 		alex rickabaugh;left-nav;https://stackblitz.com/edit/angular-template-directive-left-nav?file=app%2Fleft-nav.service.ts 
angular-directives; 		alex rickabaugh;carousel;https://stackblitz.com/edit/adv-ng-carousel 
angular-directives; 		alex rickabaugh;carousel;https://www.youtube.com/watch?v=rKbY1t39dHU 
angular-directives; 		stephen cooper; generic list; c;\Users\Folio\web\frontend\javascript\frameworks\angular-templates\stephen-cooper-ngtemplateoutlet-angularconnect-2019 
hans;directives; 		c;\Users\Folio\web\frontend\javascript\frameworks\angular-templates\hans\template-playground 
angular-directives; 		thomasz kula; https://netbasal.com/understanding-angular-structural-directives-659acd0f67e 
angular- directives; 		misko hevery on microsyntax; https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855 
angular- directives; 		ytl; hans; https://www.youtube.com/playlist?list=PLw5h0DiJ-9PDGtYRgb3TUnBU_iTI_R-VW 
angular- directive; 		letRange; vojtech maseck; "https://www.youtube.com/watch?v=TBcAXgsVFtM&list=PLw5h0DiJ-9PDGtYRgb3TUnBU_iTI_R-VW&index=8&t=1s" 
angular- directive; 		letRange; vojtech maseck;https://itnext.io/angular-structural-directives-b54ea21b39a7 
angular-directive; 		letRange; vojtech maseck;https://github.com/vmasek/ng-beer-directives.git 
angular-directive; 		letRange; vojtech maseck; C;\Users\Folio\web\frontend\javascript\frameworks\angular-templates\vojtech-masek\ng-beer-directives 
angular-directives; 		thomasz kula;https://stackblitz.com/edit/angular-template-directive-carousel-withdelay?file=src/app/carousel/carousel-with-description.component.ts 
angular-directives;		rom to; short video; yt; "https://www.youtube.com/watch?v=W3cQLj0lwKw&list=PLw5h0DiJ-9PDGtYRgb3TUnBU_iTI_R-VW&index=4&t=0s" 
angular- directives; 		max koretski; https://github.com/maximusk/dom-manipulation-workshop.git 
angular-directives; 		max koretski;yt;"https://www.youtube.com/watch?v=vz9cNCkaPsY&t=5324s" 
angular-react 			getProps in angular; isaac man; https://medium.com/angular-in-depth/content-directives-are-angulars-prop-getters-360fdae60576? 
angular-directive;        	selectors; tomasz kula; https://netbasal.com/angular-directive-selectors-can-do-more-than-you-think-7aefa4e6f30  
angular-template;        	directives; christian janker; medium; https://github.com/yanxch/fun-with-angular-directives  
angular-directives;      	structural directives; https://www.youtube.com/watch?v=TBcAXgsVFtM  
angular-directive;              irective is a way to attach custom behavior to a DOM element 
angular-template-directves;     ng-template + directive; D;\_downloads\_fe\_js\Angular\Angular-Templates\Alex-Rickabaugh-LeftNav-ImageCarousel 
angular-microsyntax,            template microsyntax, https://angular.io/guide/structural-directives#microsyntax 
angular-microsyntax,            template microsyntax, directives used in templates, structural directives = template directives (alex rickabaugh) 
angular-microsyntax,            template microsyntax, directives used in templates, Within a template, you can use special syntax to leverage many of Angular's features 
angular-directives,         	expert, https://github.com/vmasek?tab=repositories 
angular-template-directives,    let, range, https://itnext.io/angular-structural-directives-b54ea21b39a7 
angular-template-directives,    let, range, https://github.com/vmasek/ng-beer-directives.git 
angular-template-directives,    let, range, C:\Users\Hans\web\frontend\angular\angular-directives\let-and-range-directive 
angular-directives,     	tomasz kula, angular directives, https://netbasal.com/angular-directive-selectors-can-do-more-than-you-think-7aefa4e6f30 
angular-directives,     	tomasz kula, attribute directives, https://netbasal.com/attribute-directives-angular-forms-b40503643089 
