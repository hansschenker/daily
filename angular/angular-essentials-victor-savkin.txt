Angular Essentials
-------------------------------------------

Compiler
---------------------------------------------
At the core of Angular is a sophisticated compiler, which takes a NgModule type and produces an NgModuleFactory.

The compiler will take the template of every component in the module, and using information about declared
components and pipes, and will produce a component factory.

Angular 1 is a sophisticated HTML compiler that generates code at runtime.

Angular 2+ compilers have an additional option: they can run the compiler as part of the application build,
or ahead of time (AOT)
Pros: no need to ship the compiler, Typescript can analyze the produced build code for errors, treeshaking is enabled
improve bootstrap time (no compilation step necessary)

Cons: the most part of Angular must be static (typed) in the form of classes and decorators so that Angular compiler
has all the necessary information and can use the help of the Typescript compiler for the static type checking.


NgModules
-------------------------------------------------
NgModules are the unit of compilation and distribution (lazy loading) of Angular components and pipes. 
they have declarations, imports, and exports.

NgModules are the units of compilation. They tell Angular how components should be compiled.
Similar to ES module they have declarations, imports, and exports.
Every component belongs to a NgModule.
Bootstrap and entry components are configured in NgModules.
NgModules configure dependency injection.
NgModules are used to bootstrap applications.
NgModules are used to lazy load code.


Providers
--------------------------------------------------
A provider is an object declared to Angular so that it can be injected in the constructor of your 
components, directives and other classes instantiated by Angular. ... 
A service is a particular type of provider that is declared with its class name.

Components and Directives
-------------------------------------------------
A component is a directive with a template.

To build an Angular application you define a set of components, 
for every UI element, screen, and route. 
An application will always have root components (usually just one) that contain all other components.

	App -> root component
	Feature -> root component

Root component (root of the tree of components)
--------------------------------------------
- place for the router-outlet (render routes)
- start for change detection
- start for dependency 

Component interface (public API)
------------------------------------------------
Input() : parent - child message
Output(): child - parent message

tap into ngOnChanges(changes) to get the changes from Input()


Component has a Template
-----------------------------------------------
A component has a template, which describes how the component is rendered on the page

Component has Lifecycles
----------------------------------------------

Component define what their dependencies are via Providers
--------------------------------------------------------------
Components have a well-defined lifecycle, which you can tap into

A component can configure dependency injection by defining the list of 
providers the component and its children may inject.

Component can interact with Host Element (place in the DOM)
-----------------------------------------------------------------
To turn an Angular component into something rendered in the DOM you have to 
associate an Angular component with a DOM element. We call such elements host elements.

A component can interact with its host DOM element in the following ways:

It can listen to its events.
It can update its properties.
It can invoke methods on it.

  sample DOM Input element as Host Element
  ---------------------------------------
  @HostBinding() value: string;

  @HostListener("input", "$event.target.value")
  onChange(updatedValue: string) {
    this.value = updatedValue.trim();
  }

Component can interact with its content children and view children
@ContentChild, @ContentChildren // content Children - content projected children
@ViewChild, @ViewChildren       // view children - component view children

Component Recap
-------------------------------------------
 - knows how to interact with its host element.
 - knows how to interact with its content and view children.
 - knows how to render itself (template).
 - defines its dependencies and configures it via dependency injection (providers).
 - has a well-defined public API of input and output properties. (@Input(), @Output())

 Angular components are self-describing, so they contain all the information needed to instantiate them.
 This means that any component can be bootstrapped. 
 It does not have to be special in any way. 
 
any component can:
 - be loaded into a router outlet. 
 - be bootstrapped as an application, 
 - loaded as a route
 - loaded in some other component directly. 

Directives
----------------------------------------------------

Templates
-----------------------------------------------------
In modern web development, there are two main techniques for describing what components render: 
 - using JavaScript (React)
 - using templates (Angular)

Templates can be analyzable, transformable, and declarative in a way that JavaScript fundamentally cannot be. 
When designing Angular we put a lot of effort to make sure the template language has these properties

Property and Event Bindings (Data Binding)
--------------------------------------------------------------------------------------------------------------
Input and output properties are the public API of a directive. 
Data flows into a directive via its inputs and flows out via its outputs. 

Property Binding
-----------------
We can update input properties using property bindings
Only the input properties of a component can be updated using property bindings. 
This separates the input of the component from its internal state

Event Binding
-------------
And we can subscribe to output properties using event bindings.
Angular uses the Rx style of programming to deal with events. 
EventEmitter is an implementation of both the observable and observer interfaces. 
So we can use it to fire events, and Angular can use it to listen to events.

Template Reference Variables
----------------------------
References
It is not uncommon to have two components that have to talk to each other. 
To enable that Angular supports defining references in the template.

<confirmation-dialog #dialog></confirmation-dialog> 
<button (click)="dialog.open()">Open</button>
The references get hoisted, so their order does not matter.

Template Directives: * - *ngFor, *ngIf, *ngSwitch, ...
---------------------------------------------------------------------------
They are used to create views, chunks of DOM you can dynamically manipulate. 
The * syntax is a shortcut that lets you avoid writing the whole <template> element. 

Dependency Injection
-----------------------------------------------------------------------------
If you have a component that depends on a service. You do not create that service yourself. 
Instead, you request one in the constructor, and the framework will provide you one. 
By doing so you can depend on interfaces rather than concrete types. 
This leads to more decoupled code, which enables testability, and other great things.

Injector Tree
----------------------------------------------------------------------------
Now you know that the dependency injection configuration has two parts:

 - Registering providers: How and where an object should be created.
 - Injecting dependencies: What an object depends on.

And everything an object depends on (services, directives, and elements) is injected into its constructor. 
To make this work the framework builds a tree of injectors.

First, every DOM element with a component or a directive on it gets an injector. 
This injector contains the component instance, 
all the providers registered by the component, and a few “local” objects (e.g., the element).

Second, when bootstrapping an NgModule, Angular creates an injector using the module and the providers defined there.

Injector Resolution
--------------------------------------------------------------------
Angular will start with the injector of the talks component itself. 
Then, if it is unsuccessful, it will climb up to the injector of the app component, 
and, finally, will move up to the injector created from AppModule

Lazy Loading
The setup gets more complex once you start using lazy-loading.

Lazy-loading a module is akin to bootstrapping a module in that it creates a new injector out of the module 
and plugs it into the injector tree. 

Injector Visibility (which Injector will be used)
-----------------------------------------------------------------------------
Controlling Visibility
You can be more specific where you want to get dependencies from. For instance, you can ask for another directive on the same element.

class CustomInputComponent {
  constructor(@Self() f: FormatterDirective) {}
}
Or you can ask for a directive in the same template, i.e., you can only inject an ancestor directive from the same HTML file.

class CustomInputComponent {
  constructor(@Host() f: CustomForm) {}
}
Finally, you can ask to skip the current element, which can be handy for decorating existing providers or building up tree-like structures.

class SomeComponent {
  constructor(@SKipSelf() ancestor: SomeComponent) {}
}
Optional Dependencies
To mark a dependency as optional, use the Optional decorator.

class Login {
  constructor(@Optional() service: LoginService) {}
}

Recap Dependency Injection
------------------------------------------------------------------------
Dependency injection is a key component of Angular.

You can configure dependency injection 
 - at the component 
 - or module level.

Dependency injection allows us to depend on interfaces rather than concrete types.
(code against interfaces not concrete types - no new in the class)

This results in more decoupled code.
This improves testability.

Change Detection
----------------------------------------------------------------------
Two Phases

Angular separates 
 - updating the application model and 
 - reflecting the state of the model in the view into two distinct phases. 

The developer is responsible for updating the application model. 
Angular via bindings, by means of change detection, is responsible for reflecting the state of the model in the view. 

The framework does it automatically on every VM turn.

view to state: (), capture browser event or component output
--------------------
Event bindings, which can be added using the () syntax, can be used to capture a browser event or component output 
to execute some function on a component or a directive. So they often trigger the first phase.

state to view: []
--------------------
Property bindings, which can be added using the [] syntax, should be used only for reflecting the state of the model in the view.

State or Model
----------------------------------------------------
Next, define the feature model that will store the state of our application.

Talk ViewModel
---------------------
{
  "filters": {"speakers": "Rich Hickey"},
  "talks": [
    {
      "id":898,
      "title": "Are we there yet",
      "speaker": "Rich Hickey",
      "yourRating":null,
      "rating": 9.1
    },
  ]
}

Change Detection Cycle
---------------------------------------------------------------------
First, change detection goes through every component in the component tree to check if the model it depends on changed. 
And if it did, it will update the component

2 phases: 1 - model update , 2 - render view
----------------------------------------------------
model update and the view state propagation are separated.

Application model have state changes
------------------------------------------------------
it is natural to have cycles in the application model. So the framework should support it. 

Html is a tree like structure
----------------------------
On the other hand, html forces components to form a tree structure. 
We can take advantage of this and make the system more predictable.

Change Detection flow
---------------------------------------------------------
Angular does not make any assumptions about what a component depends upon. 

So it has be conservative and 
 - check every template of every component 
 - on every browser event. 

Since the framework has to do it for every component, 

it might become a performance problem 
even though the change detection in the new versions of Angular got way faster.

Change Detection Recap
------------------------------------------------------------------------
- Angular separates updating the application model and updating the view.
- Event bindings are used to update the application model.
- Change detection uses property bindings to update the view. 
- Updating the view is unidirectional and top-down. 
- This makes the system more predictable and performant.
- We make the system more efficient by using the OnPush change detection strategy 
  for the components that depend on immutable input and only have local mutable state.

Forms
-------------------------------------------------------------------------------------------
2 kind of of Form Handling:

Template driven (with directives in html) - FormsModule
Reactive Forms (form model in class) - ReactiveFormsModule

App Model <-> Form Model (ngModel) <-> Form Directives (control value accessors) <-> DOM

App Model
------------------------
The app model is an object provided by the application developer. 
It can be a JSON object fetched from the server, or some object constructed on the client side. 
Angular doesn’t make any assumptions about it.

Form Model
---------------------------
The form model is a UI-independent representation of a form. 

It consists of three building blocks: 
 - FormControl, 
 - FormGroup, and 
 - FormArray. 

 Both FormsModule and ReactiveFormsModule use this model.

Form Directives
------------------------------
These are the directives connecting the form model to the DOM (e.g., NgModel). 

FormsModule : ngForm -> ngModel -> input name="speaker" // input bound to formControl "speaker" add to formGroup
----------------------------
- ngForm, ngModel, name, ngOnSubmit
the NgModel and NgForm directives.

- NgForm directive gets instantiated at 
  <form (submit)="applyFilters()">. This directive creates an empty FormGroup.

- NgModel directive gets instantiated at 
  <input [(ngModel)]="speaker" name="speaker" placeholder="Speaker">. T
his directive creates a FormControl and adds it to the FormGroup created by the encompassing NgForm.

ReactiveFormsModule 
------------------------
- [formGroup], [formControlName], [formArrayName]


DOM
--------------------------
These are ours inputs, checkboxes, and radio buttons.

Form Model
---------------------------
login.setValue('newLogin');
password.setValue('newPassword');

// will print:
// login value updates to 'newLogin'
// form value updates to {login: 'newLogin', password: ''}
// password value updates to 'newPassword'
// password status updates to 'VALID'
// form value updates to {login: 'newLogin', password: 'newPassword'}
// form status updates to 'VALID'
As you can see the value of the form has been updated twice. We can prevent this by setting the value on the form itself.

const c = new FormGroup({login, password});
c.setValue({login: 'newLogin', password: 'newPassword'});

// will print:
// login value updates to 'newLogin'
// password value updates to 'newPassword'
// password status updates to 'VALID'
// form value updates to {login: 'newLogin', password: 'newPassword'}
// form status updates to 'VALID'
We can also prevent the events from being emitted altogether by passing emitEvent: false.

Reactive Form: valueChanges, statusChanges
--------------------------------------------------------------------------------------------------------
Since valueChanges and statusChanges are RxJS observables, we can use the rich set of RxJS combinators 
to implement powerful user interactions in a just a few lines of code.

Why Form Model?
---------------------------------------------------
The form model is a UI-independent way to represent user input comprising simple controls (FormControl) 
and their combinations (FormGroup and FormArray), where:

Each control has a value.
Each control has a status.
Each control has validators
Each control can be disabled.
Each control emits events.

Having this model has the following advantages:

- Form handling is a complex problem. Splitting it into UI-independent and UI-dependent parts makes them easier to manage.
- We can test form handling without rendering UI.
- Having the form model makes reactive forms possible (see below).

Form Directives
-----------------------------------------------
Abstractly describing input is all well and good, but at some point we will need to connect it to the UI.

