import { NgFor, NgIf } from '@angular/common';
import { Component, OnInit, inject } from '@angular/core';
import { Component, computed, effect, inject, signal } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { RouterLinkWithHref } from '@angular/router';
import { LetDirective } from '@ngrx/component';
import { provideComponentStore } from '@ngrx/component-store';
import { debounceTime, distinctUntilChanged, skipWhile, tap } from 'rxjs';
import {
  EMPTY,
  catchError,
  debounceTime,
  distinctUntilChanged,
  filter,
  finalize,
  pipe,
  startWith,
  switchMap,
  tap,
} from 'rxjs';
import { Photo } from '../photo.model';
import { PhotoStore } from './photos.store';
import { PhotoService } from '../photos.service';
import { computedFrom } from '../utils/computed';

const PHOTO_STATE_KEY = 'photo_search';

@Component({
  selector: 'app-photos',
@@ -32,88 +46,122 @@ import { PhotoStore } from './photos.store';
      <input
        type="text"
        matInput
        [formControl]="search"
        [formControl]="searchForm"
        placeholder="write an article" />
    </mat-form-field>
    <ng-container *ngrxLet="vm$ as vm">
      <section class="flex flex-col">
        <section class="flex gap-3 items-center">
          <button
            [disabled]="vm.page === 1"
            [class.bg-gray-400]="vm.page === 1"
            class="text-xl border rounded-md p-3"
            (click)="store.previousPage()">
            <
          </button>
          <button
            [disabled]="vm.endOfPage"
            [class.bg-gray-400]="vm.endOfPage"
            class="text-xl border rounded-md p-3"
            (click)="store.nextPage()">
            >
          </button>
          Page :{{ vm.page }} / {{ vm.pages }}
        </section>
        <mat-progress-bar
          mode="query"
          *ngIf="vm.loading"
          class="mt-5"></mat-progress-bar>
        <ul
          class="flex flex-wrap gap-4"
          *ngIf="vm.photos && vm.photos.length > 0; else noPhoto">
          <li *ngFor="let photo of vm.photos; trackBy: trackById">
            <a routerLink="detail" [queryParams]="{ photo: encode(photo) }">
              <img
                src="{{ photo.url_q }}"
                alt="{{ photo.title }}"
                class="image" />
            </a>
          </li>
        </ul>
        <ng-template #noPhoto>
          <div>No Photos found. Type a search word.</div>
        </ng-template>
        <footer class="text-red-500">
          {{ vm.error }}
        </footer>
    <section class="flex flex-col">
      <section class="flex gap-3 items-center">
        <button
          [disabled]="page() === 1"
          [class.bg-gray-400]="page() === 1"
          class="text-xl border rounded-md p-3"
          (click)="previousPage()">
          <
        </button>
        <button
          [disabled]="endOfPage()"
          [class.bg-gray-400]="endOfPage()"
          class="text-xl border rounded-md p-3"
          (click)="nextPage()">
          >
        </button>
        Page :{{ page() }} / {{ pages() }}
      </section>
    </ng-container>
      <mat-progress-bar
        mode="query"
        *ngIf="loading()"
        class="mt-5"></mat-progress-bar>
      <ul
        class="flex flex-wrap gap-4"
        *ngIf="photos() && photos().length > 0; else noPhoto">
        <li *ngFor="let photo of photos(); trackBy: trackById">
          <a routerLink="detail" [queryParams]="{ photo: encode(photo) }">
            <img
              src="{{ photo.url_q }}"
              alt="{{ photo.title }}"
              class="image" />
          </a>
        </li>
      </ul>
      <ng-template #noPhoto>
        <div>No Photos found. Type a search word.</div>
      </ng-template>
      <footer class="text-red-500">
        {{ error() }}
      </footer>
    </section>
  `,
  providers: [provideComponentStore(PhotoStore)],
  host: {
    class: 'p-5 block',
  },
})
export default class PhotosComponent implements OnInit {
  store = inject(PhotoStore);
  readonly vm$ = this.store.vm$.pipe(
    tap(({ search }) => {
      if (!this.formInit) {
        this.search.setValue(search);
        this.formInit = true;
      }
    })
export default class PhotosComponent {
  private photoService = inject(PhotoService);

  searchForm = new FormControl('', { nonNullable: true });

  readonly page = signal(1);
  readonly loading = signal(false);
  readonly error = signal('');
  readonly endOfPage = computed(() => this.page() >= this.pages());

  readonly search = toSignal(
    this.searchForm.valueChanges.pipe(
      filter((search) => search.length >= 3),
      debounceTime(300),
      distinctUntilChanged()
    ),
    { initialValue: '' }
  );

  readonly photosAPI = computedFrom(
    [this.search, this.page],
@eneajaho eneajaho 19 hours ago
Suggested change
    [this.search, this.page],
    [this.searchForm.valueChanges, this.page],
@eneajaho eneajaho 19 hours ago
Or what we can do is to extract the valueChanges to it's own variable with filtering, debouncing and other stuff.

searchFormChanges$ =  this.searchForm.valueChanges.pipe(
  filter(([search]) => search.length >= 3),
  debounceTime(300),
  distinctUntilChanged(),
);
and use it as:

readonly photosAPI = computedFrom(
  [this.searchFormChanges$, this.page],
  pipe(
    tap(() => this.loading.set(true)),
    switchMap(([search, page]) =>
      this.photoService.searchPublicPhotos(search, page).pipe(
        catchError((err: unknown) => {
          this.error.set(JSON.stringify(err));
          return EMPTY;
        }),
        finalize(() => this.loading.set(false))
      )
    ),
    startWith({ photos: { photo: [] as Photo[], pages: 0 } })
  )
);
This way we don't have to debounce the api call if the page changes, but we want it only when doing the search in the input.

Owner
Author
@tomalaforge tomalaforge 17 hours ago
yes I thought of it during lunch break. I didn't like the subscribe and the distinctUntilChange with the custom function.

And you are right about the debounceTime, it's not needed for page change.

Thanks for the review and nice work on the computedFrom. 👍

Owner
Author
@tomalaforge tomalaforge 17 hours ago
I still need the search property as a signal because i listen to it inside my effect to save it inside the localStorage, but using toSignal is still nicer than using a subscribe function.

    pipe(
      tap(() => this.loading.set(true)),
      switchMap(([search, page]) =>
        this.photoService.searchPublicPhotos(search, page).pipe(
          catchError((err: unknown) => {
            this.error.set(JSON.stringify(err));
            return EMPTY;
          }),
          finalize(() => this.loading.set(false))
        )
      ),
      startWith({ photos: { photo: [] as Photo[], pages: 0 } })
    )
  );

  private formInit = false;
  search = new FormControl();
  readonly photos = computed(() => this.photosAPI().photos.photo);
  readonly pages = computed(() => this.photosAPI().photos.pages);

  ngOnInit(): void {
    this.store.search(
      this.search.valueChanges.pipe(
        skipWhile(() => !this.formInit),
        debounceTime(300),
        distinctUntilChanged()
  constructor() {
    this.initStore();
    effect(() =>
      localStorage.setItem(
        PHOTO_STATE_KEY,
        JSON.stringify({ search: this.search(), page: this.page() })
      )
    );
  }

  nextPage = () => this.page.update((p) => p + 1);
  previousPage = () => this.page.update((p) => p - 1);

  trackById(index: number, photo: Photo) {
    return photo.id;
  }

  encode(photo: Photo) {
    return encodeURIComponent(JSON.stringify(photo));
  }

  private initStore() {
    const savedJSONState = localStorage.getItem(PHOTO_STATE_KEY);
    if (savedJSONState === null) return;
    const savedState = JSON.parse(savedJSONState);

    this.searchForm.setValue(savedState.search);
    this.page.set(savedState.page);
  }
}
 135 changes: 0 additions & 135 deletions135  
apps/interop-rxjs-signal/src/app/list/photos.store.ts
This file was deleted.

 79 changes: 79 additions & 0 deletions79  
apps/interop-rxjs-signal/src/app/utils/computed.ts
@@ -0,0 +1,79 @@
import { isSignal, Signal, untracked } from '@angular/core';
import { toObservable, toSignal } from '@angular/core/rxjs-interop';
import {
  combineLatest,
  distinctUntilChanged,
  from,
  isObservable,
  ObservableInput,
  of,
  OperatorFunction,
  take,
} from 'rxjs';

export type ObservableSignalInput<T> = ObservableInput<T> | Signal<T>;

/**
 * So that we can have `fn([Observable<A>, Signal<B>]): Observable<[A, B]>`
 */
type ObservableSignalInputTuple<T> = {
  [K in keyof T]: ObservableSignalInput<T[K]>;
};

export function computedFrom<Input extends readonly unknown[], Output = Input>(
  sources: readonly [...ObservableSignalInputTuple<Input>],
  operator?: OperatorFunction<Input, Output>
): Signal<Output>;

export function computedFrom<Input extends object, Output = Input>(
  sources: ObservableSignalInputTuple<Input>,
  operator?: OperatorFunction<Input, Output>
): Signal<Output>;

export function computedFrom(
  sources: any,
  operator?: OperatorFunction<any, any>
): Signal<any> {
  let { normalizedSources, initialValues } = Object.entries(sources).reduce(
    (acc, [keyOrIndex, source]) => {
      if (isSignal(source)) {
        acc.normalizedSources[keyOrIndex] = toObservable(source);
        acc.initialValues[keyOrIndex] = untracked(source);
      } else if (isObservable(source)) {
        acc.normalizedSources[keyOrIndex] = source.pipe(distinctUntilChanged());
        source.pipe(take(1)).subscribe((attemptedSyncValue) => {
          if (acc.initialValues[keyOrIndex] !== null) {
            acc.initialValues[keyOrIndex] = attemptedSyncValue;
          }
        });
        acc.initialValues[keyOrIndex] ??= null;
      } else {
        acc.normalizedSources[keyOrIndex] = from(source as any).pipe(
          distinctUntilChanged()
        );
        acc.initialValues[keyOrIndex] = null;
      }

      return acc;
    },
    {
      normalizedSources: Array.isArray(sources) ? [] : {},
      initialValues: Array.isArray(sources) ? [] : {},
    } as {
      normalizedSources: any;
      initialValues: any;
    }
  );

  normalizedSources = combineLatest(normalizedSources);
  if (operator) {
    normalizedSources = normalizedSources.pipe(operator);
    operator(of(initialValues))
      .pipe(take(1))
      .subscribe((newInitialValues) => {
        initialValues = newInitialValues;
      });
  }

  return toSignal(normalizedSources, { initialValue: initialValues });
}
