- heavily on the use of observables for all actions inside a component

- avoid having to manually unsubscribe any subscription

- being able to use ChangeDetectionStrategy.onPush

- solution with no dependencies

- must be applicable in all cases

- use observables for user interactions 
- use observables for state changes
- subscribe to state changes for ui rendering

 Redux like pattern
 ------------------------------------------------------------------------
 user action -> state change -> render state change subscription

 Angular Viewmodel three basic principles:
 ----------------------------------------
- each component has a viewmodel in form of one observable vm (merge all obs into vm)
- all changes to the viewmodel result from a single (composed) observable vm
- the viewmodel observable is defined as an observable of viewmodel mutation functions inside scan operator

 Viewmodel mutation functions
 -----------------------------
 map any observable to a change in the viewmodel
 scan operator allows to track viewmodel state changes

export interface Item {
  id?: number;
  name: string;
}

export interface ViewModel<T extends Item> {
  item: T;
  items: T[];
  searchItem?: T;
  searchItems?: T[];
  selectedItem?: T;
  pageItems: T[];
}

component
------------------------------------------------------------------
const CounterVm: ViewModel<number>

public incChange = new Subject<number>; 
public decChange = new Subject<number>;

vm$
------------------------------------
public vm$ : Observable<CounterVm>;

// track user actions
public incChange = new Subject<number>;
public decChange = new Subject<number>;

constructor
----------------------------------------
map user action into state change on  vm
-----------------------------------------
const incrState$ = this.incrChange.pipe(
 map( delta => (vm:CounterVm) => ({...vm, counter:vm.counter+delta}) )
 );
 const decrState$ = this.decrChange.pipe(
 map( delta => (vm:CounterVm) => ({...vm, counter:vm.counter-delta}))
 );

merge all user actions into vm$ and track user action data
----------------------------------------------------------
this.vm$ = merge(of({counter:0}), incr$, decr$).pipe(
 scan( (prevVm:ICounterVm, mutationFn:(vm:ICounterVm)=>ICountVm) 
 => mutationFn(prevVm)
 )
 )

component view: subscribes with async pipe to vm$ and exposes locaal variable vm
---------------------------------------------------------------------------------
<!-- vm$ is subscribed by async pipe and exposes a variable named vm -->
<div *ngIf="vm$ | async as vm">
 Current counter : {{vm.counter}}
 <button type="button" (click)="decrChange.next(1)">Decrement</button>
 <button type="button" (click)="incChange.next(1)">Increment</button> 
</div>
-------------------------------------------------------------------

rxjs patterns used in the viewmodel approach
---------------------------------------------------------------------------------
  vm$
  -----
- merge to create the composed viewmodel observable

  accumulate state changes with scan
  ----------------------------------
- scan to accumulate viewmodel mutations and to optimize client side filtering

  track user actions with subjects (invoke a data change)
  -------------------------------------------------------
- subjects to perform interactions from the view on the viewmodel

  when updating data on server use mergeMap and map the returned data
  -----------------------------------------------------------
- mergeMap to map to a server request for updates

  when reading id parameter from router paramMap use switchMap to just run request once with this parameter value
  ----------------------------------------------------------------------------------------------------------------
- switchMap to map to server requests retrieving data which may be cancelled

  with the map operator you can use the mapped value to call vm mutation function with this value (object)
  ---------------------------------------------------------------------------------------------------------
- map to transform data especially data to a viewmodel mutation

  when you have multiple subscribers use share
  ---------------------------------------------------------------------------------------------------------
- share to prevent multiple executions of a part of the pipeline when subscribing 

  when you invoke one observable multiple times use shareReplay(1) to cache last request
  -------------------------------------------------------------------------------------------------------------
  multiple times to an observable

- shareReplay to cache data to be used in mulitple components


