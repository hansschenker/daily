Corbin Crutchley: https://unicorn-utterances.com/posts/angular-templates-start-to-source
-------------------------------------------------------------------------------------------
 
a comprehensive list of all template related APIs

ng-template
-----------
Templates are a concept in Angular that allow you to group together 
- a set of html elements sprinkled with angular directives

<ng-template #falseTemp>
	<p>False</p>
</ng-template>

<p *ngIf="false; else falseTemp">True</p>

ngTemplateOutlet  - render a template with template outlet directive
------------------------------------------------
Inserts an embedded view from a prepared TemplateRef


<ng-template [ngTemplateOutlet]="demo">
<p>demo</p>
</ng-template<

<ng-template #demo>
demo
</ng-template>

ngTemplateOutletContext
-------------------------
You can attach a context object to the EmbeddedViewRef by setting [ngTemplateOutletContext]. 
[ngTemplateOutletContext] should be an object, the object's keys will be available 
for binding by the local template let declarations.

<ng-container *ngTemplateOutlet="templateRefExp; context: contextExp">

</ng-container>

render a template based on context input from the view
------------------------------------------------------
@Component({
  selector: 'ng-template-outlet-example',
  template: `
    <ng-container *ngTemplateOutlet="greet"></ng-container>
    <hr>
    <ng-container *ngTemplateOutlet="eng; context: myContext"></ng-container>
    <hr>
    <ng-container *ngTemplateOutlet="svk; context: myContext"></ng-container>
    <hr>

    <ng-template #greet><span>Hello</span></ng-template>
    <ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>
    <ng-template #svk let-person="localSk"><span>Ahoj {{person}}!</span></ng-template>
`
})
export class NgTemplateOutletExample {
  myContext = {$implicit: 'World', localSk: 'Svet'};
}


render a template based on context input from a directive
--------------------------------------------------------
- get a reference in the constructor of the directive of
  - parent as ViewContainerRef
  - the template to render
  - in the ngOninit: this parent.createEmbeddedView(this.templateToRender)
- in a user component
  write the template: ng-template renderTheTemplate (is the attribute selector to the directive

Templates from Directives
--------------------------------------------------------------------------------------
you can do template manipulations from a directive
- create a template
- create a view container from a directive
  - you can get a reference to the template/element from the d
 
 
TemplateRef

EmbeddedViewRef

ViewContent/ViewChildren

ViewContainerRef

createEmbeddedView

Template Directives (Structural Directives (such as *ngIf))

Introduction To Templates
--------------------------

html 5 template
------------------


angular template
------------------

Template Reference Variable Scope
-----------------------------------------------------------------
A template reference variable is a variable assigned to a tag so that other items 
in the same template are able to reference that tag

View Manipulation
------------------------------------------------------------------
- Properties of elements in a view can change dynamically, in response to user actions; 
- the structure (number and order) of elements in a view can't. 

ViewContainer for adding and removing Views (in DOM just a html comment)
------------------------------------------------------------------------
You can change the structure of elements by 
- inserting, 
- moving, or 
- removing nested views within their view containers.

Embed Views: vcrRef.createEmbeddedView(this.tplRef)
-----------------------------------------------------------------------
While we've covered how to insert a component using ngTemplate, Angular also allows you to 
- find, 
- reference, 
- modify, and 
- create them yourself in your component/directive logic

export class AppComponent implements OnInit {
	@ViewChild('vcrRef', {read: ViewContainerRef, static: true}) vcrRef;
	@ViewChild('tpl', {read: TemplateRef, static: true}) tplRef;
	ngOnInit() {
		this.vcrRef.createEmbeddedView(this.tplRef);
	}
}

Accessing Templates from a Directive
----------------------------------------------------------------------------------------
Thus far, we've only used components to change and manipulate templates. 
However, as we've covered before, directives and components are the same under-the-hood. 
As a result, we have the ability to manipulate templates in the same way using directives 
rather than components. Let's see what that might look like:

@Directive({
	selector: '[renderTheTemplate]'
})
export class RenderTheTemplateDirective implements OnInit {
	constructor (private parentViewRef: ViewContainerRef) {
	}
	@ContentChild(TemplateRef, {static: true}) templ;
	ngOnInit(): void {
		this.parentViewRef.createEmbeddedView(this.templ);
	}
}
@Component({
	selector: 'my-app',
	template: `
		<div renderTheTemplate>
			<ng-template>
					<p>Hello</p>
			</ng-template>
		</div>
	`
})
export class AppComponent {}
