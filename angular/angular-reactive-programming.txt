-----------------------------------------------------
ngx-template-streams (kwinten pisman, dominik elm)
--------------------------------------------------
Small and lightweight Angular library that embraces reactivity and 
supercharges templates with Observables https://www.npmjs.com/package/@typeby

<button (*click)="clicks$">Click Me (Stream)</button>

import { Component, OnInit } from '@angular/core';
import { ObservableEvent } from '@typebytes/ngx-template-streams';
import { Observable } from 'rxjs';

@Component({...})
export class AppComponent implements OnInit {
  @ObservableEvent()
  clicks$: Observable<any>;

  ngOnInit() {
    // we can either manually subscribe or use the async pipe
    this.clicks$.subscribe(console.log);
  }
}

-------------------------------------------------------------------
Observable-Utils, Sander Elias
-------------------------------------------------------------------
npm i @se-ng/observable-utils

A easy way to create a observable model. It replaces combineLatest([a,b]).map(([a,b])=>({a,b})) 
It removes the duplications from that, and makes sure typing flow correctly.

const invoice$ = modelFromLatest<testModel>({
  customer: customer$,
  invoiceHeader: ivh$,
  invoiceLines: ivh$.pipe(switchmap(ivh => this.loadLines(ivh.id)))
});

export class DemoComponent  {
  state$ = new BehaviorSubject({
    searchText: '',
    counter: 0
  });
  setState = createSetStateMethod(this.state$);
  getState = createGetStateMethod(this.state$)
 
  async modifyCounterWith(delta:number) {
    const oldval = this.getState('counter')
    this.setState('counter', oldVal+delta)
  }

setState
----------------------
The setState method that is created on the class is fully typed. It takes 2 kind of parameters.

this.setState('propname',newValue) 

where propname is a string, typechecked to exist in the state$, 
and newValue is a new value for that property, that is also typechecked against the state$

this.setState({prop1:val, prop2:val}) 
where it takes an object, that must be a partial of state$, and is typechecked for that.

getState
---------------------
The getState method that is created on the class. It takes 0 to 1 parameter:

this.getState()without parameter, 
will return a promise with the full content of the state$

this.getState('propname') 
the propname is a string that must exist (and is type checked), 
returns a promise with the properties value out of state$

this.getState(['propname1','propname2'])will return a promsise with a partial out of state$,

---------------------------------------------------------------------------------------
Michael Pearson - Angular is not enough reactive
----------------------------------------------------------------------------------------
import {Directive, Input} from '@angular/core';
import {NgControl} from '@angular/forms';

@Directive({
    selector: '[disableControl]',
})
export class DisableControlDirective {
    @Input()
    set disableControl(disabled: boolean) {
        const method = disabled ? 'disable' : 'enable';
        this.ngControl.control[method]();
    }

    constructor(private ngControl: NgControl) {}
}
-----------------------------
import {Directive, Input} from '@angular/core';

@Directive({
    selector: '[disableFormGroup]',
})
export class DisableFormGroupDirective {
    @Input() form: any;
    @Input() formGroupName: string;
    @Input()
    set disableFormGroup(disabled: boolean) {
        const method = disabled ? 'disable' : 'enable';
        this.form.get(this.formGroupName)[method]();
    }
}
---------------------------------------------------------
import {Directive, Input} from '@angular/core';
import {NgControl} from '@angular/forms';

@Directive({
    selector: '[setValue]',
})
export class SetValueDirective {
    @Input()
    set setValue(val: any) {
        this.ngControl.control.setValue(val);
    }

    constructor(private ngControl: NgControl) {}
}
------------------------------
import {Directive, Input} from '@angular/core';

@Directive({
    selector: '[patchFormGroupValues]',
})
export class PatchFormGroupValuesDirective {
    @Input() formGroup: any;
    @Input()
    set patchFormGroupValues(val: any) {
        if (!val) return;
        this.formGroup.patchValue(val, {emitEvent: false});
    }
}
-------------------------------------------------
import {
  Component,
  Input,
  OnChanges,
  SimpleChanges,
  OnDestroy,
} from '@angular/core';
import {
  MatDialogRef,
  MatDialogConfig,
  MatDialog,
} from '@angular/material/dialog';
import { Observable } from 'rxjs';


// Separate files
export interface AppDialogState {
  [index: string]: Observable<any>;
}

export interface AppDialogActions {
  [index: string]: Function;
}

@Component({
  selector: 'app-dialog-content-component',
  template: '',
})
export class DialogContentComponent {
  state: AppDialogState;
  actions: AppDialogActions;
}


@Component({
  selector: 'app-dialog',
  templateUrl: './app-dialog.component.html',
  styleUrls: ['./app-dialog.component.scss'],
})
export class AppDialogComponent
  implements OnChanges, OnDestroy, DialogContentComponent {
  // Can't find a type that this.dialog.open likes without importing something obscure
  @Input() component: any;
  @Input() state: AppDialogState = {};
  @Input() actions: AppDialogActions = {};
  @Input() open = false;
  @Input() config: MatDialogConfig;

  dialogRef: MatDialogRef<any>;

  constructor(public dialog: MatDialog) {}

  ngOnChanges(changes: SimpleChanges) {
    if (changes.open) {
      this.applyDialogState(changes.open.currentValue);
    }
  }

  ngOnDestroy() {
    // setTimeout because applyDialogState is sometimes on a timeout
    // when this runs and can reopen the dialog
    // after this component is already destroyed.
    setTimeout(() => this.closeDialog());
  }

  applyDialogState = (shouldBeOpen: boolean) => {
    setTimeout(() => {
      // Change detection console error without this
      const isOpen = !!this.dialogRef;
      if (!isOpen && shouldBeOpen) {
        this.openDialog();
      } else if (isOpen && !shouldBeOpen) {
        this.closeDialog();
      }
    });
  };

  openDialog() {
    this.dialogRef = this.dialog.open(this.component, this.config);
    this.dialogRef.componentInstance.state = this.state;
    this.dialogRef.componentInstance.actions = this.actions;
  }

  closeDialog() {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.dialogRef = undefined;
  }
}
-----------------------------------------------------------
async input
https://github.com/mfp22/ng-async-input
-----------------------------------------------------------
npm install @ng-reactive/async-input --save

Usage
import { Component, Input } from '@angular/core';
import { AsyncInput } from '@ng-reactive/async-input';
import { BehaviorSubject } from 'rxjs';

@Component({
  selector: 'app-hello',
  templateUrl: './hello.component.html',
  styleUrls: ['./hello.component.css']
})
export class HelloComponent {
  @Input() name: string;
  @AsyncInput() name$ = new BehaviorSubject('Default Name');

  constructor() {
    this.name$.subscribe(name => console.log('from async input', name));
  }
}
--------------------------------------------------------------------