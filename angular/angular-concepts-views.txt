Angular ViewContainer
---------------------
The view container keeps track of all of the embedded views in its control, and 
when you createEmbeddedView, it searches for the index to insert the view into.

view hierarchy
-----------------
A tree of related views that can be acted on as a unit. The root view referenced as the host view of a component. 

The view hierarchy explanation should come along with graphical visualisation. 

- ElementRef, 

- TemplateRef, 

- EmbeddedViewRef, 

- ViewRef, 

- ComponentRef, and 

- ViewContainerRef.

- The view hierarchy is a key part of Angular change detection.

Angular change detection
-------------------------------------------------------------------------------------
- The mechanism by which the Angular framework synchronizes the state of the UI of an application with the state of the data. 
- The change detector checks the current state of the data model whenever it runs, and maintains it as the previous state 
  to compare on the next iteration.

As the application logic updates component data, values that are bound to DOM properties in the view can change. The change detector is responsible for updating the view to reflect the current data model. Similarly, the user can interact with the UI, causing events that change the state of the data model. These events can trigger change detection.

Using the default change-detection strategy, the change detector goes through the view hierarchy on each VM turn to check every data-bound property in the template. In the first phase, it compares the current state of the dependent data with the previous state, and collects changes. In the second phase, it updates the page DOM to reflect any new data values.


If you set the OnPush change-detection strategy, the change detector runs only when explicitly invoked, or when it is triggered by an Input reference change or event handler. This typically improves performance. To learn more, see Optimize the change detection in Angular.


class decorator
A decorator that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.

The following decorators can declare Angular class types.

@Component()
@Directive()
@Pipe()
@Injectable()
@NgModule()


Data Binding
-------------------------------------------------------------------------------------------

A process that allows applications to display data values to a user and respond to user actions. 
User actions include 
- clicks, 
- touches, 
- keystrokes, and so on.

In data binding, you declare the relationship between an 

- HTML widget and 
- a data source and let the 
- framework handle synchronization
 
Data binding is an alternative to manually pushing application data values into HTML, 
attaching event listeners, pulling changed values from the screen, and updating application data values.

- Interpolation 		- text binding
- [Property] binding		- binding to model data in component
- (Event) binding		- component declares an event
- DOM [Attribute] binding
- CSS [class.isActive] and [style.border] binding
- Two-way data binding with ngModel , syntactic suger for [] + ()




root view
----------------
A host view is the root of a tree of embedded views, collected in a ViewContainerRef view container 
attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular change detection.

The view hierarchy does not imply a component hierarchy. Views that are embedded in the context 
of a particular hierarchy can be host views of other components. Those components can be in the 
same NgModule as the hosting component, or belong to other NgModules.

---------------------

Concept ViewContainer - an API to create and change views
-----------------------
The ViewContainer provides an API that makes changes or dynamic updates to an View safe. 
It contains two types of Views:

            from a TemplateRef
- Embedded: Views created from a TemplateRef instance.

        from a Component
- Host: Views created using a component factory.
  Any element can serve as a ViewContainer but it’s usually implemented via 

 <ng-container #vc></ng-container> 
 as it is rendered as a comment and will not introduce additional DOM elements.

To get a reference to the ViewContainer within your AppComponent annotate the reference like this:

export class AppComponent implements AfterViewChecked {
       @ViewChild('viewcontainer', {read: ViewContainerRef}) viewContainer: ViewContainerRef;
}
You can also constructor inject a ViewContainerRef like this:

constructor(private vc: ViewContainerRef) {  }
In this case the ViewContainerRef will use the component host element as the insertion point for any embedded or host views.

Angular View
------------------------

The smallest grouping of display elements that can be created and destroyed together. 
Angular renders a view under the control of one or more directives.

A component class and its associated template define a view. A view is specifically 
represented by a ViewRef instance associated with a component. A view that belongs immediately 
to a component is referenced as a host view. Views are typically collected into view hierarchies.

Properties of elements in a view can change dynamically, in response to user actions; 
the structure (number and order) of elements in a view cannot. You can change the structure 
of elements by inserting, moving, or removing nested views within their view containers.

View hierarchies can be loaded and unloaded dynamically as the user navigates through the 
application, typically under the control of a router.

--------------------
The View is something we route to. For example suppose our HomeComponent is routed to like this:

- can be routed to:
path:'home', component: HomeComponent
The template rendered by the HomeComponent is the View

View is live with the help of change detection
-----------------------------------------------
The View is the internal data structure that a component uses to represent itself and perform change detection.

- AppComponent will have an AppComponentView that corresponds to the 
  <app-component>  in the dom element found with the help of the component selector

  If that element is routed to then that’s a View.

  create component dynamically:
  ----------------------------
  When creating a components dynamically using a factory the View or Host View can be imperatively accessed like this:

  helloComponentRef:ComponentRef = helloComponentFactory.create();
  view: ViewRef = helloComponentRef.hostView;

