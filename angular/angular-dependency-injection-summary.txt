Angular Dependency Injection
---------------------------------
One of the most powerful and distinguishing features of Angular is its built-in dependency injection system.

If you notice, in Angular you have multiple places available where you can define the providers for your dependencies:

- level of app (default) {provideIn: 'root'}
- level of a module
- the level of a component
- even at the level of a directive!

 Angular dependency injection system is hierarchical
--------------------------------------------------------

- into a component, Angular is going to first try to find a provider for that dependency in the list of providers of that component.
- not find a provider at the level of the component itself try to find a provider in the parent component.
- ask the parent of the parent component if it has the provider that it needs, etc.
- repeated until we reach the root component of the application.

With hierarchical dependency injection, we can isolate sections of the application and 
give them their own private dependencies not shared with the rest of the application, 
we can have parent components share certain dependencies 
with its child components only but not with the rest of the component tree, etc.

An hierarchical dependency injection system allows us to build our system in a much more modular way, 
allowing us to share dependencies between different parts of the application only when and if we need to.


Provider Factory Function
--------------------------
In order for Angular to know how to create a dependency such as for example the CoursesService instance injected 
in the CourseCardComponent constructor, it needs what is known as a provider factory function.


function coursesServiceProviderFactory(http:HttpClient): CoursesService {
  return new CoursesService(http);
}


Inject Token - unique Identifier
---------------------------------

So how does Angular know what to inject where, and 
- what provider factory functions to call to create which dependency?
- uniquely identify a category of dependencies, we can define what is known as an Angular injection token.

export const COURSES_SERVICE_TOKEN = 
      new InjectionToken<CoursesService>("COURSES_SERVICE_TOKEN");


 providers: [
      {
      provide: COURSES_SERVICE_TOKEN,
      useFactory: coursesServiceProviderFactory,
      deps: [HttpClient]
    }
    ]

useFactory: 
----------
this should contain a reference to the provider factory function, 
that Angular will call when needed to create dependencies and inject them

provide: 
------
this contains the injection token linked to this type of dependency. 
The injection token will help Angular determine when a given provider factory function should be called or not

deps: 
-----
this array contains any dependencies that the useFactory function needs in order to run, in this case the HTTP client

We need to explicitly tell Angular that it should use our provider to create this dependency.

We can do so by using the @Inject annotation, everywhere where CoursesService is being injected:

export class CourseCardComponent  {

    constructor( @Inject(COURSES_SERVICE_TOKEN) private coursesService: CoursesService) {
      ...
    }
    ...
}

Using class names as Injection Tokens
---------------------------------------

use a Token
-------------
One of the most interesting features of the Angular dependency injection system, 
is that you can use anything that is guaranteed to be unique in the Javascript runtime 
in order to identify a type of dependency, it doesn't have to be an explicit injection token object.

use a Class name as Injection token
-------------------------------------
For example, in the Javascript runtime, class names are represented by constructor functions, 
and a reference to a function like for example its name is guaranteed to be unique at runtime.

A class name can then be uniquely represented at runtime by its constructor function, 
and because it's guaranteed to be unique, it can be used as an injection token.

  providers: [
      {
      provide: CoursesService,
      useClass: CoursesService,
      deps: [HttpClient]
    }
    ]

  providers: [CourseService]

Understanding Angular multiple value dependencies
------------------------------------------------
Most of the dependencies in our system will correspond to only one value, such as for example a class.

But there are some occasions where we want to have dependencies with multiple different values.

When to use an useExisting provider
---------------------------------------
Notice also the use of the useExisting option for creating a provider.

This option is useful when we want to create a provider based on another existing provider.

In this case, we want to define a provider in a simple way just by pointing to the ChooseQuantityComponent class name, 
which can be used as a provider as we have learned.


Understanding Angular Hierarchical Dependency Injection
---------------------------------------------------------
Unlike its previous AngularJs version, the Angular dependency injection system is said to be hierarchical.

Modules vs Components Dependency Injection Hierarchies
-----------------------------------------------------
What is actually happening is that there are two separate dependency injection hierarchies:

there is an hierarchy at the level of the components, that follows the tree structure of the components on the page
But there is also a separate injection hierarchy at the level of the modules
And the hierarchy at the level of the components takes precedence over the module injection hierarchy! 

DI along Componnent Tree or Module Tree
----------------------------------------
This system composed of two separate injection hierarchies allows us to modularize our application into two separate dimensions:
- component tree by using the component injection hierarchy
- modules injection hierarchy

Configuring the Dependency Injection Resolution mechanism
----------------------------------------------------------
As we have learned, the Angular component dependency injection resolution mechanism always starts 
at the current component, and scans for matching providers all the way up the root component of the application, 
and it doesn't find a matching dependency it throws an error


