// viewmodel
---------------------------------------------------------------
export type EditMode = 'Add' | 'Update'

export interface Viewmodel<T> {
    items: T[];
    selectedItem: T;
    editMode: EditMode;
    editedItem: T;
}

export type vmFn<T> = (vm: Viewmodel<T>) => Viewmodel<T>;
----------------------------------------------------------------

user viewmodel
-----------------------------------------------------------------
import { EditMode, Viewmodel, vmFn } from './../../shared/viewmodel';

export interface User {
    id: number;
    name: string;
    age: number;
}

export interface UserVm extends Viewmodel<User> {
    users: User[];
    selectedUser: User;
    editMode: EditMode;
    editedUser: User;
}

export type userVmFn =  vmFn<User>
----------------------------------------------------------------------------





export class UsersComponent {

 // define observable vm
 public vm$ : Observable<UserVm>;
 
 // create action streams
 public addUserState = new Subject<User>();
 public deleteUserState = new Subject<User>();
 public detailUserState = new Subject<User>();
 public closeDetailState = new Subject();

 constructor(private http:HttpClient) {
   // merge action streams into one
   // and track state with the help of scan operator
   this.vm$ = merge(
     this.getUsersChange$,
     this.addUserChange$,
     this.deleteUserChange$,
     this.detailUserChange$,
     this.closeDetailChange$
   ).pipe(
     scan( (oldVm:UserVm, userVmReducer) => userVmReducer(oldVm), {users:[]} as UserVm )
   );

 }

 private getUsersChange$ = this.http.get<User[]>(`api/users`).pipe(
   map( users => (vm:UserVm) => ({...vm, users}))

 );

 private addUserChange$ = this.addUserState.pipe(
   map( user => (vm:UserVm) => ({...vm, users: [...vm.users , user ] })),
 )
 private deleteUserChange$ = this.deleteUserState.pipe(
   map( user => (vm:UserVm) => ({...vm, users: vm.users.filter(u=>u!==user) }))
 )

 private detailUserChange$ = this.detailUserState.pipe(
   map( selectedUser => (vm:UserVm) => ({...vm, selectedUser }))
 )
 private closeDetailChange$ = this.closeDetailState.pipe(
   map( _ => (vm:UserVm) => ({...vm, selectedUser:null }))
 )
 addUser(user: User) {
  this.addUserState.next( user)
 }