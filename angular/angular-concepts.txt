info@datatrans.ch 123	23CF#@*+"

Angular
------------
is a Frontend Framework which exstends HTML with Angular Directives.
These Directives are compiled live views containing regular HTML, Javascript and CSS at build time (aot) or runtime (jit).

Basic Concepts
----------------
- HTML is declarative - Angular is declarative
- DOM is hierachical, Angular is hierarchical (only one root element that can have n child elements) 
- Angular does not directly access DOM Elements - for all DOM Access there is an interface
- Single Page Application, SPA, the Angular root element is the house or the SPA
- DSL to write HTML App
- Template, View, Model, Classical Templating (one way), Angular Templating (two way)
- Compiler
- Dependency injection
- Data Binding
- Encapsulation
- Typescript
- Reactive Extensions - RxJs

Advanced Concepts
-----------------------------
- Outlet (Component Outlet, Router Outlet, Template Outlet, NgContent)
- Injector,ElementInjector, ModuleInjector, InjectorContainer
- Provider (Component Provider, Module Provider, App Provider)
- Module, ModuleFactory
- ChangeDetector
- Host View
- Embedded View
- Component, Component Livecycles,


Angular Template
----------------------
Templates are written with HTML that contains AngularJS-specific elements and attributes. 

Angular combines the template with information from the 
- model and 
- controller renders  
- the dynamic view in the browser.

Angular Compiler 
-----------------
Angular HTML compiler allows the developer to teach the browser new HTML syntax. 
The compiler allows you to attach behavior to any HTML element or attribute and even 
create new HTML elements or attributes with custom behavior. Angular calls these behavior extensions directives.

Declarative Language
--------------------
HTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion. 
For example if something needs to be centered, there is no need to provide instructions to the browser 
how the window size needs to be divided in half so that the center is found, and that this center 
needs to be aligned with the text's center. Simply add an align="center" attribute to any element 
to achieve the desired behavior. Such is the power of declarative language.

Angular Directives - DSL to write HTML app
-------------------------------------------
However, the declarative language is also limited, as it does not allow you to teach the browser new syntax. 
For example, there is no easy way to get the browser to align the text at 1/3 the position instead of 1/2. 
What is needed is a way to teach the browser new HTML syntax.

AngularJS comes pre-bundled with common directives which are useful for building any app. 
We also expect that you will create directives that are specific to your app. 
These extensions become a Domain Specific Language for building your application.

All of this compilation takes place in the web browser; no server side or pre-compilation step is involved.

Angular Dependency Injection
----------------------------
Dependency injection (DI), is an important application design pattern. 
Angular has its own DI framework, which is typically used in the design of 
Angular applications to increase their efficiency and modularity.

Dependencies are services or objects that a class needs to perform its function. 
DI is a coding pattern in which a class asks for dependencies from external sources rather than creating them itself.

In Angular, the DI framework provides declared dependencies to a class when that class is instantiated. 

Angular Data Binding: Template -> compiled -> databound View (changes are reflected in view and model)
---------------------------
The template (which is the uncompiled HTML along with any additional markup or directives) is compiled. 
The compilation step produces a live view. Any changes to the view are immediately reflected in the model, 
and any changes in the model are propagated to the view. 

The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. 
You can think of the view as simply an instant projection of your model.

Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it. 
This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency.

Data binding is a process that allows apps to display data values to a user and respond to user actions (such as clicks, touches, and keystrokes).
In data binding, you declare the relationship between an 
- HTML widget and 
- a data source and let 
- the framework handle the details.

 Data binding is an alternative to manually 
- [] pushing application data values into HTML, 
- () pulling changed values from the screen, and updating application data values.

Read about the following forms of binding in Template Syntax:

Interpolation
Property binding
Event binding
Attribute binding
Class binding
Style binding
Two-way data binding with ngModel




Directives
-----------
At a high level, directives are markers on a DOM element 
- attribute D, 
- element name D, 
- comment D or
- CSS D) 

- to attach a specified behavior to that DOM element or even 
- to transform the DOM element and its children.

Built-in Directives
--------------------
AngularJS comes with a set of these directives built-in, like ngBind, ngModel, and ngClass. 

Much like you create controllers and services, you can create your own directives for AngularJS to use. 
When AngularJS bootstraps your application, the HTML compiler traverses the DOM matching directives against the DOM elements.

NgModel angular/orms
----------------------------
Creates a FormControl instance from a domain model and binds it to a form control element.

FormControl 
--------------------------------
This is one of the three fundamental building blocks of Angular forms, along with FormGroup and FormArray. 
It extends the AbstractControl class that implements most of the base functionality 
for accessing the 
- value, 
- validation status, 
- user interactions and events

The FormControl instance tracks the value, user interaction, and validation status of the control 
and keeps the view synced with the model. If used within a parent form, the directive also registers itself with the form as a child control.

This directive is used by itself or as part of a larger form. Use the ngModel selector to activate it.

It accepts a domain model as an optional Input. If you have a one-way binding to ngModel with [] syntax, 
changing the value of the domain model in the component class sets the value in the view. 
If you have a two-way binding with [()] syntax (also known as 'banana-box syntax'), the value 
in the UI always syncs back to the domain model in your class.

To inspect the properties of the associated FormControl (like validity state), export the directive into 
a local template variable using ngModel as the key (ex: #myVar="ngModel"). You then access the control 
using the directive's control property, but most properties used (like valid and dirty) fall through 
to the control anyway for direct access. See a full list of properties directly available in AbstractControlDirective.

Custom Directives
-----------------

Angular = HTML and Angualr Directives in a Template
--------------------------------------------------
Templates are written with HTML that contains Angular-specific elements and attributes.
Template = Model (data) and Controller (logic) instanciated into a view (dynamic view)

Directive - Attribute Directive and Element Directive
-------------------------------------------------------
Directive - augment an existing DOM element
Component - represents a reusable Angular DOM Element
Directive — An attribute or element that augments an existing DOM element or represents a reusable DOM component.

Directive Use Cases
-------------------
attribute versus an element

- Use an element when you are creating a component that is in control of the template. 
  The common case for this is when you are creating a Domain-Specific Language for parts of your template. 
- Use an attribute when you are decorating an existing element with new functionality


- reuse a Template in a repeating Html Chunk:
Let's say you have a chunk of your template that represents a customer's information. 
This template is repeated many times in your code. When you change it in one place, you have to change it in several others. 
This is a good opportunity to use a directive to simplify your template.

- isolate scope of a Template (each Component class instatiates a new scope)

- create directive that wraps other elements - content projection
We've seen that you can pass in models to a directive using the isolate scope, 
but sometimes it's desirable to be able to pass in an entire template rather than a string or an object. 
Let's say that we want to create a "dialog box" component. The dialog box should be able to wrap any arbitrary content.

- attach behavior to a dom element: draggable directive
sample make element draggable


ElementRef
--------------------------
The underlying native element or null if direct access to native elements is not supported (e.g. when the application runs in a web worker).
Use this API as the last resort when direct access to DOM is needed. 

- Use templating and 
- data-binding provided by Angular instead
. 
Alternatively you can take a look at Renderer2 which provides API that can safely be used even when direct access to native elements is not supported.

Relying on direct DOM access creates tight coupling between your application and rendering layers which will make 
it impossible to separate the two and deploy your application into a web worker.





Model
----------

Controller
-----------


ViewContainer VC
---------------
- createComponent
- createEmbeddedView
Can contain host views (created by instantiating a component with the createComponent() method), 
and embedded views (created by instantiating a TemplateRef with the createEmbeddedView() method)


VC ElementRef ( 1 VC - 1 Anchor Element)
-----------------------------
Anchor element that specifies the location of this container in the containing view. 
Each view container can have only one anchor element, and each anchor element can have only a single view container.

Root elements of views attached to this container become siblings of the anchor element in the rendered view.

Access the ViewContainerRef of an element by placing a Directive injected 
with ViewContainerRef on the element, or use a ViewChild query.

VC Injector
-----------------------------





View
-------------
Host View - is The root view of a component
Embedded View - is a child view in a Host View.


Template


Bindings
-------------------------


Angular Changedetection - Root View -> Child View (View Tree not equal to Component Tree)
------------------------
The view hierarchy is a key part of Angular change detection.

The change happens in the view and Component class (model) gets notified
A tree of related views that can be acted on as a unit. 
The root view is a component's host view. A host view can be the root of a tree of embedded views, 
collected in a view container (ViewContainerRef) attached to an anchor element in the hosting component. 
The view hierarchy is a key part of Angular change detection.

 
Component C:
------------------------
- injector
- changedetector
- selector
- template
- class
- css
- host view
- live cycle
- type
- viewchild/ren
- contentchild/ren
- templateRe
- elementRe
- input properties
- output events

Angular dependency injection (DI)
--------------------------------
A design pattern and mechanism for creating and delivering some parts of an application (dependencies) 
to other parts of an application that require them.

In Angular, dependencies are typically services, but they also can be values, such as strings or functions. 
An injector for an app (created automatically during bootstrap) instantiates dependencies when needed, 
using a configured provider of the service or value.

Provider
----------
An object that implements one of the Provider interfaces. 
A provider object defines how to obtain an injectable dependency associated with a DI token. 
An injector uses the provider to create a new instance of a dependency for a class that requires it.

Angular registers its own providers with every injector, for services that Angular defines. 
You can register your own providers for services that your app needs.


C injector  uses the provider to create a new instance of a dependency for a class that requires it.
------------
An object in the Angular dependency-injection system that can 
- find a named dependency in its cache or 
- create a dependency 

Hierarchical Injectors
-------------------------
Injectors in Angular have rules that you can leverage to achieve the desired visibility of injectables in your apps. 
By understanding these rules, you can determine in which NgModule, Component or Directive you should declare a provider.

Two injector hierarchies
There are two injector hierarchies in Angular:

ModuleInjector hierarchy—configure a ModuleInjector in this hierarchy using an @NgModule() or @Injectable() annotation.
ElementInjector hierarchy—created implicitly at each DOM element. An ElementInjector is empty by default unless you configure it in the providers property on @Directive() or @Component().


Injector Provider
----------------

using a configured provider. Injectors are created for NgModules automatically as part of the bootstrap process 
and are inherited through the component hierarchy.

An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.

A hierarchy of injectors at the 
- NgModule level and 
- component level can provide different instances of a dependency to their own components and child components.

You can configure injectors with different providers that can provide different implementations of the same dependency.

C changedetor
-------------
Base class for Angular Views, provides change detection functionality. 
A change-detection tree collects all views that are to be checked for changes. 
Use the methods to add and remove views from the tree, initiate change-detection, 
and explicitly mark views as dirty, meaning that they have changed and need to be rerendered.



Dynamic Component Creation
----------------------------
declarativ: ComponentOutlet
imperativ: TemplateRe createEmbeddedView


Angular Component Tree - Navigate the component tree with DI
-------------------------------------------
Application components often need to share information. You can often use loosely coupled techniques for sharing information, 
such as data binding and service sharing, but sometimes it makes sense for one component to 
- have a direct reference to another component. 
- direct reference, for instance, to access values or call methods on that component.

Obtaining a component reference is a bit tricky in Angular. Angular components themselves do not have a tree 
that you can inspect or navigate programmatically. 
The parent-child relationship is indirect, established through the components' view objects.

Each component has a host view, and can have additional embedded views. 
An embedded view in component A is the host view of component B, which can in turn have embedded view. 
This means that there is a view hierarchy for each component, of which that component's host view is the root.

Navigate View Hierarchy: ViewChild/ren, ContentChild/ren, QueryList<>
----------------------------------------------------------------------
There is an API for navigating down the view hierarchy. 
Check out Query, QueryList, ViewChildren, and ContentChildren in the API Reference.

Get Parent Component Reference via DI
---------------------------------------- 
There is no public API for acquiring a parent reference. 
However, because every component instance is added to an injector's container, 
you can use Angular dependency injection to reach a parent component.

C Input Properties angular/core
---------------------
Decorator that marks a class field as an input property and supplies configuration metadata. 
The input property is 
- bound to a DOM property in the template. 
- During change detection, Angular automatically updates the data property with the DOM property's value.

OnChanges lifecycle hook is called when any data-bound property of a directive changes. 
Define an ngOnChanges() method to handle the changes.changes.prop contains the old and the new value.

interface OnChanges {
  ngOnChanges(changes: SimpleChanges): void
}

Class implementations
-----------------------
NgTemplateOutlet, NgComponentOutlet, NgModel, FormControlDirective, FormControlName, FormGroupDirective
MaxLengthValidator, MinLengthValidator, PatternValidator, RouterLinkWithHref, RouterLinkActive
