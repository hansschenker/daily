<div *carousel="let image from images; let ctrl = controller">
  <img [src]="image">
  <button (click)="ctrl.prev()">Previous</button>
  <button (click)="ctrl.next()">Next</button>
</div>

Template Directives Micro Syntax
-----------------------------------------------------------------------------------------------

 - *carousel 		is the directive name. The * signals that we are dealing with 
 			a structural directive <ng-template> that surrounds the host element and its descendants.
			ng-template

 - let 			keyword declares a local template variable that you reference within the template.
			let-item

 - from 		is a binding key. You can name it however you like. Here we named it from to create a nice readable string image from images.

 - images 		is the value we want to pass into the directive.
			Angular will combine the name of the directive (carousel) with the binding key (from) 
			and create a binding to an Input: 
			@Input('carouselFrom') images: string[]

Microsynstax allows for a Domain Specific Language ( DSL )
--------------------------------------------------------------------------------------------------------
You can get very expressive with the domain specific language that you want to create inside your template directive. 
You aren’t limited to a single binding key. Let’s add two additional inputs for controlling the carousel auto-play behavior.

 - autoplay

 - image from ['a', 'b, 'c'] autoplay 'on' deIay 2000" 
	@lnput('carouselFrom') 
	
	images ['a', 'b', 'c'] 
	images: string[]; 

	// autoplay 'on 
	@lnput('autoplay'): 'on' I 'off; 

	// delay 
	2000 
	@lnput('delay'): number; 


carousel directive immplementation
----------------------------------------------------------------------------------------

@Directive({
  selector: '[carousel]'
})
export class CarouselDirective implements OnInit {
  context: CarouselContext | null = null;

  constructor(
    private tpl: TemplateRef<CarouselContext>,
    private vcr: ViewContainerRef
  ) {}

  @Input('carouselFrom') images: string[];

  ngOnInit(): void {
    this.context = {
      // implicit = from (you can name it whatever)
      $implicit: this.images[0],
    };

    this.vcr.createEmbeddedView(this.tpl, this.context);
  }
}

---------------------------------------------------------------------------------------------