decorators
------------
Table of Contents

Angular Decorators use cases:
------------------------------------
- enhance javascript class and 
- dom querying
- dependency injection
-------------------------------------------------------------------
Creating a new Decorator in Angular
Decorator with Arguments
List of All Angular Decorators
Class decorators
@NgModule
@Component
@Injectable
@Directive
@Pipe
Property Decorators
@Input
@Output
@ContentChild & @ContentChildren
@ViewChild & @ViewChildren
@HostBinding
Method decorators
@HostListener
Parameter decorators
@Inject
@Host
@Self
@SkipSelf
@Optional
Custom Decorators


template bindings
-----------------
You might also be interested in the following:

Interpolation—learn how to use interpolation and expressions in HTML.
Template statements—respond to events in your templates.
Binding syntax—use binding to coordinate values in your application.
Property binding—set properties of target elements or directive @Input() decorators.
Attribute, class, and style bindings—set the value of attributes, classes, and styles.
Event binding—listen for events and your HTML.
Two-way binding—share data between a class and its template.
Built-in directives—listen to and modify the behavior and layout of HTML.
Template reference variables—use special variables to reference a DOM element within a template.
Inputs and Outputs—share data between the parent context and child directives or components
Template expression operators—learn about the pipe operator, |, and protect against null or undefined values in your HTML.
SVG in templates—dynamically generate interactive graphics.





directive decorator:
-----------------------
decorator that marks a class as an Angular directive. 
You can define your own directives to attach custom behavior to elements in the DOM.

selector?	
---------------------
The CSS selector that identifies this directive in a template and triggers instantiation of the directive.

inputs?	
---------------------
Enumerates the set of data-bound input properties for a directive

outputs?	
---------------------
Enumerates the set of event-bound output properties.

providers?	
---------------------
Configures the injector of this directive or component with a token that maps to a provider of a dependency.

exportAs?
---------------------	
Defines the name that can be used in the template to assign this directive to a variable.

queries?
---------------------	
Configures the queries that will be injected into the directive.

host?	bindings: set of key-value pairs
-----------------------------------------
Maps class properties to host element bindings for 
- properties, 
- attributes, and 
- events, using a set of key-value pairs.

jit?	
When present, this directive/component is ignored by the AOT compiler. It remains in distributed code, 
and the JIT compiler attempts to compile it at run time, in the browser. To ensure the correct behavior, 
the app must import @angular/compiler.






component decorator:
--------------------

Decorator that marks a class as an Angular component and provides configuration metadata that
 determines how the component should be processed, instantiated, and used at runtime..


changeDetection?
---------------------	
The change-detection strategy to use for this component.

viewProviders?	
---------------------
Defines the set of injectable objects that are visible to its view DOM children. See example.

moduleId?	
---------------------
The module ID of the module that contains the component. The component must be able to resolve relative
 URLs for templates and styles. SystemJS exposes the __moduleName variable within each module. In CommonJS, this can be set to module.id.

templateUrl?	
---------------------
The relative path or absolute URL of a template file for an Angular component. If provided, 
do not supply an inline template using template.

template?	
An inline template for an Angular component. If provided, do not supply a template file using templateUrl.


- 
styleUrls?
---------------------	
One or more relative paths or absolute URLs for files containing CSS stylesheets to use in this component.

styles?	
---------------------
One or more inline CSS stylesheets to use in this component.

animations?	
---------------------
One or more animation trigger() calls, containing state() and transition() definitions. 
See the Animations guide and animations API documentation.

encapsulation?	
---------------------
An encapsulation policy for the template and CSS styles. One of:

ViewEncapsulation.Emulated: Use shimmed CSS that emulates the native behavior.
ViewEncapsulation.None: Use global CSS without any encapsulation.
ViewEncapsulation.ShadowDom: Use Shadow DOM v1 to encapsulate styles.
interpolation?	
Overrides the default interpolation start and end delimiters ({{ and }}).

entryComponents?	
---------------------
A set of components that should be compiled along with this component. For each component 
listed here, Angular creates a ComponentFactory and stores it in the ComponentFactoryResolver.

preserveWhitespaces?	
---------------------
True to preserve or false to remove potentially superfluous whitespace characters from the 
compiled template. Whitespace characters are those matching the \s character class in JavaScript 
regular expressions. Default is false, unless overridden in compiler options.




















directive: directive
.....................



dependency injection
-----------------------

inject
inject()
Inject
Injectable
InjectableType

AnimationBuilder
ClassProvider
ClassSansProvider
ConstructorProvider
ConstructorSansProvider

core package
downgradeModule()
ExistingProvider
ExistingSansProvider
FactoryProvider
FactorySansProvider

Host
InjectionToken
Injector
Optional
Provider

ROUTES
StaticClassProvider
StaticProvider
SwPush
TypeProvider
ValueProvider
ReflectiveInjector









