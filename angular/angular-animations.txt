Angular Animations
--------------------------------------------------------------------------------------------------------------
why, what, where, and how, the answers of which being what governs the animation’s behavior:

why - 	trigger Evaluate data binding expression - tells Angular which animation state the host element is assigned to (why)
what-	Data binding target tells Angular which animation target defines CSS styles for the elements state (what)
where-	syle an element State tells Angular which CSS styles should be applied to the element (where)
how -	when state changes,Transition tells Angular how it should apply the specified CSS styles when there is a state change (how)

import { trigger, state, style, transition, animate, group } from '@angular/animations';


Animation States
-------------------
Angular lets you define a style and transition to be applied when an element’s state changes. 
Angular provides 3 different states which we could use in our animation code:

Wildcard (*) - 	this is the default style or all states of the element, 
		for example active => * represents a state change from active to anything else.

Void (void) - 	this is the state when the element is created but not yet part of the DOM, 
                or when the element is removed from the DOM.

Custom - 	this can be any custom name to indicate a certain state of the element 
                (example: 'active', 'inactive'). 'active => inactive', 'inactive => active', 'active <=> inactive'




Method		Working Details
-------------   ----------------------------------------------------------------------------------------------
trigger():	It triggers the animation, combines all the other animation functions within. triggerName 
                is used with HTML template and declared as a first argument, and the second argument goes with array syntax.
		animations happen after what triggers them. 

                the :enter (enter dom) state change will get called after ngOnInit and the first change detection cycle whereas 
                the :leave (leave dom) would happen right after the element ngOnDestroy is called
		
		parent has priority over children
		In order to run both animations, the parent animation must query each element 
                containing the child animations and run it using the animateChild method

style():	Useful function for using multiple CSS style in animations. Uses an object syntax, Manages the appearance 
                of HTML elements during animation.

state():	Builds various style set for animations. The state name refers to the first argument. It can be aligned 
                with the transition later on.
		state and style are combined in state fn: what styles to apply to the target element at a certain state
		the different states for the element to transition between

animate():	Animate function refers to the animation duration. Optional parameters are keyframes, delay, easing etc.

transition():	First argument animation states, use the array syntax. It applies the animation duration between two states.

keyframes():	Used withing animate() function, it allows subsequent change among styles within a specified duration. 
                Can include multiple style() calls within each keyframe.

group():	Works in transition() method as a second argument, uses array syntax. It combines groups of animations. 
                The animation moves further when all the inner animation steps have completed.

query():	This function finds HTML elements within the current element.

sequence():	Refers to the list of animation steps that run concurrently.

stagger():	Refers to the animations starting time for multiple elements.

animation():	It’s a reusable animation block that can be triggered anywhere in the app. Used together with useAnimation().

useAnimation():	Fuel up a reusable angular animation. Works with animation() method.

animateChild():	It permits the animations on child components runs along with the parent animation’s timeframe.


AnimationAnimateChildMetadata
---------------------------------------------------------------

AnimationAnimateMetadata
---------------------------------------------------------------

AnimationAnimateRefMetadata
---------------------------------------------------------------

AnimationGroupMetadata
---------------------------------------------------------------

AnimationKeyframesSequenceMetadata
---------------------------------------------------------------

AnimationQueryMetadata
---------------------------------------------------------------

AnimationReferenceMetadata
---------------------------------------------------------------

AnimationSequenceMetadata
---------------------------------------------------------------

AnimationStaggerMetadata
---------------------------------------------------------------

AnimationStateMetadata
---------------------------------------------------------------

AnimationStyleMetadata
---------------------------------------------------------------

AnimationTransitionMetadata
---------------------------------------------------------------

AnimationTriggerMetadata
---------------------------------------------------------------

Properties






Animation definitions are linked to components through the 
-------------------------------------------------------------------------------
- animations property in the @Component metadata

- The trigger() function encapsulates a named animation

- Angular animations are based on CSS web transition

Angular animations allow you to:
-------------------------------------------------------
- Set animation timings, 
- styles, 
- keyframes, and 
- transitions.

Animate HTML elements in complex sequences and choreographies.
Animate HTML elements as they are inserted and removed from the DOM, including responsive real-time filtering.
Create reusable animations.
Animate parent and child elements


Understanding Angular Animation States
---------------------------------------
Animation involves transition from one state of an element to another state. 
Angular defines three different states for an element:

Void state: void
--------------
represents the state of an element which is not part of the DOM. 

- This state occurs when an element is created but not yet placed in the DOM or 
- the element is removed from the DOM. 
  This state is useful when we want to create animation 
  while adding or removing an element from our DOM. To define this state in our code we use the keyword void.

The wildcard state: *
-------------------
This is also known as the default state of the element. 

The styles defined for this state are applicable to the element regardless of its current animation state. 
To define this state in our code we use the * symbol.

Custom state: custom name, applied with @myName
--------------------------------------------------------
This is the custom state of the element and it needs to be defined explicitly in the code. 
To define this state in our code, we can use any custom name of our choice.

Animation Transition Timing
----------------------------
To show the animation transition from one state to another, 
we define animation transition timing in our application.

Understanding the Angular Animation Syntax
We will write our animation code inside the component’s metadata. The syntax for the animation is shown below:

@Component({
// other component properties.
  animations: [
    trigger('triggerName'), [
      state('stateName', style())
      transition('stateChangeExpression', [Animation Steps])
    ]
  ]
})

animations: [ 

]

Here we will use a property called animations. This property will take an array as input. 

trigger function
----------------
The array contains one or more “trigger”. Each trigger has a unique name and an implementation. 
The state and transitions for our animation need to be defined in the trigger implementation.

state function
----------------
Each state function has a “stateName” defined to uniquely identify the state and 
a style function to show the style of the element in that state.

transition function
----------------
Each transition function has a stateChangeExpression defined to show the change 
of the state of an element and the corresponding array of animation steps to show 
how the transition will take place. 

multiple triggers are possible
---------------------------------
We can include multiple trigger functions 
inside the animation property as comma separated values.

These functions trigger, and state and transition are defined in the @angular/animations module. 
Hence, we need to import this module in our component.

apply animation on an element
-----------------------------
we need to include the trigger name in the element definition. 
Include the trigger name followed by @ symbol in the element tag. Refer to the sample code below:

<div @changeSize></div>

animation sample
-------------------

animations: [
  trigger('changeDivSize', [
    state('initial', style({
      backgroundColor: 'green',
      width: '100px',
      height: '100px'
    })),
    state('final', style({
      backgroundColor: 'red',
      width: '200px',
      height: '200px'
    })),
    transition('initial=>final', animate('1500ms')),
    transition('final=>initial', animate('1000ms'))
  ]),
]

trigger('balloonEffect', [
   state('initial', style({
     backgroundColor: 'green',
     transform: 'scale(1)'
   })),
   state('final', style({
     backgroundColor: 'red',
     transform: 'scale(1.5)'
   })),
   transition('final=>initial', animate('1000ms')),
   transition('initial=>final', animate('1500ms'))
 ]),

<h3>Balloon Effect</h3>
<div (click)="changeState()" 
  style="width:100px;height:100px; border-radius: 100%; margin: 3rem; background-color: green"
  [@balloonEffect]=currentState>
</div>

changeState() in component
----------------------------
To change the state of our element we will define a function in the class definition of our component. 
Include the following code in the AnimationdemoComponent class:

currentState = 'initial';

toggleState() {
  this.currentState = this.currentState === 'initial' ? 'final' : 'initial';
}

Open animationdemo.component.html file and add the following code:

<h3>Change the div size</h3>
<button (click)="toggleState()">Change Size and Color</button>
<br />
<div [@changeDivSize]=currentState></div>
<br />



trigger('fadeInOut', [
  state('void', style({
    opacity: 0
  })),
  transition('void <=> *', animate(1000)),
]),

Here we have defined the trigger fadeInOut. When the element is added to the DOM 
it is a transition from void to wildcard (*) state. This is denoted using void =>; *. 
When the element is removed from the DOM, it is a transition from wildcard (*) to void state. 
This is denoted using * =>; void.

When we use the same animation timing for both directions of the animation, 
we use the shorthand syntax <;=>. As defined in this trigger, 
the animation from void =&gt; * and * => void will take 1000ms to complete.

Add the following HTML code in app.component.html file.

<h3>Fade-In and Fade-Out animation</h3>

<button (click)="addItem()">Add List</button>
<button (click)="removeItem()">Remove List</button>

<div style="width:200px; margin-left: 20px">
  <ul>
    <li *ngFor="let list of listItem" [@fadeInOut]>
      {{list}}
    </li>
  </ul>
</div>

Here we are defining two buttons to add items to and remove them from the list. 
We are binding the fadeInOut trigger to the <li> element, which will show a fade-in 
and fade-out effect while being added and removed from the DOM.

Enter and Leave animation
When adding to the DOM, the element will enter the screen from the left. When deleting, the element will leave the screen from the right.

The transition from void => * and * => void is very common. Therefore, Angular provides aliases for these animations:

for void => * we can use ‘:enter’
for * => void we can use ‘:leave’
The aliases make these transitions more readable and easier to understand.

Add the following trigger definition in the animation property:

trigger('EnterLeave', [
  state('flyIn', style({ transform: 'translateX(0)' })),
  transition(':enter', [
    style({ transform: 'translateX(-100%)' }),
    animate('0.5s 300ms ease-in')
  ]),
  transition(':leave', [
    animate('0.3s ease-out', style({ transform: 'translateX(100%)' }))
  ])
])

Here we have defined the trigger EnterLeave. 
The ‘:enter’ transition will wait for 300ms and then run for 0.5s with an ease-in effect. 
Whereas the ‘:leave transition will run for 0.3s with an ease-out effect.

Add the following HTML code in the app.component.html file:

<h3>Enter and Leave animation</h3>

<button (click)="addItem()">Add List</button>
<button (click)="removeItem()">Remove List</button>

<div style="width:200px; margin-left: 20px">
  <ul>
    <li *ngFor="let list of listItem" [@EnterLeave]="'flyIn'">
      {{list}}
    </li>
  </ul>
</div>


@angular/animations	
-------------------
Implements a domain-specific language (DSL) for defining web animation sequences 
for HTML elements as multiple transformations over time.

Secondary
@angular/animations/browser
---------------------------	
Provides infrastructure for cross-platform rendering of animations in a browser.

@angular/animations/browser/testing
-----------------------------------	
Provides infrastructure for testing of the Animations browser subsystem.

Classes
AnimationBuilder	
An injectable service that produces an animation sequence programmatically 
within an Angular component or directive. Provided by the BrowserAnimationsModule or NoopAnimationsModule.

AnimationFactory	
A factory object returned from the AnimationBuilder.build() method.

NoopAnimationPlayer	
An empty programmatic controller for reusable animations. Used internally when animations are disabled, 
to avoid checking for the null case when an animation player is expected.

Functions
animate	
Defines an animation step that combines styling information with timing information.

animateChild	
Executes a queried inner animation element within an animation sequence.

animation	
Produces a reusable animation that can be invoked in another animation or sequence, 
by calling the useAnimation() function.

group	
Defines a list of animation steps to be run in parallel.

keyframes	
Defines a set of animation styles, associating each style with an optional offset value.

query	
Finds one or more inner elements within the current element that 
is being animated within a sequence. Use with animate().

sequence	
Defines a list of animation steps to be run sequentially, one by one.

stagger	
Use within an animation query() call to issue a timing gap after each queried item is animated.

state	
Declares an animation state within a trigger attached to an element.

style	
Declares a key/value object containing CSS properties/styles that can then 
be used for an animation state, within an animation sequence, or as styling data for calls to animate() and keyframes().

transition	
Declares an animation transition as a sequence of animation steps to run when a given condition is satisfied. 
The condition is a Boolean expression or function that compares the previous and current animation states, 
and returns true if this transition should occur. When the state criteria 
of a defined transition are met, the associated animation is triggered.

trigger	
Creates a named animation trigger, containing a list of state() and transition() entries 
to be evaluated when the expression bound to the trigger changes.

useAnimation	
Starts a reusable animation that is created using the animation() function.

Structures
AnimateChildOptions	
Adds duration options to control animation styling and timing for a child animation.

AnimationAnimateChildMetadata	
Encapsulates a child animation, that can be run explicitly when the parent is run. 
Instantiated and returned by the animateChild function.

AnimationAnimateMetadata	
Encapsulates an animation step. Instantiated and returned by the animate() function.

AnimationAnimateRefMetadata	
Encapsulates a reusable animation. Instantiated and returned by the useAnimation() function.

AnimationEvent	
An instance of this class is returned as an event parameter when an animation 
callback is captured for an animation either during the start or done phase.

AnimationGroupMetadata	
Encapsulates an animation group. Instantiated and returned by the group() function.

AnimationKeyframesSequenceMetadata	
Encapsulates a keyframes sequence. Instantiated and returned by the keyframes() function.

AnimationMetadata	
Base for animation data structures.

AnimationMetadataType	
Constants for the categories of parameters that can be defined for animations.

AnimationOptions	
Options that control animation styling and timing.

AnimationPlayer	
Provides programmatic control of a reusable animation sequence, built using the build() 
method of AnimationBuilder. The build() method returns a factory, whose create() method instantiates and initializes this interface.

AnimationQueryMetadata	
Encapsulates an animation query. Instantiated and returned by the query() function.

AnimationQueryOptions	
Encapsulates animation query options. Passed to the query() function.

AnimationReferenceMetadata	
Encapsulates a reusable animation, which is a collection of individual animation steps. 
Instantiated and returned by the animation() function, and passed to the useAnimation() function.

AnimationSequenceMetadata	
Encapsulates an animation sequence. Instantiated and returned by the sequence() function.

AnimationStaggerMetadata	
Encapsulates parameters for staggering the start times of a set of animation steps. 
Instantiated and returned by the stagger() function.

AnimationStateMetadata	
Encapsulates an animation state by associating a state name with a set of CSS styles. 
Instantiated and returned by the state() function.

AnimationStyleMetadata	
Encapsulates an animation style. Instantiated and returned by the style() function.

AnimationTransitionMetadata	
Encapsulates an animation transition. Instantiated and returned by the transition() function.

AnimationTriggerMetadata	
Contains an animation trigger. Instantiated and returned by the trigger() function.

Types
AUTO_STYLE	
Specifies automatic styling.

AnimateTimings	
Represents animation-step timing parameters for an animation step.
----------------------------------------------------------------------------------------
trigger() - named animation trigger, containing a list of state() and transition() entries 
------------------------------------------------------------------------------------------
Creates a named animation trigger, containing a list of 
- state() and 
- transition() entries 
to be evaluated when the expression bound to the trigger changes.

trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata

- name	string ,An identifying string.

- definitions	AnimationMetadata[]	
  An animation definition object, containing an array of state() and transition() declarations.

Returns:
AnimationTriggerMetadata: An object that encapsulates the trigger data

  animations: [
    trigger("myAnimationTrigger", [
      state(...),
      state(...),
      transition(...),
      transition(...)
    ])
  ]
---------------------------------------------------------------------------------------------
state()
.............................................................................................
state
FUNCTION
Declares an animation state within a trigger attached to an element.

state(name: string, styles: AnimationStyleMetadata, options?: { params: { [name: string]: any; }; }): AnimationStateMetadata
Parameters
- name	string, One or more names for the defined state in a comma-separated string. 

The following reserved state names can be supplied to define a style for specific use cases:

void You can associate styles with this name to be used when the element is detached from the application. 
For example, when an ngIf evaluates to false, the state of the associated element is void.

- * (asterisk) Indicates the default state. You can associate styles with this name to be used 
as the fallback when the state that is being animated is not declared within the trigger.

- styles	AnimationStyleMetadata, A set of CSS styles associated with this state, 
created using the style() function. This set of styles 
persists on the element once the state has been reached.

- options	object, Parameters that can be passed to the state when it is invoked. 0 or more key-value pairs.

- Optional. Default is undefined.

Returns:
- AnimationStateMetadata: An object that encapsulates the new state data.

Special values for state-change expressions
Catch-all state change for when an element is inserted into the page and the destination state is unknown:
content_copy
transition("void => *", [
 style({ opacity: 0 }),
 animate(500)
 ])
Capture a state change between any states:

transition("* => *", animate("1s 0s"))

Entry and exit transitions:

content_copy
transition(":enter", [
  style({ opacity: 0 }),
  animate(500, style({ opacity: 1 }))
  ]),
transition(":leave", [
  animate(500, style({ opacity: 0 }))
  ])
Use :increment and :decrement to initiate transitions:
content_copy
transition(":increment", group([
 query(':enter', [
    style({ left: '100%' }),
    animate('0.5s ease-out', style('*'))
  ]),
 query(':leave', [
    animate('0.5s ease-out', style({ left: '-100%' }))
 ])
]))

transition(":decrement", group([
 query(':enter', [
    style({ left: '100%' }),
    animate('0.5s ease-out', style('*'))
  ]),
 query(':leave', [
    animate('0.5s ease-out', style({ left: '-100%' }))
 ])
]))

State-change functions
--------------------------------------------------------------------------------------------------------------------------------------
Here is an example of a fromState specified as a state-change function that invokes an animation when true:


transition((fromState, toState) =>
 {
  return fromState == "off" && toState == "on";
 },
 animate("1s 0s"))

Animating to the final state
----------------------------
If the final step in a transition is a call to animate() that uses a timing value with no style data, 
that step is automatically considered the final animation arc, for the element to reach the final state. 
Angular automatically adds or removes CSS styles to ensure that the element is in the correct final state.

The following example defines a transition that starts by hiding the element, then makes sure that it animates 
properly to whatever state is currently active for trigger:


transition("void => *", [
  style({ opacity: 0 }),
  animate(500)
 ])

Boolean value matching
-----------------------
If a trigger binding value is a Boolean, it can be matched using a transition expression 
that compares true and false or 1 and 0. For example:

// in the template
<div [@openClose]="open ? true : false">...</div>
// in the component metadata
trigger('openClose', [
  state('true', style({ height: '*' })),
  state('false', style({ height: '0px' })),
  transition('false <=> true', animate(500))
])

----------------------------------------------------------------------------------------------------------
AnimationMetadata - an animation step
-----------------------------------------------------------------------------------------------------------
Animation AnimateChild Metadata
Animation Animate Metadata
Animation AnimateRef Metadata
Animation Group Metadata
Animation KeyframesSequence Metadata
Animation Query Metadata
Animation Reference Metadata
Animation Sequence Metadata
Animation Stagger Metadata
Animation State Metadata
Animation Style Metadata
Animation Transition Metadata
Animation Trigger Metadata
------------------------------------------------------------------------------------------------------------
transistion() - sequence of animation steps, runs in sequence per default (parallel with group())
-----------------------------------------------------------------------------------------------------------
Declares an animation transition as a sequence of animation steps to run when a given condition is satisfied. 
The condition is a Boolean expression or function that compares the previous and current animation states, 
and returns true if this transition should occur. When the state criteria of a defined transition are met, 
the associated animation is triggered.

- transition(	  stateChangeExpr: string | 
		((fromState: string, 
		  toState: string, 
		  element?: any, 
		  params?: { [key: string]: any; }) => boolean), 
		  steps: AnimationMetadata | AnimationMetadata[], 
		  options: AnimationOptions = null): AnimationTransitionMetadata


-------------------------------------------------------------------------------------------------------
animate() - animation step that combines styling information with timing information.
--------------------------------------------------------------------------------------------------------

animate(timings: string | number, 
	styles: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata = null): AnimationAnimateMetadata

- timings	string | number	
Sets AnimateTimings for the parent animation. A string in the format "duration [delay][easing]".

- Duration and 
- Delay are expressed as a number and optional time unit, such as "1s" or "10ms" for one second and 10 milliseconds, respectively. 
The default unit is milliseconds.

- easing value controls how the animation accelerates and decelerates during its runtime. 
Value is one of 
- ease, 
- ease-in, 
- ease-out, 
- ease-in-out, or a 
- cubic-bezier() function call. If not supplied, no easing is applied.
For example, the string "1s 100ms ease-out" specifies a duration of 1000 milliseconds, and delay of 100 ms, 
and the "ease-out" easing style, which decelerates near the end of the duration.

styles	AnimationStyleMetadata | AnimationKeyframesSequenceMetadata	
Sets AnimationStyles for the parent animation. A function call to either style() or keyframes() that 
returns a collection of CSS style entries to be applied to the parent animation. When null, 
uses the styles from the destination state. This is useful when describing an animation step 
that will complete an animation; see "Animating to the final state" in transitions().

Optional. Default is null.

Returns
AnimationAnimateMetadata: An object that encapsulates the animation step.

interface AnimationAnimateMetadata extends AnimationMetadata {
  timings: string | number | AnimateTimings
  styles: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata | null

  // inherited from animations/AnimationMetadata
  type: AnimationMetadataType
}


Timing examples
-------------------------------
The following examples show various timings specifications.

animate(500) : Duration is 500 milliseconds.
animate("1s") : Duration is 1000 milliseconds.
animate("100ms 0.5s") : Duration is 100 milliseconds, delay is 500 milliseconds.
animate("5s ease-in") : Duration is 5000 milliseconds, easing in.
animate("5s 10ms cubic-bezier(.17,.67,.88,.1)") : Duration is 5000 milliseconds, delay is 10 milliseconds, easing according to a bezier curve.
Style examples

style() to set a single CSS style.
-------------------------------
animate(500, style({ background: "red" }))
The following example calls keyframes() to set a CSS style to different values for successive keyframes.

keyframes()
-------------------------------
animate(500, keyframes(
 [
  style({ background: "blue" })),
  style({ background: "red" }))
 ])


-------------------------------------------------------------------------------------------------------------------------------------------
style({k:v}) - key/value object containing CSS properties
-------------------------------------------------------------------------------------------------------------------------------------------
Declares a key/value object containing CSS properties/styles that can then be used for an animation state, 
within an animation sequence, or as styling data for calls to animate() and keyframes().

style(tokens: "*" | { [key: string]: string | number; } | ("*" | { [key: string]: string | number; })[]): AnimationStyleMetadata
Parameters
- tokens	"*" | { [key: string]: string | number; } | ("*" | { [key: string]: string | number; })[]	
- A set of CSS styles or HTML styles associated with an animation state. The value can be any of the following:

- A key-value style pair associating a CSS property with a value.
- An array of key-value style pairs.
- An asterisk (*), to use auto-styling, where styles are derived from the element being animated and applied to the animation when it starts.
  sAuto-styling can be used to define a state that depends on layout or other environmental factors.

Returns
AnimationStyleMetadata: An object that encapsulates the style data.


// string values for CSS properties
style({ background: "red", color: "blue" })

// numerical pixel values
style({ width: 100, height: 0 })
The following example uses auto-styling to allow a component to animate from a height of 0 up to the height of the parent element:

content_copy
style({ height: 0 }),
animate("1s", style({ height: "*" }))


--------------------------------------------------------------------------------------------------------------------------------------------
keyframes() - Defines a set of animation styles
--------------------------------------------------------------------------------------------------------------------------------------------
FUNCTION
Defines a set of animation styles, associating each style with an optional offset value.

keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata

- steps	AnimationStyleMetadata[]	
A set of animation styles with optional offset data. The optional offset value for a style specifies a percentage of 
the total animation time at which that style is applied.

Returns
---------
AnimationKeyframesSequenceMetadata: An object that encapsulates the keyframes data.

Usage notes
Use with the animate() call. Instead of applying animations from the current state to the destination state, 
keyframes describe how each style entry is applied and at what point within the animation arc. 
Compare CSS Keyframe Animations.

Usage
In the following example, the offset values describe when each backgroundColor value is applied. 
The color is red at the start, and changes to blue when 20% of the total time has elapsed.


// the provided offset values
animate("5s", keyframes([
  style({ backgroundColor: "red", offset: 0 }),
  style({ backgroundColor: "blue", offset: 0.2 }),
  style({ backgroundColor: "orange", offset: 0.3 }),
  style({ backgroundColor: "black", offset: 1 })
]))
If there are no offset values specified in the style entries, the offsets are calculated automatically.


animate("5s", keyframes([
  style({ backgroundColor: "red" }) // offset = 0
  style({ backgroundColor: "blue" }) // offset = 0.33
  style({ backgroundColor: "orange" }) // offset = 0.66
  style({ backgroundColor: "black" }) // offset = 1
]))


----------------------------------------------------------------------------------------------------------------------------------------
group() - animation steps to be run in parallel
------------------------------------------------------------------------------------------------------------------------------------------
Defines a list of animation steps to be run in parallel.

group(	steps: AnimationMetadata[], 
	options: AnimationOptions = null): AnimationGroupMetadata

Parameters
- steps	AnimationMetadata[], An array of animation step objects.

steps: style() or animate() run immediatley, keyframes() or animate() with delay
-----
run immediatley: 	When steps are defined by style() or animate() function calls, 
			each call within the group is executed instantly.
run delayed: 		keyframes() or animate() with delay

To specify offset styles to be applied at a later time, define steps with keyframes(), 
or use animate() calls with a delay value. For example:

group([
  animate("1s", style({ background: "black" })),
  animate("2s", style({ color: "white" }))
])

- options	AnimationOptions	
		An options object containing a delay and developer-defined parameters 
		that provide styling defaults and can be overridden on invocation.

Optional. Default is null.

Returns
AnimationGroupMetadata: An object that encapsulates the group data.

group() - run in parallel
-------------------------
Grouped animations are useful when a series of styles must be animated at different 
starting times and closed off at different ending times.

sequence() - run in sequence (wait for previous to finish)
----------------------------
- sequence() or a 
- transition() call, does not continue to the next instruction until all of the inner animation steps have completed.

----------------------------------------------------------------------------------------------------------------------------------------
query() - Use with animate(), Finds one or more inner elements within the current element
------------------------------------------------------------------------------------------------------------------------------------------
Finds one or more inner elements within the current element that is being animated within a sequence. Use with animate().

query(	selector: string, 
	animation: AnimationMetadata | AnimationMetadata[], 
	options: AnimationQueryOptions = null): AnimationQueryMetadata

Parameters
- selector	string, The element to query, or a set of elements that contain Angular-specific characteristics, 
		specified with one or more of the following tokens.

query(":enter") or query(":leave") : Query for newly inserted/removed elements.
query(":animating") : Query all currently animating elements.
query("@triggerName") : Query elements that contain an animation trigger.
query("@*") : Query all elements that contain an animation triggers.
query(":self") : Include the current element into the animation sequence.

- animation	AnimationMetadata | AnimationMetadata[]	
		One or more animation steps to apply to the queried element or elements. An array is treated as an animation sequence.

- options	AnimationQueryOptions	
		An options object. Use the 'limit' field to limit the total number of items to collect.

Optional. Default is null.

Returns
AnimationQueryMetadata: An object that encapsulates the query data.

Usage notes
Tokens can be merged into a combined query selector string. For example:

query(':self, .record:enter, .record:leave, @subTrigger', [...])

The query() function collects multiple elements and works internally by using element.querySelectorAll. 
Use the limit field of an options object to limit the total number of items to be collected. For example:

query('div', [
  animate(...),
  animate(...)
], { limit: 1 })

By default, throws an error when zero items are found. Set the optional flag to ignore this error. For example:

query('.some-element-that-may-not-be-there', [
  animate(...),
  animate(...)
], { optional: true })


The following example queries for inner elements and animates them individually using animate().


@Component({
  selector: 'inner',
  template: `
    <div [@queryAnimation]="exp">
      <h1>Title</h1>
      <div class="content">
        Blah blah blah
      </div>
    </div>
  `,
  animations: [
   trigger('queryAnimation', [
     transition('* => goAnimate', [
       // hide the inner elements
       query('h1', style({ opacity: 0 })),
       query('.content', style({ opacity: 0 })),

       // animate the inner elements in, one by one
       query('h1', animate(1000, style({ opacity: 1 }))),
       query('.content', animate(1000, style({ opacity: 1 }))),
     ])
   ])
 ]
})
class Cmp {
  exp = '';

  goAnimate() {
    this.exp = 'goAnimate';
  }
}


----------------------------------------------------------------------------------------------------------------------------------------
stagger() - Use within query()
------------------------------------------------------------------------------------------------------------------------------------------

Use within an animation query() call to issue a timing gap after each queried item is animated.

stagger(	timings: string | number, 
		animation: AnimationMetadata | AnimationMetadata[]): AnimationStaggerMetadata
Parameters
- timings	string | number, A delay value.

- animation	AnimationMetadata | AnimationMetadata[]	
		One ore more animation steps.

Returns
AnimationStaggerMetadata: An object that encapsulates the stagger data.

Usage notes
In the following example, a container element wraps a list of items stamped out by an ngFor. 
The container element contains an animation trigger that will later be set to query for each of the inner items.

Each time items are added, the opacity fade-in animation runs, and each removed item is faded out. 
When either of these animations occur, the stagger effect is applied after each item's animation is started.


<!-- list.component.html -->
-----------------------------
<button (click)="toggle()">Show / Hide Items</button>
<hr />
<div [@listAnimation]="items.length">
  <div *ngFor="let item of items">
    {{ item }}
  </div>
</div>

Here is the component code:
-----------------------------
import {trigger, transition, style, animate, query, stagger} from '@angular/animations';
@Component({
  templateUrl: 'list.component.html',
  animations: [
    trigger('listAnimation', [
    ...
    ])
  ]
})
class ListComponent {
  items = [];

  showItems() {
    this.items = [0,1,2,3,4];
  }

  hideItems() {
    this.items = [];
  }

  toggle() {
    this.items.length ? this.hideItems() : this.showItems();
   }
 }

Here is the animation trigger code:
----------------------------------
trigger('listAnimation', [
  transition('* => *', [ // each time the binding value changes
    query(':leave', [
      stagger(100, [
        animate('0.5s', style({ opacity: 0 }))
      ])
    ]),
    query(':enter', [
      style({ opacity: 0 }),
      stagger(100, [
        animate('0.5s', style({ opacity: 1 }))
      ])
    ])
  ])
])


----------------------------------------------------------------------------------------------------------------------------------------
animateChild()
------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------
useAnimation()
------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------
AnimationBuilder()
------------------------------------------------------------------------------------------------------------------------------------------
// import the service from BrowserAnimationsModule
import {AnimationBuilder} from '@angular/animations';
// require the service as a dependency
class MyCmp {
  constructor(private _builder: AnimationBuilder) {}

  makeAnimation(element: any) {
    // first define a reusable animation
    const myAnimation = this._builder.build([
      style({ width: 0 }),
      animate(1000, style({ width: '100px' }))
    ]);

    // use the returned factory object to create a player
    const player = myAnimation.create(element);

    player.play();
  }
}