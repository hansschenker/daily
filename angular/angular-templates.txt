
https://angular.io/guide/template-syntax#!#ref-vars



Template is the basis of a Component
------------------------------------
- a piece of Html can be stored and bound to Content via Data Bindings.

- extends the HTML syntax in your templates with additional functionality

- data binding syntax helps to set DOM properties dynamically

- template renders a view, or user interface, in the browser, just like regular HTML, 
  but with a lot more function (it is a live view thank's to data binding)

- get and set DOM (Document Object Model) values dynamically with features such as 
  built-in template functions, variables, event listening, and data binding

- A Query (such as ViewChild) can find the TemplateRef associated to an <ng-template> element 
  so that it can be used programmatically (to pass it to the ViewContainerRef method createEmbeddedView())

- inside the <ng-template> tags you can reference variables present in the surrounding outer template

- a context object can be associated with <ng-template> elements. 
  Such an object contains variables that can be accessed from within 
  the template contents via template (let and as)

- @Input props for components, context for templates

- A component is actually just a directive with a special view â€” a "host view" 
  (defined by the template or templateUrl field in the decorator) associated with it




a basic template looks like this:
---------------------------------
<ng-template>
 html elements in here
</ng-template>

- the template can have a reference variable name: <ng-template #tpl>
  this way the template can be referenced from template instance
  in the constructor
  
ng-template -> templateRef -> view within ViewContainer in DOM