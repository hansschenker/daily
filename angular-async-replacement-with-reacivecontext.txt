https://generic-ui.com/blog/subscribe-in-angular
--------------------------------------------------------------------------------------------------------




Basically, the useReactiveContext function takes an observable as an argument and wraps it with the takeUntil operator. 
Since Angular 14 ChangeDetectorRef allows accessing a new method onDestroy that lets you to run your code 
when a component is destroyed. In the method above we have leveraged that fact and used it to automatically 
clean the subscription. The useReactiveContext function creates a reference to the ChangeDetectorRef using 
the new inject function. This way you donâ€™t have to pass a reference to the ChangeDetectorRef as a function argument.

inject can only be used inside a constructor
-------------------------------------------------
Unfortunately, the inject function comes with some downsides. It can be used only in a constructor or on class properties. 
That means the useReactiveContext function can also only be used in these exact places. I will show you a workaround in 
the next part of this article.

work around inject cons: Assign ReactiveContext to a class property
-------------------------------------------------------
You can create a class property that holds a reference to the context created by the useReactiveContext function. 
That solution allows you to use reactive context in class methods outside of the constructor scope:

export function useReactiveContext<T>(stream$: Observable<T>) {

  const changeDetector = inject(ChangeDetectorRef),
    unsubscribe$ = new Subject<void>();
	
  (changeDetector as ViewRef).onDestroy(() => {
    unsubscribe$.next();
    unsubscribe$.complete();
  });
	
  return {
    subscribe(
      next?: (value: T) => void,
      error?: (e: any) => void,
      complete?: () => void
    ): Subscription {
      return stream$
        .pipe(takeUntil(unsubscribe$))
        .subscribe(next, error, complete);
    },
  };
}

export function useReactiveContext<T>(
  stream$: Observable<T>,
  cd?: ChangeDetectorRef
) {

  const changeDetector = cd ? cd : inject(ChangeDetectorRef),
    unsubscribe$ = new Subject<void>(),
    innerStream$ = stream$;

  let innerStream$: Observable<T> | undefined;

  if (stream$) {
    innerStream$ = stream$.pipe(takeUntil(unsubscribe$));
  }

  (changeDetector as ViewRef).onDestroy(() => {
    unsubscribe$.next();
    unsubscribe$.complete();
  });

  const context = {
    connect: (stream$: Observable<T>) => {
      innerStream$ = stream$.pipe(takeUntil(unsubscribe$));
      return context;
    },
    subscribe(
      next?: (value: T) => void,
      error?: (e: any) => void,
      complete?: () => void
    ): Subscription {
      return innerStream$
        .pipe(takeUntil(unsubscribe$))
        .subscribe(next, error, complete);
    },
  };
  return context;
}


export function useReactiveContext<T>(stream$: Observable<T>) {

  const changeDetector = inject(ChangeDetectorRef),
    unsubscribe$ = new Subject<void>();

    // ...

  return {
    // ...
    subscribeAndRender(
      next?: (value: T) => void,
      error?: (e: any) => void,
      complete?: () => void
    ): Subscription {
      return innerStream$.subscribe(
        (v) => {
          next(v);
          changeDetector.detectChanges();
        },
        error,
        complete
      );
    },
  };
}
------------------------------------------------------------------------------------------
import { ChangeDetectorRef, inject, ViewRef } from '@angular/core';
import { noop, Observable, Subject, Subscription } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

export interface ReactiveContext<T> {

  connect<T>(stream$: Observable<T>): ReactiveContext<T>;

  subscribe(next?: (value: T) => void, error?: (e: any) => void, complete?: () => void): Subscription;

  subscribeAndRender(next?: (value: T) => void, error?: (e: any) => void, complete?: () => void): Subscription;

  unsubscribe(): void;

}

export function useReactiveContext<T>(stream$?: Observable<T>, cd?: ChangeDetectorRef): ReactiveContext<T> {

  const changeDetector = cd ? cd : inject(ChangeDetectorRef),
    unsub$ = new Subject<void>();

  let innerStream$: Observable<T> | undefined;

  if (stream$) {
    innerStream$ = stream$.pipe(takeUntil(unsub$));
  }

  (changeDetector as ViewRef).onDestroy(() => {
    unsub$.next();
    unsub$.complete();
  });

  const context = {
    connect: (stream$: Observable<T>) => {
      innerStream$ = stream$.pipe(takeUntil(unsub$));
      return context;
    },
    subscribe(next?: (value: T) => void, error?: (e: any) => void, complete?: () => void): Subscription {
      return innerStream$!.subscribe(next, error, complete);
    },
    subscribeAndRender(next?: (value: T) => void, error?: (e: any) => void, complete?: () => void): Subscription {
      return innerStream$!.subscribe((v) => {
          next ? next(v) : noop();
          changeDetector.detectChanges();
        },
        error,
        complete
      );
    },
    unsubscribe(): void {
      unsub$.next();
      unsub$.complete();
    }
  } as ReactiveContext<T>;
  return context;
}
